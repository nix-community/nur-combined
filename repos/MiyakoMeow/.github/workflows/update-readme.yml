name: Update README Package List

on:
  schedule:
    - cron: "10 0 * * *" # daily at 00:10 UTC
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: update-readme
  cancel-in-progress: false

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            substituters = https://miyakomeow.cachix.org/ https://nix-community.cachix.org/ https://cache.nixos.org/
            trusted-public-keys = miyakomeow.cachix.org-1:85k7pjjK1Voo+kMHJx8w3nT1rlBow3+4/M+LsAuMCRY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=

      - name: Install required tools
        run: |
          nix profile install nixpkgs#git nixpkgs#python3 nixpkgs#gh nixpkgs#jq

      - name: Update README
        id: update
        shell: bash
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

          python3 scripts/readme.py

          timestamp=$(date +%s)
          branch_name="docs/update-readme-$timestamp"

          if [ -n "$(git status --porcelain)" ]; then
            echo "has_update=true" >> $GITHUB_OUTPUT
            echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
          else
            echo "has_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.update.outputs.has_update == 'true'
        id: create-pull-request
        uses: peter-evans/create-pull-request@v7
        with:
          branch: ${{ steps.update.outputs.branch_name }}
          base: main
          commit-message: "docs(readme): update package list"
          title: "Docs: Update README package list"
          body: |
            由 GitHub Actions 自动更新 README 的 Package List
          labels: automated, documentation
          delete-branch: true
          token: ${{ secrets.AUTOMERGE_TOKEN }}
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>

      - name: Wait for CI completion
        if: steps.create-pull-request.outputs.pull-request-operation == 'created'
        run: |
          PR_NUMBER='${{ steps.create-pull-request.outputs.pull-request-number }}'
          echo "等待 PR #$PR_NUMBER 的 CI 完成"

          MAX_WAIT=1800
          WAIT_TIME=0

          while [ $WAIT_TIME -lt $MAX_WAIT ]; do
            HEAD_SHA=$(gh api "repos/${{ github.repository }}/pulls/$PR_NUMBER" --jq '.head.sha')
            CHECK_RUNS=$(gh api "repos/${{ github.repository }}/commits/$HEAD_SHA/check-runs" --jq '.check_runs')
            TOTAL_CHECKS=$(echo "$CHECK_RUNS" | jq length)
            COMPLETED_CHECKS=$(echo "$CHECK_RUNS" | jq '[.[] | select(.status == "completed")] | length')
            FAILED_CHECKS=$(echo "$CHECK_RUNS" | jq '[.[] | select(.conclusion == "failure" or .conclusion == "cancelled" or .conclusion == "timed_out")] | length')

            echo "检查状态: $COMPLETED_CHECKS/$TOTAL_CHECKS 已完成"

            if [ "$FAILED_CHECKS" -gt 0 ]; then
              echo "发现失败的检查，停止等待"
              FAILED_NAMES=$(echo "$CHECK_RUNS" | jq -r '.[] | select(.conclusion == "failure" or .conclusion == "cancelled" or .conclusion == "timed_out") | .name')
              echo "失败的检查: $FAILED_NAMES"
              exit 1
            fi

            if [ "$COMPLETED_CHECKS" -eq "$TOTAL_CHECKS" ] && [ "$TOTAL_CHECKS" -gt 0 ]; then
              echo "所有 CI 检查已完成"
              break
            fi

            echo "等待 CI 完成... (已等待 ${WAIT_TIME}s)"
            sleep 30
            WAIT_TIME=$((WAIT_TIME + 30))
          done

          if [ $WAIT_TIME -ge $MAX_WAIT ]; then
            echo "等待 CI 超时"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable Pull Request Automerge
        if: steps.create-pull-request.outputs.pull-request-operation == 'created'
        run: |
          PR_NUMBER='${{ steps.create-pull-request.outputs.pull-request-number }}'
          echo "启用 PR #$PR_NUMBER 的自动合并"
          gh pr merge "$PR_NUMBER" --auto --merge
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMERGE_TOKEN }} 