From 7a1dcbce0558f789ea0e153bb65d39ddcaf2c2df Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Gutyina=20Gerg=C5=91?= <gutyina.gergo.2@gmail.com>
Date: Sun, 23 Mar 2025 13:14:07 +0100
Subject: [PATCH 2/2] Drop usage of unstable let_chains feature

---
 src/gui/mod.rs         | 39 +++++++++++++++++++--------------------
 src/lib.rs             |  3 ++-
 src/providers/cache.rs | 38 +++++++++++++++++++++++---------------
 3 files changed, 44 insertions(+), 36 deletions(-)

diff --git a/src/gui/mod.rs b/src/gui/mod.rs
index 89e250e..ca09c92 100644
--- a/src/gui/mod.rs
+++ b/src/gui/mod.rs
@@ -447,13 +447,14 @@ impl App {
 
                 let info = self.state.store.get_mod_info(&mc.spec);
 
-                if let Some(ref info) = info
-                    && let Some(modio_id) = info.modio_id
-                    && self.problematic_mod_id.is_some_and(|id| id == modio_id)
-                {
-                    let icon = egui::Button::new(RichText::new("❌").color(Color32::WHITE))
-                        .fill(Color32::RED);
-                    ui.add_enabled(false, icon);
+                if let Some(ref info) = info {
+                    if let Some(modio_id) = info.modio_id {
+                        if self.problematic_mod_id.is_some_and(|id| id == modio_id) {
+                            let icon = egui::Button::new(RichText::new("❌").color(Color32::WHITE))
+                                .fill(Color32::RED);
+                            ui.add_enabled(false, icon);
+                        }
+                    }
                 }
 
                 if mc.enabled {
@@ -1692,19 +1693,17 @@ struct WindowLintsToggle;
 
 impl eframe::App for App {
     fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
-        if self.needs_restart
-            && let Some(original_exe_path) = &self.original_exe_path
-        {
-            debug!("needs restart");
-            self.needs_restart = false;
-
-            debug!("restarting...");
-            let _child = std::process::Command::new(original_exe_path)
-                .spawn()
-                .unwrap();
-            debug!("created child process");
-
-            std::process::exit(0);
+        if self.needs_restart {
+            if let Some(original_exe_path) = &self.original_exe_path {
+                debug!("needs restart");
+                self.needs_restart = false;
+                debug!("restarting...");
+                let _child = std::process::Command::new(original_exe_path)
+                    .spawn()
+                    .unwrap();
+                debug!("created child process");
+                std::process::exit(0);
+            }
         }
 
         // do some init things that depend on ctx so cannot be done earlier
diff --git a/src/lib.rs b/src/lib.rs
index a91fe47..d08d99b 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,4 +1,5 @@
-#![feature(let_chains)]
+// TODO: enable when stabilized: https://github.com/rust-lang/rust/issues/53667
+//#![feature(let_chains)]
 // TODO: enable when stabilized: https://github.com/rust-lang/rust/issues/51114
 //#![feature(if_let_guard)]
 
diff --git a/src/providers/cache.rs b/src/providers/cache.rs
index d7e1079..5dd81f5 100644
--- a/src/providers/cache.rs
+++ b/src/providers/cache.rs
@@ -139,24 +139,32 @@ pub(crate) fn read_cache_metadata_or_default(
                 });
             };
             let version = obj_map.remove("version");
-            if let Some(v) = version
-                && let serde_json::Value::String(vs) = v
-            {
-                match vs.as_str() {
-                    "0.0.0" => {
-                        // HACK: workaround a serde issue relating to flattening with tags
-                        // involving numeric keys in hashmaps, see
-                        // <https://github.com/serde-rs/serde/issues/1183>.
-                        match serde_json::from_slice::<Cache!["0.0.0"]>(&buf) {
-                            Ok(c) => {
-                                MaybeVersionedCache::Versioned(VersionAnnotatedCache::V0_0_0(c))
+            if let Some(v) = version {
+                if let serde_json::Value::String(vs) = v {
+                    match vs.as_str() {
+                        "0.0.0" => {
+                            // HACK: workaround a serde issue relating to flattening with tags
+                            // involving numeric keys in hashmaps, see
+                            // <https://github.com/serde-rs/serde/issues/1183>.
+                            match serde_json::from_slice::<Cache!["0.0.0"]>(&buf) {
+                                Ok(c) => {
+                                    MaybeVersionedCache::Versioned(VersionAnnotatedCache::V0_0_0(c))
+                                }
+                                Err(e) => Err(e).context(DeserializeVersionedCacheFailedSnafu {
+                                    version: "v0.0.0",
+                                })?,
                             }
-                            Err(e) => Err(e).context(DeserializeVersionedCacheFailedSnafu {
-                                version: "v0.0.0",
-                            })?,
                         }
+                        _ => unimplemented!(),
+                    }
+                } else {
+                    // HACK: workaround a serde issue relating to flattening with tags involving
+                    // numeric keys in hashmaps, see <https://github.com/serde-rs/serde/issues/1183>.
+                    match serde_json::from_slice::<HashMap<String, Box<dyn ModProviderCache>>>(&buf)
+                    {
+                        Ok(c) => MaybeVersionedCache::Legacy(Cache_v0_0_0 { cache: c }),
+                        Err(e) => Err(e).context(DeserializeLegacyCacheFailedSnafu)?,
                     }
-                    _ => unimplemented!(),
                 }
             } else {
                 // HACK: workaround a serde issue relating to flattening with tags involving
-- 
2.48.1

