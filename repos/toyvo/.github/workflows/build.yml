name: "Build and populate cache"
on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: "30 7 * * *"
  workflow_dispatch:
permissions:
  contents: write
  issues: write
  pull-requests: write
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install nix
        uses: DeterminateSystems/determinate-nix-action@main
      - name: Update flake.lock
        uses: DeterminateSystems/update-flake-lock@main
        id: update-flake-lock
        with:
          pr-title: "Update Nix flake inputs"
          pr-labels: |
            dependencies
            automated
      - name: Show nixpkgs version
        run: nix-instantiate --eval -E '(builtins.getFlake (builtins.toString ./.)).inputs.nixpkgs.lib.version'
      - name: Check evaluation
        run: nix flake show
      - name: Build nix packages
        run: nix run nixpkgs#nix-fast-build -- --skip-cached --flake ".#checks.$(nix eval --raw --impure --expr builtins.currentSystem)" -j 1 --eval-workers 1 --no-nom --cachix-cache toyvo --option accept-flake-config true
        env:
          CACHIX_AUTH_TOKEN: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: Merge flake.lock
        if: steps.update-flake-lock.outputs.pull-request-number != ''
        run: "gh pr merge --auto --squash ${{ steps.update-flake-lock.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ github.token }}
  tests:
    needs: Build
    strategy:
      matrix:
        runner:
          - ubuntu-latest
        nixPath:
          - nixpkgs=https://github.com/NixOS/nixpkgs/archive/refs/heads/nixpkgs-unstable.tar.gz
          - nixpkgs=https://github.com/NixOS/nixpkgs/archive/refs/heads/nixos-unstable.tar.gz
          - nixpkgs=https://github.com/NixOS/nixpkgs/archive/refs/heads/nixos-25.05.tar.gz
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: "${{ matrix.nixPath }}"
          extra_nix_config: access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Show nixpkgs version
        run: NIX_PATH="${{ matrix.nixPath }}" nix-instantiate --eval -E '(import <nixpkgs> {}).lib.version'
      - name: Setup cachix
        uses: cachix/cachix-action@v16
        with:
          name: toyvo
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: Check evaluation
        run: |
          NIX_PATH="${{ matrix.nixPath }}" nix-env -f . -qa \* --meta --xml \
            --allowed-uris https://static.rust-lang.org \
            --option allow-import-from-derivation true \
            --drv-path --show-trace \
            -I nixpkgs=$(NIX_PATH="${{ matrix.nixPath }}" nix-instantiate --find-file nixpkgs) \
            -I $PWD
      - name: Build nix packages
        run: NIX_PATH="${{ matrix.nixPath }}" nix shell -f '<nixpkgs>' nix-build-uncached -c nix-build-uncached ci.nix -A cacheOutputs
      - name: Trigger NUR update
        run: curl -XPOST "https://nur-update.nix-community.org/update?repo=https://github.com/ToyVo/nur-packages"
