# https://github.com/NixOS/nixpkgs/pull/287923
{
  config,
  pkgs,
  lib,
  ...
}:
let
  cfg = config.services.qbittorrent-nox;
  settingsFormatGenerate = lib.generators.toINI {
    mkKeyValue =
      let
        sep = "=";
      in
      k: v:
      if lib.isAttrs v then
        lib.concatStringsSep "\n" (
          lib.collect lib.isString (
            lib.mapAttrsRecursive (
              path: value:
              "${lib.escape [ sep ] (lib.concatStringsSep "\\" ([ k ] ++ path))}${sep}${
                lib.generators.mkValueStringDefault { } value
              }"
            ) v
          )
        )
      else
        lib.generators.mkKeyValueDefault { } sep k v;
  };
  settingsFormatType =
    let
      valueType =
        with lib.types;
        nullOr (oneOf [
          bool
          int
          float
          str
          (attrsOf valueType)
        ])
        // {
          description = "qBittorrent INI value";
        };
    in
    valueType;
in
{
  options.services.qbittorrent-nox = {
    enable = lib.mkEnableOption "qBittorrent-nox";
    package = lib.mkPackageOption pkgs "qbittorrent-nox" { };
    settings = lib.mkOption {
      type = lib.types.submodule {
        freeformType = settingsFormatType;
      };
      default = {
        LegalNotice.Accepted = false;
      };
      example = {
        LegalNotice.Accepted = true;
        Preferences = {
          Connection.PortRangeMin = 20082;
          Downloads.SavePath = "/mnt";
          General.Locale = "en";
          WebUI = {
            Username = "user";
            Password_PBKDF2 = "generated ByteArray.";
          };
        };
      };
      description = ''
        Attribute set whos fields overwrites fields in qBittorrent.conf (each time the service starts).
        Refer to [Explanation-of-Options-in-qBittorrent](https://github.com/qbittorrent/qBittorrent/wiki/Explanation-of-Options-in-qBittorrent).
        The Password_PBKDF2 format is oddly unique, you will likely want to use [this tool](https://codeberg.org/feathecutie/qbittorrent_password) to generate the format.
        Alternatively you can run qBittorrent independently first and use its webUI to generate the format.
      '';
    };
    webuiPort = lib.mkOption {
      type = lib.types.port;
      default = 9091;
      description = ''
        TCP port number to run the RPC/web interface.
      '';
    };
    torrentingPort = lib.mkOption {
      type = lib.types.nullOr lib.types.port;
      default = null;
      description = "the port passed to qbittorrent via `--torrenting-port`";
    };
    user = lib.mkOption {
      type = lib.types.str;
      description = ''
        User account under which qBittorrent runs.
      '';
    };
    group = lib.mkOption {
      type = lib.types.str;
      description = ''
        Group account under which qBittorrent runs.
      '';
    };
  };
  config = lib.mkIf cfg.enable {
    assertions = [
      {
        assertion = cfg.settings.LegalNotice.Accepted;
        message = "qBittorrent is a file sharing program. When you run a torrent, its data will be made available to others by means of upload. Any content you share is your sole responsibility. Set `services.qbittorrent.settings.LegalNotice.Accepted` to `true` if you agree.";
      }
    ];
    systemd.services.qbittorrent = {
      description = "qBittorrent Service";
      documentation = [ "man:qbittorrent-nox(1)" ];
      after = [ "network.target" ];
      wantedBy = [ "multi-user.target" ];
      preStart = ''
        mkdir -p $STATE_DIRECTORY/.config/qBittorrent/config
        echo ${lib.escapeShellArg (settingsFormatGenerate cfg.settings)} | ${lib.getExe pkgs.crudini} --merge $STATE_DIRECTORY/.config/qBittorrent/config/qBittorrent.conf
      '';
      script = ''
        exec ${cfg.package}/bin/qbittorrent-nox --profile=$STATE_DIRECTORY/.config --webui-port=${toString cfg.webuiPort} ${
          lib.optionalString (cfg.torrentingPort != null) "--torrenting-port=${toString cfg.torrentingPort}"
        }
      '';
      serviceConfig = {
        # https://github.com/qbittorrent/qBittorrent/pull/6806#discussion_r121478661
        PrivateTmp = false;
        PrivateNetwork = false;
        RemoveIPC = true;
        NoNewPrivileges = true;
        PrivateDevices = true;
        ProtectProc = "invisible";
        ProcSubset = "pid";
        ProtectSystem = "full";
        ProtectClock = true;
        ProtectHostname = true;
        ProtectKernelLogs = true;
        ProtectKernelModules = true;
        ProtectKernelTunables = true;
        ProtectControlGroups = true;
        RestrictAddressFamilies = [
          "AF_INET"
          "AF_INET6"
          "AF_NETLINK"
        ];
        RestrictNamespaces = true;
        RestrictRealtime = true;
        RestrictSUIDSGID = true;
        LockPersonality = true;
        MemoryDenyWriteExecute = true;
        SystemCallArchitectures = "native";
        CapabilityBoundingSet = "";
        SystemCallFilter = [ "@system-service" ];
        StateDirectory = "qBittorrent";
        User = cfg.user;
        Group = cfg.group;
        IOSchedulingClass = "idle";
        IOSchedulingPriority = "7";
        LimitNOFILE = "infinity";
        Restart = "always";
      };
    };
  };
}
