diff --git a/src/dbus/media_player2.rs b/src/dbus/media_player2.rs
index b33320e..88c725f 100644
--- a/src/dbus/media_player2.rs
+++ b/src/dbus/media_player2.rs
@@ -1,6 +1,6 @@
 //! # D-Bus interface proxy for: `org.mpris.MediaPlayer2`
 //!
-//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
+//! This code was generated by `zbus-xmlgen` `5.1.0` from D-Bus introspection data.
 //! Source: `org.mpris.MediaPlayer2.xml`.
 //!
 //! You may prefer to adapt it, instead of using it verbatim.
@@ -28,24 +28,10 @@ trait MediaPlayer2 {
     #[zbus(property)]
     fn can_raise(&self) -> zbus::Result<bool>;
 
-    /// CanSetFullscreen property
-    #[zbus(property)]
-    fn can_set_fullscreen(&self) -> zbus::Result<bool>;
-
     /// DesktopEntry property
     #[zbus(property)]
     fn desktop_entry(&self) -> zbus::Result<String>;
 
-    /// Fullscreen property
-    #[zbus(property)]
-    fn fullscreen(&self) -> zbus::Result<bool>;
-    #[zbus(property)]
-    fn set_fullscreen(&self, value: bool) -> zbus::Result<()>;
-
-    /// HasTrackList property
-    #[zbus(property)]
-    fn has_track_list(&self) -> zbus::Result<bool>;
-
     /// Identity property
     #[zbus(property)]
     fn identity(&self) -> zbus::Result<String>;
diff --git a/src/dbus/player.rs b/src/dbus/player.rs
index 15413c4..ca4b035 100644
--- a/src/dbus/player.rs
+++ b/src/dbus/player.rs
@@ -1,6 +1,6 @@
 //! # D-Bus interface proxy for: `org.mpris.MediaPlayer2.Player`
 //!
-//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
+//! This code was generated by `zbus-xmlgen` `5.1.0` from D-Bus introspection data.
 //! Source: `org.mpris.MediaPlayer2.Player.xml`.
 //!
 //! You may prefer to adapt it, instead of using it verbatim.
@@ -17,9 +17,6 @@ pub trait Player {
     /// Next method
     fn next(&self) -> zbus::Result<()>;
 
-    /// OpenUri method
-    fn open_uri(&self, uri: &str) -> zbus::Result<()>;
-
     /// Pause method
     fn pause(&self) -> zbus::Result<()>;
 
@@ -73,49 +70,48 @@ pub trait Player {
     #[zbus(property)]
     fn can_seek(&self) -> zbus::Result<bool>;
 
-    /// LoopStatus property
-    #[zbus(property)]
-    fn loop_status(&self) -> zbus::Result<String>;
-    #[zbus(property)]
-    fn set_loop_status(&self, value: &str) -> zbus::Result<()>;
-
-    /// MaximumRate property
-    #[zbus(property)]
-    fn maximum_rate(&self) -> zbus::Result<f64>;
-
     /// Metadata property
     #[zbus(property)]
     fn metadata(
         &self,
     ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;
 
-    /// MinimumRate property
-    #[zbus(property)]
-    fn minimum_rate(&self) -> zbus::Result<f64>;
-
     /// PlaybackStatus property
     #[zbus(property)]
     fn playback_status(&self) -> zbus::Result<String>;
 
-    /// Position property
-    #[zbus(property(emits_changed_signal="false"))]
-    fn position(&self) -> zbus::Result<i64>;
-
     /// Rate property
     #[zbus(property)]
-    fn rate(&self) -> zbus::Result<f64>;
-    #[zbus(property)]
-    fn set_rate(&self, value: f64) -> zbus::Result<()>;
-
-    /// Shuffle property
-    #[zbus(property)]
-    fn shuffle(&self) -> zbus::Result<bool>;
-    #[zbus(property)]
-    fn set_shuffle(&self, value: bool) -> zbus::Result<()>;
+    fn position(&self) -> zbus::Result<i64>;
 
     /// Volume property
     #[zbus(property)]
     fn volume(&self) -> zbus::Result<f64>;
     #[zbus(property)]
     fn set_volume(&self, value: f64) -> zbus::Result<()>;
+
+    /// Rate property (may not be supported by all players)
+    #[zbus(property)]
+    fn rate(&self) -> zbus::Result<f64>;
+}
+
+/// Extension trait to add rate property with fallback for players that don't support it
+pub trait PlayerRateExt {
+    async fn rate_with_fallback(&self) -> f64;
+}
+
+impl<'a> PlayerRateExt for PlayerProxy<'a> {
+    async fn rate_with_fallback(&self) -> f64 {
+        // Try to call the rate property directly, fall back to 1.0 if not supported
+        // We'll add the rate property to the trait and handle the error gracefully
+        match self.rate().await {
+            Ok(rate) => rate,
+            Err(_) => {
+                tracing::debug!(
+                    "Rate property not supported by this player, using default value 1.0"
+                );
+                1.0
+            }
+        }
+    }
 }
diff --git a/src/player.rs b/src/player.rs
index 7d89a49..b73a074 100644
--- a/src/player.rs
+++ b/src/player.rs
@@ -19,7 +19,7 @@ use zbus::{
 };
 
 use crate::{
-    dbus::player::{PlayerProxy, SeekedStream},
+    dbus::player::{PlayerProxy, PlayerRateExt, SeekedStream},
     lrc::{Lrc, TimeTag},
     utils::extract_str,
 };
@@ -195,10 +195,10 @@ impl PlayerInformation {
 pub struct PlayerInformationUpdateListener<'a> {
     player: PlayerProxy<'a>,
     metadata_stream: Fuse<PropertyStream<'a, HashMap<String, OwnedValue>>>,
-    rate_stream: Fuse<PropertyStream<'a, f64>>,
     status_stream: Fuse<PropertyStream<'a, String>>,
     seeked: SeekedStream,
     position_refresh_stream: Interval,
+    rate_refresh_stream: Interval,
 }
 #[derive(Debug)]
 pub enum PlayerInformationUpdate {
@@ -218,10 +218,7 @@ impl PlayerInformation {
                 .position()
                 .await
                 .context("Failed to get player position")?,
-            rate: player
-                .rate()
-                .await
-                .context("Failed to get player playback rate")?,
+            rate: player.rate_with_fallback().await,
             status: player
                 .playback_status()
                 .await
@@ -262,13 +259,13 @@ impl<'a> PlayerInformationUpdateListener<'a> {
     pub async fn new(player: PlayerProxy<'a>, refresh_interval: Duration) -> Result<Self> {
         Ok(Self {
             metadata_stream: player.receive_metadata_changed().await.fuse(),
-            rate_stream: player.receive_rate_changed().await.fuse(),
             status_stream: player.receive_playback_status_changed().await.fuse(),
             seeked: player
                 .receive_seeked()
                 .await
                 .context("Failed to receive seek signal")?,
             position_refresh_stream: interval(refresh_interval),
+            rate_refresh_stream: interval(refresh_interval * 5), // Check rate less frequently
             player,
         })
     }
@@ -277,9 +274,6 @@ impl<'a> PlayerInformationUpdateListener<'a> {
             metadata = self.metadata_stream.next() => {
                 metadata.context("Failed to receive metadata update event")?.get().await.context("Failed to get player metadata").map(PlayerInformationUpdate::Metadata)
             },
-            rate = self.rate_stream.next() => {
-                rate.context("Failed to receive rate update event")?.get().await.context("Failed to get player playback rate").map(PlayerInformationUpdate::Rate)
-            },
             status = self.status_stream.next() => {
                 status.context("Failed to receive status update event")?.get().await.context("Failed to get player playback status")?.parse().map(PlayerInformationUpdate::Status)
             }
@@ -289,6 +283,9 @@ impl<'a> PlayerInformationUpdateListener<'a> {
             _ = self.position_refresh_stream.tick() => {
                 self.player.position().await.context("Failed to get player position").map(|p| PlayerInformationUpdate::Position(p, Instant::now()))
             }
+            _ = self.rate_refresh_stream.tick() => {
+                Ok(PlayerInformationUpdate::Rate(self.player.rate_with_fallback().await))
+            }
         }
     }
 }
