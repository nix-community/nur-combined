diff --git a/src/components/keyboard/KeyBoard.vue b/src/components/keyboard/KeyBoard.vue
index 8e37299..0e02586 100644
--- a/src/components/keyboard/KeyBoard.vue
+++ b/src/components/keyboard/KeyBoard.vue
@@ -16,6 +16,7 @@ import {
   KeySteeringWheel as KeyMappingSteeringWheel,
   KeyObservation as KeyMappingObservation,
   KeyTap,
+  KeyLongPress,
   KeyMacro,
   KeyMapping,
   KeySwipe as KeyMappingKeySwipe,
@@ -45,6 +46,10 @@ const addButtonOptions: DropdownOption[] = [
     label: () => t("pages.KeyBoard.addButton.Tap"),
     key: "Tap",
   },
+  {
+    label: () => t("pages.KeyBoard.addButton.LongPress"),
+    key: "LongPress",
+  },
   {
     label: () => t("pages.KeyBoard.addButton.SteeringWheel"),
     key: "SteeringWheel",
@@ -82,6 +87,7 @@ const addButtonOptions: DropdownOption[] = [
 function onAddButtonSelect(
   type:
     | "Tap"
+    | "LongPress"
     | "Swipe"
     | "SteeringWheel"
     | "DirectionalSkill"
@@ -104,6 +110,9 @@ function onAddButtonSelect(
     asType<KeyTap>(keyMapping);
     keyMapping.pointerId = 3;
     keyMapping.time = 80;
+  } else if (type === "LongPress") {
+    asType<KeyLongPress>(keyMapping);
+    keyMapping.pointerId = 3;
   } else if (type === "Swipe") {
     asType<KeyMappingKeySwipe>(keyMapping);
     keyMapping.pointerId = 3;
diff --git a/src/components/keyboard/KeyCommon.vue b/src/components/keyboard/KeyCommon.vue
index 00e41f3..b506813 100644
--- a/src/components/keyboard/KeyCommon.vue
+++ b/src/components/keyboard/KeyCommon.vue
@@ -222,6 +222,8 @@ function showSetting() {
         ? t("pages.KeyBoard.KeyCommon.cancelSkill")
         : keyMapping.type === "Tap"
         ? t("pages.KeyBoard.KeyCommon.tap")
+        : keyMapping.type === "LongPress"
+        ? t("pages.Keyboard.KeyCommon.longPress")
         : t("pages.KeyBoard.KeyCommon.macro")
     }}</NH4>
     <NFormItem
diff --git a/src/i18n/en-US.json b/src/i18n/en-US.json
index e895078..4d0fcc2 100644
--- a/src/i18n/en-US.json
+++ b/src/i18n/en-US.json
@@ -161,6 +161,7 @@
       "addButton": {
         "SteeringWheel": "SteeringWheel",
         "Tap": "Tap",
+        "LongPress": "LongPress",
         "Skill": "Skill",
         "CancelSkill": "CancelSkill",
         "Observation": "Observation",
@@ -186,6 +187,7 @@
         "macroCode": "Macro code",
         "cancelSkill": "CancelSkill",
         "tap": "Tap",
+        "longPress": "LongPress",
         "macro": "Macro"
       },
       "setting": {
diff --git a/src/i18n/zh-CN.json b/src/i18n/zh-CN.json
index afa2924..8e1c651 100644
--- a/src/i18n/zh-CN.json
+++ b/src/i18n/zh-CN.json
@@ -153,6 +153,7 @@
     "KeyBoard": {
       "addButton": {
         "Tap": "普通点击",
+        "LongPress": "长按",
         "SteeringWheel": "键盘行走",
         "Skill": "技能",
         "CancelSkill": "技能取消",
@@ -185,6 +186,7 @@
         },
         "cancelSkill": "技能取消",
         "tap": "普通点击",
+        "longPress": "长按",
         "macroCode": "宏代码",
         "macro": "宏"
       },
diff --git a/src/tools/hotkey.ts b/src/tools/hotkey.ts
index 00b88b5..5aaf7d0 100644
--- a/src/tools/hotkey.ts
+++ b/src/tools/hotkey.ts
@@ -11,6 +11,7 @@ import {
   KeyDirectionalSkill,
   KeyDirectionlessSkill,
   KeyFire,
+  KeyLongPress,
   KeyMacro,
   KeyMacroList,
   KeyMappingConfig,
@@ -224,6 +225,28 @@ function addTapShortcuts(
   );
 }
 
+// Add function to handle LongPress shortcuts
+function addLongPressShortcuts(
+  key: string,
+  relativeSize: { w: number; h: number },
+  posX: number,
+  posY: number,
+  pointerId: number
+) {
+  posX = Math.round((posX / relativeSize.w) * store.screenSizeW);
+  posY = Math.round((posY / relativeSize.h) * store.screenSizeH);
+  addShortcut(
+    key,
+    async () => {
+      await touchX(TouchAction.Down, pointerId, posX, posY);
+    },
+    undefined,
+    async () => {
+      await touchX(TouchAction.Up, pointerId, posX, posY);
+    }
+  );
+}
+
 // add shortcuts for cancel skill
 function addCancelSkillShortcuts(
   key: string,
@@ -1451,6 +1474,16 @@ function applyKeyMappingConfigShortcuts(
             item.pointerId
           );
           break;
+        case "LongPress":
+          asType<KeyLongPress>(item);
+          addLongPressShortcuts(
+            item.key,
+            relativeSize,
+            item.posX,
+            item.posY,
+            item.pointerId
+          );
+          break;
         case "Swipe":
           asType<KeySwipe>(item);
           addSwipeShortcuts(
diff --git a/src/tools/keyMappingConfig.ts b/src/tools/keyMappingConfig.ts
index 15c4b18..9954523 100644
--- a/src/tools/keyMappingConfig.ts
+++ b/src/tools/keyMappingConfig.ts
@@ -67,6 +67,12 @@ export interface KeyTap extends KeyBase {
   time: number;
 }
 
+export interface KeyLongPress extends KeyBase {
+  type: "LongPress";
+  pointerId: number;
+  key: string;
+}
+
 export interface KeySwipe extends KeyBase {
   type: "Swipe";
   pointerId: number;
@@ -116,11 +122,12 @@ export type KeyMapping =
   | KeyMacro
   | KeyCancelSkill
   | KeyTap
+  | KeyLongPress
   | KeySwipe
   | KeySight
   | KeyFire;
 
-export type KeyCommon = KeyMacro | KeyCancelSkill | KeyTap;
+export type KeyCommon = KeyMacro | KeyCancelSkill | KeyTap | KeyLongPress;
 
 export type KeySkill =
   | KeyDirectionalSkill
