name: "Update OpenCode Package"

on:
  schedule:
    # Check for updates daily at 3:30 AM UTC
    - cron: '30 3 * * *'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  check-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Check for new opencode version
        id: check_version
        run: |
          # Get current version from package
          CURRENT_VERSION=$(grep 'version = ' pkgs/opencode-sst/default.nix | sed 's/.*version = "\([^"]*\)".*/\1/')
          echo "Current version: $CURRENT_VERSION"
          
          # Get latest version from GitHub API
          LATEST_VERSION=$(curl -s https://api.github.com/repos/sst/opencode/releases/latest | jq -r '.tag_name' | sed 's/^v//')
          echo "Latest version: $LATEST_VERSION"
          
          # Compare versions
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "Update available: $CURRENT_VERSION -> $LATEST_VERSION"
            echo "update_available=true" >> $GITHUB_OUTPUT
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No update available"
            echo "update_available=false" >> $GITHUB_OUTPUT
          fi

      - name: Update package version and hash
        if: steps.check_version.outputs.update_available == 'true'
        id: update_package
        run: |
          LATEST_VERSION="${{ steps.check_version.outputs.latest_version }}"
          PACKAGE_FILE="pkgs/opencode-sst/default.nix"
          
          echo "Updating opencode-sst to version $LATEST_VERSION using lightweight approach..."
          
          # Step 1: Update the version string
          sed -i "s/version = \"[^\"]*\"/version = \"$LATEST_VERSION\"/" "$PACKAGE_FILE"
          
          # Step 2: Calculate new hash using Nix's error message approach
          echo "Calculating hash for new version..."
          
          # First, set a dummy hash to trigger Nix to tell us the correct one
          sed -i "s/hash = \"[^\"]*\"/hash = \"sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\"/" "$PACKAGE_FILE"
          
          # Try to build and capture the error message with the correct hash
          echo "Getting correct hash from Nix..."
          BUILD_OUTPUT=$(nix build .#opencode-sst --no-link 2>&1 || true)
          
          # Extract the correct hash from the error message
          NEW_HASH=$(echo "$BUILD_OUTPUT" | grep "got:" | sed 's/.*got: *\(sha256-[^[:space:]]*\).*/\1/')
          
          if [ -z "$NEW_HASH" ]; then
            echo "❌ Failed to extract hash from Nix output"
            echo "Build output:"
            echo "$BUILD_OUTPUT"
            exit 1
          fi
          
          # Step 3: Update the hash in the file
          sed -i "s/hash = \"[^\"]*\"/hash = \"$NEW_HASH\"/" "$PACKAGE_FILE"
          
          echo "Updated to version: $LATEST_VERSION"
          echo "New hash: $NEW_HASH"
          
          echo "hash_calculated=true" >> $GITHUB_OUTPUT
          echo "new_hash=$NEW_HASH" >> $GITHUB_OUTPUT

      - name: Test build (optional verification)
        if: steps.check_version.outputs.update_available == 'true' && steps.update_package.outputs.hash_calculated == 'true'
        id: test_build
        run: |
          echo "Testing build of updated package..."
          
          # Try to build the package (for verification only)
          if nix build .#opencode-sst --no-link --print-build-logs; then
            echo "Build successful!"
            echo "build_success=true" >> $GITHUB_OUTPUT
          else
            echo "Build failed!"
            echo "build_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure git for PR creation
        if: steps.check_version.outputs.update_available == 'true' && steps.update_package.outputs.hash_calculated == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create Pull Request
        if: steps.check_version.outputs.update_available == 'true' && steps.update_package.outputs.hash_calculated == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: "update-opencode-${{ steps.check_version.outputs.latest_version }}"
          title: "chore: update opencode to v${{ steps.check_version.outputs.latest_version }}"
          body: |
            Automated update of opencode package from v${{ steps.check_version.outputs.current_version }} to v${{ steps.check_version.outputs.latest_version }}.

            ${{ steps.test_build.outputs.build_success == 'true' && '✅ **Build Status**: Successful' || '❌ **Build Status**: Failed' }}
            🔄 **Auto-generated**: This PR was created by the automated update workflow.

            **Changes:**
            - Updated version from ${{ steps.check_version.outputs.current_version }} to ${{ steps.check_version.outputs.latest_version }}
            - Updated package hash to ${{ steps.update_package.outputs.new_hash }}

            **Verification:**
            - Package builds successfully with Nix
            - All dependencies resolved correctly
          draft: ${{ steps.test_build.outputs.build_success == 'false' }}
          delete-branch: true

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.check_version.outputs.update_available }}" == "true" ]; then
            echo "✅ Update check completed"
            echo "📦 Version: ${{ steps.check_version.outputs.current_version }} → ${{ steps.check_version.outputs.latest_version }}"
            
            if [ "${{ steps.test_build.outputs.build_success }}" == "true" ]; then
              echo "🚀 Build successful - PR auto-merged"
            else
              echo "⚠️  Build failed - Draft PR created for manual review"
            fi
          else
            echo "ℹ️  No updates available - opencode is up to date"
          fi