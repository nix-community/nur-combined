name: "Update OpenCode Package"

on:
  schedule:
    # Check for updates daily at 3:30 AM UTC
    - cron: '30 3 * * *'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  check-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Check for new opencode version
        id: check_version
        run: |
          # Get current version from package
          CURRENT_VERSION=$(grep 'version = ' pkgs/opencode-sst/default.nix | sed 's/.*version = "\([^"]*\)".*/\1/')
          echo "Current version: $CURRENT_VERSION"
          
          # Validate current version
          if [ -z "$CURRENT_VERSION" ] || [ "$CURRENT_VERSION" = "null" ]; then
            echo "‚ùå Failed to extract current version from package file"
            exit 1
          fi
          
          # Get latest version from GitHub API with error handling
          echo "Fetching latest version from GitHub API..."
          API_RESPONSE=$(curl -s https://api.github.com/repos/sst/opencode/releases/latest)
          
          # Check if API call was successful
          if [ -z "$API_RESPONSE" ]; then
            echo "‚ùå Failed to fetch data from GitHub API"
            exit 1
          fi
          
          # Extract version with validation
          LATEST_VERSION=$(echo "$API_RESPONSE" | jq -r '.tag_name' | sed 's/^v//')
          echo "Latest version: $LATEST_VERSION"
          
          # Validate latest version
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            echo "‚ùå Failed to extract latest version from GitHub API response"
            echo "API Response: $API_RESPONSE"
            exit 1
          fi
          
          # Check if there's already a merged commit with this version
          if git log --oneline --grep="update opencode.*$LATEST_VERSION" --since="30 days ago" | grep -q "update opencode"; then
            echo "Version $LATEST_VERSION already exists in recent commits"
            echo "update_available=false" >> $GITHUB_OUTPUT
            echo "reason=already_updated" >> $GITHUB_OUTPUT
          elif [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "Update available: $CURRENT_VERSION -> $LATEST_VERSION"
            echo "update_available=true" >> $GITHUB_OUTPUT
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No update available - versions match"
            echo "update_available=false" >> $GITHUB_OUTPUT
            echo "reason=same_version" >> $GITHUB_OUTPUT
          fi

      - name: Update package version and hash
        if: steps.check_version.outputs.update_available == 'true'
        id: update_package
        run: |
          LATEST_VERSION="${{ steps.check_version.outputs.latest_version }}"
          PACKAGE_FILE="pkgs/opencode-sst/default.nix"
          
          # Validate version before proceeding
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            echo "‚ùå Invalid version received: '$LATEST_VERSION'"
            exit 1
          fi
          
          echo "Updating opencode-sst to version $LATEST_VERSION using lightweight approach..."
          
          # Step 1: Update the version string
          sed -i "s|version = \"[^\"]*\"|version = \"$LATEST_VERSION\"|" "$PACKAGE_FILE"
          
          # Step 2: Calculate new hash using Nix's error message approach
          echo "Calculating hash for new version..."
          
          # First, set a dummy hash to trigger Nix to tell us the correct one
          sed -i "s|hash = \"[^\"]*\"|hash = \"sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\"|" "$PACKAGE_FILE"
          
          # Try to build and capture the error message with the correct hash
          echo "Getting correct hash from Nix..."
          BUILD_OUTPUT=$(nix build .#opencode-sst --no-link 2>&1 || true)
          
          # Extract the correct hash from the error message
          NEW_HASH=$(echo "$BUILD_OUTPUT" | grep "got:" | grep -o "sha256-[A-Za-z0-9+/=]*")
          
          if [ -z "$NEW_HASH" ]; then
            echo "‚ùå Failed to extract hash from Nix output"
            echo "Build output:"
            echo "$BUILD_OUTPUT"
            exit 1
          fi
          
          # Step 3: Update the hash in the file
          # Use | as delimiter instead of / to avoid issues with special characters
          sed -i "s|hash = \"[^\"]*\"|hash = \"$NEW_HASH\"|" "$PACKAGE_FILE"
          
          echo "Updated to version: $LATEST_VERSION"
          echo "New hash: $NEW_HASH"
          
          echo "hash_calculated=true" >> $GITHUB_OUTPUT
          echo "new_hash=$NEW_HASH" >> $GITHUB_OUTPUT

      - name: Test build (optional verification)
        if: steps.check_version.outputs.update_available == 'true' && steps.update_package.outputs.hash_calculated == 'true'
        id: test_build
        run: |
          echo "Testing build of updated package..."
          
          # Try to build the package (for verification only)
          if nix build .#opencode-sst --no-link --print-build-logs; then
            echo "Build successful!"
            echo "build_success=true" >> $GITHUB_OUTPUT
          else
            echo "Build failed!"
            echo "build_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure git for PR creation
        if: steps.check_version.outputs.update_available == 'true' && steps.update_package.outputs.hash_calculated == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Close existing opencode update PRs
        if: steps.check_version.outputs.update_available == 'true'
        run: |
          echo "Checking for existing opencode update PRs to close..."
          
          # Get all open PRs with titles starting with "chore: update opencode"
          EXISTING_PRS=$(gh pr list --state open --json number,title --jq '.[] | select(.title | startswith("chore: update opencode")) | .number')
          
          if [ -n "$EXISTING_PRS" ]; then
            echo "Found existing opencode update PRs: $EXISTING_PRS"
            for pr_number in $EXISTING_PRS; do
              echo "Closing PR #$pr_number..."
              gh pr close $pr_number --comment "Superseded by newer opencode version update"
            done
          else
            echo "No existing opencode update PRs found"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete existing opencode update branches
        if: steps.check_version.outputs.update_available == 'true'
        run: |
          echo "Checking for existing opencode update branches to delete..."
          
          # Get all remote branches starting with "update-opencode-"
          EXISTING_BRANCHES=$(git branch -r | grep "origin/update-opencode-" | sed 's/origin\///' | xargs)
          
          if [ -n "$EXISTING_BRANCHES" ]; then
            echo "Found existing branches: $EXISTING_BRANCHES"
            for branch in $EXISTING_BRANCHES; do
              echo "Deleting branch: $branch"
              git push origin --delete "$branch" || true
            done
          else
            echo "No existing opencode update branches found"
          fi

      - name: Create Pull Request
        if: steps.check_version.outputs.update_available == 'true' && steps.update_package.outputs.hash_calculated == 'true'
        id: create_pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: "update-opencode-${{ steps.check_version.outputs.latest_version }}"
          title: "chore: update opencode v${{ steps.check_version.outputs.current_version }} ‚Üí v${{ steps.check_version.outputs.latest_version }}"
          commit-message: |
            chore: update opencode v${{ steps.check_version.outputs.current_version }} ‚Üí v${{ steps.check_version.outputs.latest_version }}

            - Updated version from ${{ steps.check_version.outputs.current_version }} to ${{ steps.check_version.outputs.latest_version }}
            - Updated package hash to ${{ steps.update_package.outputs.new_hash }}
            - Automated update via GitHub Actions workflow
          body: |
            Automated update of opencode package from v${{ steps.check_version.outputs.current_version }} to v${{ steps.check_version.outputs.latest_version }}.

            ${{ steps.test_build.outputs.build_success == 'true' && '‚úÖ **Build Status**: Successful - Will auto-merge' || '‚ùå **Build Status**: Failed - Requires manual review' }}
            üîÑ **Auto-generated**: This PR was created by the automated update workflow.

            **Changes:**
            - Updated version from ${{ steps.check_version.outputs.current_version }} to ${{ steps.check_version.outputs.latest_version }}
            - Updated package hash to ${{ steps.update_package.outputs.new_hash }}

            **Verification:**
            - Package builds successfully with Nix
            - All dependencies resolved correctly
          draft: ${{ steps.test_build.outputs.build_success == 'false' }}
          delete-branch: true

      - name: Auto-merge successful builds
        if: steps.test_build.outputs.build_success == 'true' && steps.create_pr.outputs.pull-request-number
        run: |
          PR_NUMBER="${{ steps.create_pr.outputs.pull-request-number }}"
          echo "Attempting to auto-merge PR #$PR_NUMBER..."
          
          # Try auto-merge first (for repos with required checks)
          if gh pr merge $PR_NUMBER --auto --squash 2>/dev/null; then
            echo "‚úÖ Auto-merge enabled for PR #$PR_NUMBER"
            echo "PR will be automatically merged when all checks pass"
          else
            echo "Auto-merge not available (no required checks), merging directly..."
            # Direct merge for repos without required status checks
            gh pr merge $PR_NUMBER --squash
            echo "‚úÖ PR #$PR_NUMBER merged successfully"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger NUR sync workflow
        if: steps.test_build.outputs.build_success == 'true' && steps.create_pr.outputs.pull-request-number
        run: |
          echo "üîÑ Triggering NUR sync workflow after successful merge..."
          
          # Wait a moment for the merge to complete
          sleep 10
          
          # Trigger the build workflow (adjust workflow name as needed)
          if gh workflow list | grep -q "Build and populate cache"; then
            gh workflow run "build.yml" || gh workflow run "Build and populate cache" || true
            echo "‚úÖ NUR sync workflow triggered"
          else
            echo "‚ÑπÔ∏è  NUR sync workflow not found - may trigger automatically on push"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.check_version.outputs.update_available }}" == "true" ]; then
            echo "‚úÖ Update check completed"
            echo "üì¶ Version: ${{ steps.check_version.outputs.current_version }} ‚Üí ${{ steps.check_version.outputs.latest_version }}"
            
            if [ "${{ steps.test_build.outputs.build_success }}" == "true" ]; then
              echo "üöÄ Build successful - PR auto-merged"
              echo "üîÑ NUR sync workflow triggered"
            else
              echo "‚ö†Ô∏è  Build failed - Draft PR created for manual review"
            fi
          elif [ "${{ steps.check_version.outputs.reason }}" == "already_updated" ]; then
            echo "‚ÑπÔ∏è  Version ${{ steps.check_version.outputs.latest_version || 'latest' }} already updated recently"
          else
            echo "‚ÑπÔ∏è  No updates available - opencode is up to date"
          fi