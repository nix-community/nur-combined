#!/usr/bin/env bash
set -Eeuo pipefail

if [[ ! ( "${2-}" =~ ^~?([-_[:alnum:]]+)/([-_.[:alnum:]]+)$ ) ]]; then
  echo "Usage: ${0##*/} <hostname> <owner>/<repo> [local path]" >&2
  exit 1
fi

hostname="$1"
owner="${BASH_REMATCH[1]}"
repo="${BASH_REMATCH[2]}"
path="${3:-$repo}"

case "$hostname" in
  'codeberg.org'|'github.com'|'gist.github.com'|'gitlab.com')
    https="https://$hostname/$owner/$repo.git"
    ssh="git@$hostname:$owner/$repo.git"
    ;;
  'sr.ht')
    https="https://git.$hostname/~$owner/$repo"
    ssh="git@git.$hostname:~$owner/$repo"
    ;;
  *) echo "Remote configuration unknown for [3m$hostname[23m" >&2; exit 1;;
esac

if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  if git remote | grep --quiet "^$owner$"; then
    echo "Configuring remote [3m$owner/$repo[23m for HTTPS fetch and SSH push" >&2

    git remote set-url "$owner" "$https"
    git remote set-url --push "$owner" "$ssh"
  else
    echo "Adding remote [3m$owner/$repo[23m with HTTPS fetch and SSH push" >&2

    git remote add -f "$owner" "$https"
    git remote set-url --push "$owner" "$ssh"
  fi
else
  echo "Cloning from remote [3m$owner/$repo[23m with HTTPS fetch and SSH push" >&2

  git clone --origin "$owner" "$https" "$path"
  cd "$path"
  git remote set-url --push "$owner" "$ssh"
fi

configure_requests() { local display="$1" ref="$2"
  if ! git config --get-regexp 'remote\.[^.]+\.fetch' "refs/$ref" >/dev/null; then
    echo "Configuring access to $display requests" >&2

    git config --add "remote.$owner.fetch" "+refs/$ref/*/head:refs/remotes/$owner/#*"
    git fetch "$owner"
  fi
}
case "$hostname" in
  'codeberg.org'|'github.com') configure_requests 'pull' 'pull';;
  'gist.github.com');;
  'gitlab.com') configure_requests 'merge' 'merge-requests';;
  'sr.ht');;
  *) echo "Warning: Merge request configuration unknown for [3m$hostname[23m" >&2;;
esac
