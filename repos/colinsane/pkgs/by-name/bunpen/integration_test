#!/usr/bin/env bash
# vim: set shiftwidth=2 :

set -eu

# we can't rely on /usr/bin/env existing in the nix build environment
env=$(which env)

die() {
  echo "$1"
  return 1
}

captureExitStatus() {
  # run this command in a subshell, to prevent `set -e` from aborting the main shell.
  # then echo its return code
  ("$@" >&2; echo $?)
}

test_01_trivial() {
  bunpen --bunpen-path / "$env" true
}

test_02_invoke_by_path() {
  bunpen --bunpen-path / true
}

test_03_errors_on_invalid_file() {
  bunpen --bunpen-path / this_file_does_not_exist && return 1 || true
}

test_04_disable_by_env_var() {
  BUNPEN_DISABLE=1 bunpen true
}

test_05_propagates_rc_when_disabled() {
  test $(captureExitStatus env BUNPEN_DISABLE=1 bunpen sh -c "exit 55") = 55
}

test_06_propagates_rc() {
  test $(captureExitStatus bunpen --bunpen-path / sh -c "exit 55") = 55
}

test_07_forwards_stdout_when_disabled() {
  test $(BUNPEN_DISABLE=1 bunpen --bunpen-path / sh -c "echo hello") = hello
}

test_08_forwards_stdout() {
  local stdout=$(bunpen --bunpen-path / echo "hello")
  test "$stdout" = "hello"
}

test_09_no_logging_by_default() {
  local stdout=$(bunpen --bunpen-path / true 2>&1)
  test -z "$stdout"
}

test_10_logs_something() {
  local stdout=$(bunpen --bunpen-debug=4 --bunpen-path / true 2>&1)
  test -n "$stdout"
}

# runs a command in the sandbox and sends the sandbox helper SIGHUP.
# if the command runs to completion (because e.g. SIGHUP was blocked), it prints "completed"
# if the command aborts (because it received SIGHUP), it doesn't print anything.
# invoke as `signal_test_helper "nohup"` to block the signal inside the sandbox.
# calling once with and without "nohup" lets us be certain that SIGHUP was in fact delivered.
signal_test_helper() {
  # sleep for the test duration inside the bunpen
  exec 3< <(bunpen --bunpen-path / "$@" sh -c "echo loaded; sleep 2; echo completed")
  local parent=$!

  read <&3 line
  test line = "loaded"
  # SIGHUP the bunpen and see if it actually forwards to the child.
  "$env" kill -SIGHUP "$parent"
  read <&3 line
  echo "$line"
}

test_11_receives_signals() {
  test -z "$(signal_test_helper)"
}
test_12_forwards_signals() {
  test "$(signal_test_helper nohup)" = "completed"
}

test_13_bunpen_append_env_var() {
  BUNPEN_APPEND="--bunpen-path /" bunpen ls /
}

test_13_bunpen_append_env_var_extra_formatting() {
  BUNPEN_APPEND="  --bunpen-debug=4  --bunpen-keep-pid --bunpen-path   / " bunpen ls /
}

test_14_keep_net() {
  # new namespaces get a loopback device, however bunpen doesn't auto-up the loopback.
  # most containers (e.g. nix build environment) do up the lo.
  # it wouldn't necessarily be _bad_ if bunpen changed behavior here,
  # but in the meantime this is the easiest way to see that --bunpen-keep-net *does something*
  # (better would be to try communicating between test runner and bunpen program, e.g. netcat?)
  test -n "$(bunpen --bunpen-path / --bunpen-keep-net ip link show lo up)"
  test -z "$(bunpen --bunpen-path / ip link show lo up)"
}

test_15_reap_children() {
  # in a PID namespace, PID 1 needs to reap children.
  # that is, any processes which `fork` away from the main program being sandboxed,
  # and then exit, become zombies: PID 1 needs to `wait` on them to properly dispose of the processes.
  bunpen --bunpen-path / bash -c "setsid -f true ; sleep 2" &
  sleep 0.5
  # check for a line like: `225215 ?        Zs     0:00 [true] <defunct>`
  # if this line exists, then we failed to reap
  ps x | grep -E 'Zs +[0-9]+:[0-9]+ \[true\] <defunct>' && return 1 || return 0
}

test_16_keep_env() {
  ORIG_ENV=orig bunpen --bunpen-path / bash -c '[[ "$ORIG_ENV" = orig && -z "$NOT_ENV" ]]'
}

test_17_new_env() {
  bunpen --bunpen-path / --bunpen-env NEW_ENV=new bash -c '[[ "$NEW_ENV" = new && -z "$NOT_ENV" ]]'
}

test_18_updated_env() {
  UPD_ENV=orig bunpen --bunpen-path / --bunpen-env UPD_ENV=new bash -c '[[ "$UPD_ENV" = new && -z "$NOT_ENV" ]]'
}

test_19_substitute_env_home() {
  # HOME defaults to /homeless-shelter
  # XDG_RUNTIME_DIR defaults to (unset)
  bunpen --bunpen-path / --bunpen-env 'H_ENV=/head$HOME/tail' --bunpen-env 'R_ENV=$XDG_RUNTIME_DIR/tail' bash -c \
    '[[ "$H_ENV" = /head/homeless-shelter/tail && "$R_ENV" = /tail ]]'
}
test_20_substitute_env_all() {
  XDG_RUNTIME_DIR=/r/t bunpen --bunpen-path / --bunpen-env 'H_ENV=/head$HOME/tail' --bunpen-env 'R_ENV=$XDG_RUNTIME_DIR/tail' bash -c \
    '[[ "$H_ENV" = /head/homeless-shelter/tail && "$R_ENV" = /r/t/tail ]]'
}
test_21_substitute_env_escapes() {
  bunpen --bunpen-path / --bunpen-env 'H_ENV=/head$$HOME/tail' --bunpen-env 'H_ENV2=$$$HOME/tail' bash -c \
    'echo "$H_ENV2" && [[ "$H_ENV" = '"'"'/head$HOME/tail'"'"' && "$H_ENV2" = '"'"'$/homeless-shelter/tail'"'"' ]]'
}


tested=
rc=0
for f in $(declare -F); do
  if [[ "$f" =~ ^test_* ]]; then
    echo -n "$f: ..."
    if "$f"; then
      echo " SUCCESS"
    else
      rc=1
      echo " FAIL"
    fi
    tested="$tested"1
  fi
done

test -n "$tested" && exit "$rc"
