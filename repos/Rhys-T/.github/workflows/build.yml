name: "Build and populate cache"
on:
  workflow_dispatch: # allows manual triggering
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/build.yml'
      - 'flake.nix'
      - 'flake.lock'
      - 'update.nix'
  push:
    branches:
      - main
      - master
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/build.yml'
      - 'flake.nix'
      - 'flake.lock'
      - 'update.nix'
  schedule:
    # rebuild everyday at 3:30
    # TIP: Choose a random time here so not all repositories are build at once:
    # https://www.random.org/clock-times/?num=1&earliest=01%3A00&latest=08%3A00&interval=5&format=html&rnd=new
    - cron:  '30 3 * * *'
jobs:
  define-matrix:
    name: Define job matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Define matrix
        id: matrix
        run: |
          jq -nrf /dev/stdin << 'EOF' > "$GITHUB_OUTPUT"
            
            "Rhys-T" as $nurRepo |
            "rhys-t" as $cachixName |
            
            "24.11" as $stable |
            null as $oldStable |
            
            [
              "Lnx x64/ubuntu-latest",
              "Lnx A64/ubuntu-24.04-arm",
              "Mac x64/macos-13",
              "Mac A64/macos-latest",
            empty] as $runners |
            
            [
              "nixpkgs-unstable",
              "nixos-unstable",
              "nixos-\(($stable, $oldStable) | select(. != null))",
            empty] as $nixpkgss |
            
            [
              "base",
              "mame",
              "hbmame",
              "qemu-screamer",
            empty] as $subsets |
            
            {include: [
              $runners[] as $runner |
              $nixpkgss[] as $nixpkgs |
              (if $nixpkgs | test("^[0-9a-f]{40}$") then $nixpkgs else "refs/heads/\($nixpkgs)" end) as $nixpkgsPath |
              ($runner | split("/")) as [$displayRunner, $runner] |
              (if ($runner | startswith("macos")) then
                $nixpkgs | gsub("^nixos-(?<version>[0-9]+\\.[0-9]+)$"; "nixpkgs-\(.version)-darwin")
              else $nixpkgs end) as $nixpkgs |
              select(($runner | startswith("ubuntu")) or ($nixpkgs | startswith("nixos") | not)) |
              ($runner | split("+qemu-")) as [$runner, $qemuSystem] |
              (if $qemuSystem then {
                "aarch64-linux": "arm64",
              }[$qemuSystem] else null end) as $qemuSystemForAction |
              # (if $qemuSystem then $subsets[] else "all" end) as $subset |
              $subsets[] as $subset |
              select(($runner | startswith("macos")) or ($subset != "mame")) |
              ($nixpkgs |
                gsub("^nixpkgs-"; "NP-") |
                gsub("^nixos-"; "NO-") |
                gsub("-unstable$"; "-U") |
                gsub("-darwin$"; "-D") |
                gsub("^(?<short>[0-9a-f]{8})[0-9a-f]{32}$"; "\(.short)") |
              .) as $displayNixpkgs |
              {$displayRunner, $runner, $qemuSystem, $qemuSystemForAction, $displayNixpkgs, $nixpkgs, $nixpkgsPath, $subset, $nurRepo, $cachixName}
            ]} |
            
            @json "matrix=\(.)"
            
          EOF
  tests:
    needs: define-matrix
    strategy:
      matrix: ${{ fromJson(needs.define-matrix.outputs.matrix) }}
      fail-fast: false
    name: ${{ matrix.displayRunner }} ${{ matrix.displayNixpkgs }} ${{ matrix.subset }}
    runs-on: ${{ matrix.runner }}
    outputs:
      nurRepo: ${{ steps.nurRepo.outputs.nurRepo }}
    steps:
    - name: Output nurRepo for final job
      id: nurRepo
      run: echo 'nurRepo=${{ matrix.nurRepo }}' >> "$GITHUB_OUTPUT"
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install qemu-user-static
      if: ${{ matrix.qemuSystem != null }}
      uses: docker/setup-qemu-action@v3
      with:
        platforms: ${{ matrix.qemuSystemForAction }}
    - name: Install nix
      uses: cachix/install-nix-action@v31
      with:
        nix_path: "nixpkgs=https://github.com/NixOS/nixpkgs/archive/${{ matrix.nixpkgsPath }}.tar.gz"
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
          ${{ matrix.qemuSystem && format('extra-platforms = {0}', matrix.qemuSystem) || '' }}
    - name: Show nixpkgs version
      run: nix-instantiate --eval -E '(import <nixpkgs> {}).lib.version'
    - name: Setup cachix
      uses: cachix/cachix-action@v16
      # Don't replace <YOUR_CACHIX_NAME> here!
      if: ${{ matrix.cachixName != '<YOUR_CACHIX_NAME>' }}
      with:
        name: ${{ matrix.cachixName }}
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - name: Check evaluation
      run: |
        nix-env -f . -qa \* --meta --xml \
          --allowed-uris https://static.rust-lang.org \
          --option restrict-eval true \
          --option allow-import-from-derivation true \
          --drv-path --show-trace \
          -I nixpkgs=$(nix-instantiate --find-file nixpkgs) \
          -I $PWD
    - name: Restore cached build failures
      id: restoreFailCache
      uses: actions/cache/restore@v4
      with:
        path: /tmp/buildFailures
        key: buildFailures-${{ hashFiles('**.nix,pkgs/**') }}
        restore-keys:
          buildFailures-
    - name: Build nix packages
      id: build
      run: |
        nix shell -f '<nixpkgs>' nix-build-uncached -c \
          nix-build-uncached ci.nix \
            -build-flags '-L --keep-going' \
            ${{ matrix.qemuSystem && format('--argstr platform {0}', matrix.qemuSystem) || '' }} \
            ${{ steps.restoreFailCache.outputs.cache-hit == 'true' && '--arg cachedBuildFailures /tmp/buildFailures' || '' }} \
            --argstr subsetName ${{ matrix.subset }} -A cacheOutputs \
          2>&1 | tee /tmp/build-uncached.log
    - name: Upload build logs
      if: '!cancelled()'
      uses: actions/upload-artifact@v4
      with:
        name: Rhys-T-nur-packages-build-logs-${{ matrix.runner }}${{ matrix.qemuSystem && format('+qemu-{0}', matrix.qemuSystem) || '' }}-${{ matrix.nixpkgs }}-${{ matrix.subset }}
        path: |
          /nix/var/log
          !/nix/var/log/nix/drvs/*/*user-environment*
        if-no-files-found: ignore
    - name: Upload build failures for subset
      if: '!cancelled()'
      run: |
        rm -rf /tmp/buildFailures
        mkdir /tmp/buildFailures
        grep -E '^error:.*/nix/store/[^/]*\.drv' /tmp/build-uncached.log | grep -Eo '/nix/store/[^/]*\.drv' | sort | uniq | while IFS= read -r drvPath; do
          touch /tmp/buildFailures/${drvPath##*/}
        done
  
  trigger-update:
    name: Trigger NUR update
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - name: Trigger NUR update
      # Don't replace <YOUR_REPO_NAME> here!
      if: ${{ needs.tests.outputs.nurRepo != '<YOUR_REPO_NAME>' }}
      run: curl -XPOST "https://nur-update.nix-community.org/update?repo=${{ needs.tests.outputs.nurRepo }}"
  alls-green:
    if: always()
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: re-actors/alls-green@v1.2.2
        with:
          jobs: ${{ toJSON(needs) }}
  merge-fail-cache:
    if: always()
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Merge build failure cache
        uses: actions/download-artifact@v4
        with:
          pattern: buildFailures-*
          merge-multiple: true
      - name: Save merged build failure cache
        uses: actions/cache/save@v4
        with:
          path: /tmp/buildFailures
          key: buildFailures-${{ hashFiles('**.nix,pkgs/**') }}
      # - name: Cleanup partial build failure caches
      #   uses: geekyeggo/delete-artifact@f275313e70c08f6120db482d7a6b98377786765b # v5.1.0
      #   with:
      #     name: buildFailures-*
      #     failOnError: false
