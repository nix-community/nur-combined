diff --git a/libtransmission/file-posix.cc b/libtransmission/file-posix.cc
index 82840bfd..3d00b006 100644
--- a/libtransmission/file-posix.cc
+++ b/libtransmission/file-posix.cc
@@ -261,6 +261,46 @@ std::string_view tr_sys_path_basename(std::string_view path, tr_error** /*error*
     return std::empty(path) ? "/"sv : path;
 }
 
+bool tr_sys_path_limit_filename(std::string& subpath, std::string_view suffix, size_t extra)
+{
+    constexpr size_t kMaxExt = 9; // Includes dot. Keeps ".backup", ".original".
+
+    auto basename_pos = subpath.find_last_of('/');
+    if (basename_pos == std::string::npos) basename_pos = 0;
+    else if (basename_pos == subpath.size() - 1) return false; // subpath ends with '/', so it's not a file.
+    else ++basename_pos;
+
+    if (auto basename_len = subpath.size() - basename_pos; basename_len + extra < 256) return false;
+
+    auto ext_pos = subpath.find_last_of('.');
+    if (ext_pos != std::string::npos)
+    {
+        if (ext_pos <= basename_pos)
+        {
+            ext_pos = std::string::npos;
+        }
+        else if (auto ext_len = subpath.size() - ext_pos; ext_len > kMaxExt)
+        {
+            ext_pos = std::string::npos;
+        }
+    }
+    auto const ext = ext_pos == std::string::npos ? ""s : std::string{ subpath.cbegin() + ext_pos, subpath.cend() };
+
+    auto cut_pos = basename_pos + 255 - ext.size() - suffix.size() - extra;
+	// Avoid cutting at the middle of a UTF-8 character.
+    for (auto iter = subpath.cbegin() + cut_pos; iter > subpath.cbegin() + basename_pos; --iter)
+    {
+        if ((*iter & 0xC0) == 0x80) --cut_pos;
+        else break;
+    }
+
+    subpath.erase(cut_pos);
+    subpath.append(suffix);
+    subpath.append(ext);
+
+    return true;
+}
+
 // This function is adapted from Node.js's path.posix.dirname() function,
 // which is copyrighted by Joyent, Inc. and other Node contributors
 // and is distributed under MIT (SPDX:MIT) license.
diff --git a/libtransmission/file-win32.cc b/libtransmission/file-win32.cc
index dc562e4b..fefa89e8 100644
--- a/libtransmission/file-win32.cc
+++ b/libtransmission/file-win32.cc
@@ -581,6 +581,12 @@ std::string_view tr_sys_path_basename(std::string_view path, tr_error** error)
     return !std::empty(path) ? path : "/"sv;
 }
 
+// Not implemented. May not need to at all. Return false to indicate subpath not changed.
+bool tr_sys_path_limit_filename(std::string& subpath, std::string_view suffix, size_t extra)
+{
+    return false;
+}
+
 [[nodiscard]] static bool isWindowsDeviceRoot(char ch) noexcept
 {
     return isalpha(static_cast<int>(ch)) != 0;
diff --git a/libtransmission/file.h b/libtransmission/file.h
index 6d19340f..66e29853 100644
--- a/libtransmission/file.h
+++ b/libtransmission/file.h
@@ -233,6 +233,21 @@ std::string tr_sys_path_resolve(std::string_view path, struct tr_error** error =
  */
 std::string_view tr_sys_path_basename(std::string_view path, struct tr_error** error = nullptr);
 
+/**
+* @brief Limit filename length to 255.
+*        Truncate basename at tail, append suffix, then append extension back.
+*        The resultant subpath length is limited to (255 - extra).
+*
+* @param[in,out] subpath Only the basename part may be changed.
+* @param[in] suffix Normally a file ID string to help avoid filename collision.
+* @param[in] extra Extra bytes to reserve, for ".part", or 0 if not needed.
+*
+* @return Whether subpath is changed.
+*         If subpath basename too long, then subpath is changed, return true.
+*         If basename length was less than (255 - extra), return false.
+*/
+bool tr_sys_path_limit_filename(std::string& subpath, std::string_view suffix, size_t extra);
+
 /**
  * @brief Portability wrapper for `dirname()`.
  *
diff --git a/libtransmission/inout.cc b/libtransmission/inout.cc
index 458cb05b..e99e9b48 100644
--- a/libtransmission/inout.cc
+++ b/libtransmission/inout.cc
@@ -72,7 +72,7 @@ enum class IoMode
     Write
 };
 
-bool getFilename(tr_pathbuf& setme, tr_torrent const* tor, tr_file_index_t file_index, IoMode io_mode)
+bool getFilename(tr_pathbuf& setme, tr_torrent* tor, tr_file_index_t file_index, IoMode io_mode)
 {
     if (auto found = tor->findFile(file_index); found)
     {
@@ -89,7 +89,17 @@ bool getFilename(tr_pathbuf& setme, tr_torrent const* tor, tr_file_index_t file_
     // Let's figure out where it goes so that we can create it.
     auto const base = tor->currentDir();
     auto const suffix = tor->session->isIncompleteFileNamingEnabled() ? tr_torrent_files::PartialFileSuffix : ""sv;
-    setme.assign(base, '/', tor->fileSubpath(file_index), suffix);
+
+    std::string subpath{ tor->fileSubpath(file_index) };
+    auto const idstr = fmt::format("_{:x}-{}", file_index, tor->infoHashString()); // Avoid filename collision with best efforts.
+    auto const changed = tr_sys_path_limit_filename(subpath, idstr, suffix.size());
+    setme.assign(base, '/', subpath, suffix);
+    if (changed)
+    {
+        tor->setFileSubpath(file_index, subpath);
+        tor->setDirty();
+        tor->markChanged();
+    }
     return true;
 }
